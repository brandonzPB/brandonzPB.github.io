{"ast":null,"code":"import axios from 'axios';\nconst baseUrl = '/dashboard/user'; // CREATE user\n\nconst createUser = userObject => {\n  const req = axios.post(`${baseUrl}/create`, userObject);\n  return req.then(res => res.data).catch(err => console.error(err));\n}; // LOGIN\n\n\nconst login = credentials => {\n  const req = axios.post(`${baseUrl}/login`, credentials);\n  return req.then(res => {\n    console.log('res', res.data);\n    return res.data;\n  }).catch(err => console.error(err));\n}; // POST reset request\n\n\nconst postResetRequest = email => {\n  const reqUser = {\n    email\n  };\n  const req = axios.post(`${baseUrl}/reset`, reqUser);\n  return req.then(res => {\n    console.log('res', res.data);\n    return res.data;\n  }).catch(err => console.error(err));\n}; // GET reset code (POST email)\n\n\nconst getResetCode = email => {\n  const reqUser = {\n    email\n  };\n  const req = axios.post(`${baseUrl}/reset_code_email`, reqUser);\n  return req.then(res => res.data).catch(err => console.error(err));\n}; // POST reset code\n\n\nconst postResetCode = (code, token) => {\n  const reqUser = {\n    reset_code: code\n  };\n  const req = axios.post(`${baseUrl}/reset_code`, reqUser, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => res.data).catch(err => console.error(err));\n}; // PUT password resest\n\n\nconst putPasswordReset = (userObject, token) => {\n  const req = axios.put(`${baseUrl}/reset_password`, userObject, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => {\n    console.log('res.data', res.data);\n    return res.data;\n  }).catch(err => console.error(err));\n}; // GET all users\n\n\nconst getAll = token => {\n  const req = axios.get('/dashboard/users', {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => res.data).catch(err => console.error(err));\n}; // READ user\n\n\nconst readUser = (userId, token) => {\n  const req = axios.get(`${baseUrl}/${userId}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => {\n    console.log(res.data);\n    return res.data;\n  }).catch(err => console.error(err));\n}; // GET USERNAMES\n\n\nconst checkUsername = (type, input, userObject, token) => {\n  // returns if request is available\n  let thisUser;\n  type === 'username' ? thisUser = { ...userObject,\n    username: input,\n    type: 'username'\n  } : thisUser = { ...userObject,\n    email: input,\n    type: 'email'\n  };\n  const req = axios.post(`${baseUrl}/usernames`, thisUser, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => {\n    console.log('res', res.data);\n    return res.data;\n  }).catch(err => console.error(err));\n}; // POST localStorage creatures\n\n\nconst storeLocalCreatures = (userId, creatures, token) => {\n  const req = axios.post(`${baseUrl}/${userId}`, creatures, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => res.data).catch(err => console.error(err));\n}; // UPDATE user\n\n\nconst updateUser = (type = 'none', userId, userObject, token) => {\n  const thisUser = { ...userObject,\n    type\n  };\n  const req = axios.put(`${baseUrl}/${userId}/update`, thisUser, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => res.data).catch(err => console.error(err));\n}; // DELETE user\n\n\nconst deleteUser = (userId, token) => {\n  const req = axios.delete(`${baseUrl}/${userId}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => res.data).catch(err => console.error(err));\n};\n\nexport default {\n  getAll,\n  createUser,\n  login,\n  postResetRequest,\n  getResetCode,\n  postResetCode,\n  putPasswordReset,\n  readUser,\n  checkUsername,\n  storeLocalCreatures,\n  updateUser,\n  deleteUser\n};","map":{"version":3,"sources":["/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/services/userService.js"],"names":["axios","baseUrl","createUser","userObject","req","post","then","res","data","catch","err","console","error","login","credentials","log","postResetRequest","email","reqUser","getResetCode","postResetCode","code","token","reset_code","headers","putPasswordReset","put","getAll","get","readUser","userId","checkUsername","type","input","thisUser","username","storeLocalCreatures","creatures","updateUser","deleteUser","delete"],"mappings":"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","sourcesContent":["import axios from 'axios';\nconst baseUrl = '/dashboard/user';\n\n// CREATE user\nconst createUser = (userObject) => {\n  const req = axios.post(`${baseUrl}/create`, userObject);\n  return req.then(res => res.data)\n    .catch(err => console.error(err));\n};\n\n// LOGIN\nconst login = (credentials) => {\n  const req = axios.post(`${baseUrl}/login`, credentials);\n\n  return req.then(res => {\n    console.log('res', res.data);\n\n    return res.data;\n  })\n    .catch(err => console.error(err));\n}\n\n// POST reset request\nconst postResetRequest = (email) => {\n  const reqUser = { email };\n\n  const req = axios.post(`${baseUrl}/reset`, reqUser);\n\n  return req.then(res => {\n    console.log('res', res.data);\n\n    return res.data;\n  })\n    .catch(err => console.error(err));\n}\n\n// GET reset code (POST email)\nconst getResetCode = (email) => {\n  const reqUser = { email };\n\n  const req = axios.post(`${baseUrl}/reset_code_email`, reqUser);\n\n  return req.then(res => res.data)\n    .catch(err => console.error(err));\n}\n\n// POST reset code\nconst postResetCode = (code, token) => {\n  const reqUser = { reset_code: code };\n\n  const req = axios.post(`${baseUrl}/reset_code`, reqUser, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n\n  return req.then(res => res.data)\n    .catch(err => console.error(err));\n}\n\n// PUT password resest\nconst putPasswordReset = (userObject, token) => {\n  const req = axios.put(`${baseUrl}/reset_password`, userObject, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n\n  return req.then(res => {\n    console.log('res.data', res.data);\n    return res.data;\n  })\n    .catch(err => console.error(err));\n}\n\n// GET all users\nconst getAll = (token) => {\n  const req = axios.get('/dashboard/users', {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n\n  return req.then(res => res.data)\n    .catch(err => console.error(err));\n};\n\n// READ user\nconst readUser = (userId, token) => {\n  const req = axios.get(`${baseUrl}/${userId}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n\n  return req.then(res => {\n    console.log(res.data);\n\n    return res.data;\n  })\n    .catch(err => console.error(err));\n};\n\n// GET USERNAMES\nconst checkUsername = (type, input, userObject, token) => {\n  // returns if request is available\n  let thisUser;\n\n  type === 'username'\n    ? thisUser = {\n      ...userObject,\n      username: input,\n      type: 'username',\n    }\n    : thisUser = {\n      ...userObject,\n      email: input,\n      type: 'email',\n    };\n\n  const req = axios.post(`${baseUrl}/usernames`, thisUser, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n\n  return req.then(res => {\n    console.log('res', res.data);\n    return res.data;\n  })\n    .catch(err => console.error(err));\n}\n\n// POST localStorage creatures\nconst storeLocalCreatures = (userId, creatures, token) => {\n  const req = axios.post(`${baseUrl}/${userId}`, creatures, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n\n  return req.then(res => res.data)\n    .catch(err => console.error(err));\n}\n\n// UPDATE user\nconst updateUser = (type = 'none', userId, userObject, token) => {\n  const thisUser = {\n    ...userObject,\n    type\n  };\n\n  const req = axios.put(`${baseUrl}/${userId}/update`, thisUser, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n\n  return req.then(res => res.data)\n    .catch(err => console.error(err));\n};\n\n// DELETE user\nconst deleteUser = (userId, token) => {\n  const req = axios.delete(`${baseUrl}/${userId}`, \n  {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n\n  return req.then(res => res.data)\n    .catch(err => console.error(err));\n};\n\nexport default { \n  getAll,\n  createUser,\n  login,\n  postResetRequest,\n  getResetCode,\n  postResetCode,\n  putPasswordReset,\n  readUser,\n  checkUsername,\n  storeLocalCreatures,\n  updateUser,\n  deleteUser \n};\n"]},"metadata":{},"sourceType":"module"}