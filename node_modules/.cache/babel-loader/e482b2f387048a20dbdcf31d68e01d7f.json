{"ast":null,"code":"import _slicedToArray from\"/home/brandonzpb/Documents/projects/custom/creatures-of-habit/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useContext}from'react';import{CreatureContext}from'../contexts/CreatureContext';var ObjectiveCompleteForm=function ObjectiveCompleteForm(_ref){var creature=_ref.creature,objective=_ref.objective;var _useContext=useContext(CreatureContext),getExp=_useContext.getExp,play=_useContext.play,togglePlay=_useContext.togglePlay,expUpdate=_useContext.expUpdate,toggleExpUpdate=_useContext.toggleExpUpdate;var _useState=useState(0),_useState2=_slicedToArray(_useState,2),time=_useState2[0],setTime=_useState2[1];var handleChange=function handleChange(event){setTime(event.target.value);};var completeObjective=function completeObjective(event){event.preventDefault();if(!play)togglePlay();if(!expUpdate)toggleExpUpdate();if(!objective.isTimed){getExp(creature,objective,1);return togglePlay();}getExp(creature,objective,time);togglePlay();setTime(0);};if(objective.isTimed){return/*#__PURE__*/React.createElement(\"div\",{className:\"complete-objective-form\"},/*#__PURE__*/React.createElement(\"form\",{onSubmit:completeObjective},/*#__PURE__*/React.createElement(\"label\",{className:\"time-text\"},\"Time (hrs)\"),/*#__PURE__*/React.createElement(\"input\",{type:\"number\",name:\"time\",value:time,min:0.25,max:24,step:0.25,onChange:handleChange,className:\"time-input\",placeholder:0}),/*#__PURE__*/React.createElement(\"button\",{className:\"complete-obj-btn\"},\"Complete Habit\")));}return/*#__PURE__*/React.createElement(\"div\",{className:\"objective-complete-btn-container\"},/*#__PURE__*/React.createElement(\"form\",{onSubmit:completeObjective},/*#__PURE__*/React.createElement(\"button\",{className:\"complete-obj-btn\"},\"Complete Habit\")));};export default ObjectiveCompleteForm;","map":{"version":3,"sources":["/home/brandonzpb/Documents/projects/custom/creatures-of-habit/front/src/components/ObjectiveCompleteForm.js"],"names":["React","useState","useContext","CreatureContext","ObjectiveCompleteForm","creature","objective","getExp","play","togglePlay","expUpdate","toggleExpUpdate","time","setTime","handleChange","event","target","value","completeObjective","preventDefault","isTimed"],"mappings":"0LAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,UAA1B,KAA4C,OAA5C,CACA,OAASC,eAAT,KAAgC,6BAAhC,CAEA,GAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,MAA6B,IAA1BC,CAAAA,QAA0B,MAA1BA,QAA0B,CAAhBC,SAAgB,MAAhBA,SAAgB,iBACQJ,UAAU,CAACC,eAAD,CADlB,CACjDI,MADiD,aACjDA,MADiD,CACzCC,IADyC,aACzCA,IADyC,CACnCC,UADmC,aACnCA,UADmC,CACvBC,SADuB,aACvBA,SADuB,CACZC,eADY,aACZA,eADY,eAGjCV,QAAQ,CAAC,CAAD,CAHyB,wCAGlDW,IAHkD,eAG5CC,OAH4C,eAKzD,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAAW,CAC9BF,OAAO,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP,CACD,CAFD,CAIA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAAAH,KAAK,CAAI,CACjCA,KAAK,CAACI,cAAN,GAEA,GAAI,CAACX,IAAL,CAAWC,UAAU,GACrB,GAAI,CAACC,SAAL,CAAgBC,eAAe,GAE/B,GAAI,CAACL,SAAS,CAACc,OAAf,CAAwB,CACtBb,MAAM,CAACF,QAAD,CAAWC,SAAX,CAAsB,CAAtB,CAAN,CACA,MAAOG,CAAAA,UAAU,EAAjB,CACD,CAEDF,MAAM,CAACF,QAAD,CAAWC,SAAX,CAAsBM,IAAtB,CAAN,CAEAH,UAAU,GAEVI,OAAO,CAAC,CAAD,CAAP,CACD,CAhBD,CAkBA,GAAIP,SAAS,CAACc,OAAd,CAAuB,CACrB,mBACE,2BAAK,SAAS,CAAC,yBAAf,eACE,4BAAM,QAAQ,CAAEF,iBAAhB,eACE,6BAAO,SAAS,CAAC,WAAjB,eADF,cAEE,6BACE,IAAI,CAAC,QADP,CAEE,IAAI,CAAC,MAFP,CAGE,KAAK,CAAEN,IAHT,CAIE,GAAG,CAAE,IAJP,CAKE,GAAG,CAAE,EALP,CAME,IAAI,CAAE,IANR,CAOE,QAAQ,CAAEE,YAPZ,CAQE,SAAS,CAAC,YARZ,CASE,WAAW,CAAE,CATf,EAFF,cAaE,8BAAQ,SAAS,CAAC,kBAAlB,mBAbF,CADF,CADF,CAmBD,CAED,mBACE,2BAAK,SAAS,CAAC,kCAAf,eACE,4BAAM,QAAQ,CAAEI,iBAAhB,eACE,8BAAQ,SAAS,CAAC,kBAAlB,mBADF,CADF,CADF,CAOD,CAxDD,CA0DA,cAAed,CAAAA,qBAAf","sourcesContent":["import React, { useState, useContext } from 'react';\nimport { CreatureContext } from '../contexts/CreatureContext';\n\nconst ObjectiveCompleteForm = ({ creature, objective }) => {\n  const { getExp, play, togglePlay, expUpdate, toggleExpUpdate } = useContext(CreatureContext);\n\n  const [time, setTime] = useState(0);\n\n  const handleChange = (event) => {\n    setTime(event.target.value);\n  }\n  \n  const completeObjective = event => {\n    event.preventDefault();\n\n    if (!play) togglePlay();\n    if (!expUpdate) toggleExpUpdate();\n\n    if (!objective.isTimed) {\n      getExp(creature, objective, 1);\n      return togglePlay();\n    }\n\n    getExp(creature, objective, time);\n\n    togglePlay();\n\n    setTime(0);\n  }\n\n  if (objective.isTimed) {\n    return (\n      <div className=\"complete-objective-form\">\n        <form onSubmit={completeObjective}>\n          <label className=\"time-text\">Time (hrs)</label>\n          <input \n            type=\"number\"\n            name=\"time\"\n            value={time}\n            min={0.25}\n            max={24}\n            step={0.25}\n            onChange={handleChange}\n            className=\"time-input\"\n            placeholder={0}\n          />\n          <button className=\"complete-obj-btn\">Complete Habit</button>\n        </form>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"objective-complete-btn-container\">\n      <form onSubmit={completeObjective}>\n        <button className=\"complete-obj-btn\">Complete Habit</button>\n      </form>\n    </div>\n  )\n}\n\nexport default ObjectiveCompleteForm;\n"]},"metadata":{},"sourceType":"module"}