{"ast":null,"code":"var _jsxFileName = \"/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/contexts/CreatureContext.js\";\nimport React, { useState, useReducer, useEffect, useContext, createContext } from 'react';\nimport creatureReducer from '../reducers/creatureReducer';\nimport * as objective from '../modules/objective';\nimport * as streakTime from '../modules/age';\nimport creatureService from '../services/creatureService';\nimport { UserContext } from './UserContext';\nexport const CreatureContext = createContext();\n\nconst CreatureContextProvider = props => {\n  const {\n    user,\n    userDispatch,\n    updateUser\n  } = useContext(UserContext);\n  const [creatures, dispatch] = useReducer(creatureReducer, user.creatures); //   const creatures = localStorage.getItem('my-user');\n  //   const storedCreatures = creatures ? JSON.parse(creatures) : [];\n  //   return storedCreatures.creatures;\n  // });\n\n  /* useEffect(() => {\n    console.log('creatures', creatures)\n     dispatch({ type: 'UPDATE_STATE', creatures: { creatures: user.creatures }});\n  }, [])\n   useEffect(() => {\n    userDispatch({ type: 'UPDATE_CREATURES', creatures: { creatures: user.creatures }});\n    localStorage.setItem('my-user', JSON.stringify(user));\n  }, [user.creatures]); */\n\n  /* const [creatures, dispatch] = useReducer(creatureReducer, [], () => {\n    const storedCreatures = localStorage.getItem('my-creatures');\n    return storedCreatures ? JSON.parse(storedCreatures) : [];\n  });\n   useEffect(() => {\n    localStorage.setItem('my-creatures', JSON.stringify(creatures));\n  }, [creatures]); */\n\n  const [currentId, setCurrentId] = useState('');\n  const [play, setPlay] = useState(false);\n  const [formDisplay, setFormDisplay] = useState(true);\n  const [expUpdate, setExpUpdate] = useState(false);\n  const [done, setDone] = useState({\n    type: '',\n    object: '',\n    method: ''\n  });\n  useEffect(() => {\n    if (done.type.trim()) {\n      if (done.type === 'objective') {\n        updateObjectives();\n      } else if (done.type === 'creature') {\n        if (done.method === 'create') createCreature(done.object);else if (done.method === 'stats') updateCreatureStats(done.object.id);else if (done.method === 'info') updateCreatureInfo(done.object.id);\n      } else if (done.type === 'db') {\n        updateUser(done.method);\n      }\n\n      return setDone({ ...done,\n        type: '',\n        object: null,\n        method: ''\n      });\n    }\n\n    return false;\n  }, [done]);\n\n  const finish = (type, object = null, method = null) => {\n    return type = 'creature' ? setDone({ ...done,\n      type,\n      object,\n      method\n    }) : setDone({ ...done,\n      type,\n      object,\n      method\n    });\n  }; // CREATE CREATURE\n\n\n  const createCreature = creatureObject => {\n    creatureService.createCreature(user.db_id, creatureObject, user.accessToken).then(res => res).catch(err => console.error(err));\n    console.log('Successfully added creature', creatureObject);\n  }; // UPDATE CREATURE STATS\n\n\n  const updateCreatureStats = async creatureId => {\n    console.log('Updating creature...');\n    const creature = user.creatures.filter(being => being.id === creatureId);\n    await creatureService.updateCreatureStats(user.db_id, creature[0]._id, creature[0], user.accessToken).then(res => res).catch(err => console.error(err));\n    console.log('Successfully updated creature');\n  }; // UPDATE CREATURE INFO\n\n\n  const updateCreatureInfo = async creatureId => {\n    console.log('Updating creature...');\n    const creature = user.creatures.filter(being => being.id === creatureId);\n    await creatureService.updateCreatureInfo(user.db_id, creature[0]._id, creature[0], user.accessToken).then(res => res).catch(err => console.error(err));\n    console.log('Successfully updated creature');\n  }; /// OBJECTIVE METHODS ///\n\n\n  const checkObjectiveText = (creatureId, text) => {\n    const thisCreature = user.creatures.filter(being => being.id === creatureId);\n    const objectiveIndex = thisCreature[0].objectives.findIndex(item => item.text.toLowerCase() === text.toLowerCase());\n    return objectiveIndex >= 0 ? true : false;\n  }; // UPDATE OBJECTIVES\n\n\n  const updateObjectives = async () => {\n    const creature = user.creatures.filter(creature => creature.id === currentId);\n    const objectives = creature[0].objectives;\n    console.log('objectives', objectives);\n    await creatureService.updateObjectives(user.db_id, creature[0]._id, objectives, user.accessToken).then(res => console.log('res', res)).catch(err => console.error(err));\n    console.log('Successfully updated objectives');\n  }; // DELETE CREATURE\n\n\n  const postDelete = () => {\n    console.log('Deleting creature', currentId);\n    const creature = user.creatures.filter(being => being.id === currentId);\n\n    const creatureDbId = creature[0]._id.toString();\n\n    userDispatch({\n      type: 'DELETE_CREATURE',\n      id: currentId\n    });\n    deleteCreature(creatureDbId);\n    finish('db');\n  };\n\n  const deleteCreature = creatureId => {\n    creatureService.deleteCreature(user.db_id, creatureId, user.accessToken).then(res => res).catch(err => console.error(err));\n    console.log('Successfully deleted creature.');\n  };\n\n  const getExp = (habit, time) => {\n    const creature = user.creatures.filter(creature => creature.id === currentId);\n    if (creature[0].is_noob) return getFirstExp(creature[0]);\n    const streakCount = creature[0].streak_count;\n    const newExp = objective.calcExp(creature[0].multiplier, streakCount, habit.difficulty, time);\n    const newTotal = creature[0].exp + newExp;\n    const newSurplus = newTotal >= creature[0].exp_goal ? newTotal - creature[0].exp_goal : creature[0].exp_surplus + newExp;\n    userDispatch({\n      type: 'ADD_EXP',\n      creature: {\n        id: currentId,\n        newTotal,\n        newSurplus\n      }\n    });\n    return creature;\n  };\n\n  const getFirstExp = creature => {\n    const newTotal = 1;\n    const newSurplus = 0;\n    userDispatch({\n      type: 'ADD_EXP',\n      creature: {\n        id: creature.id,\n        newTotal,\n        newSurplus\n      }\n    });\n    return creature;\n  };\n\n  const toggleExpUpdate = () => {\n    setExpUpdate(!expUpdate);\n  };\n\n  const toggleFormDisplay = () => {\n    setFormDisplay(!formDisplay);\n  };\n\n  const showCreatureObjectives = async id => {\n    return setCurrentId(id);\n  };\n\n  const togglePlay = () => {\n    setPlay(!play);\n  };\n\n  return /*#__PURE__*/React.createElement(CreatureContext.Provider, {\n    value: {\n      creatures,\n      createCreature,\n      updateCreatureInfo,\n      updateCreatureStats,\n      updateObjectives,\n      postDelete,\n      deleteCreature,\n      currentId,\n      play,\n      togglePlay,\n      formDisplay,\n      toggleFormDisplay,\n      expUpdate,\n      toggleExpUpdate,\n      done,\n      setDone,\n      finish,\n      dispatch,\n      showCreatureObjectives,\n      getExp,\n      checkObjectiveText\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default CreatureContextProvider;","map":{"version":3,"sources":["/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/contexts/CreatureContext.js"],"names":["React","useState","useReducer","useEffect","useContext","createContext","creatureReducer","objective","streakTime","creatureService","UserContext","CreatureContext","CreatureContextProvider","props","user","userDispatch","updateUser","creatures","dispatch","currentId","setCurrentId","play","setPlay","formDisplay","setFormDisplay","expUpdate","setExpUpdate","done","setDone","type","object","method","trim","updateObjectives","createCreature","updateCreatureStats","id","updateCreatureInfo","finish","creatureObject","db_id","accessToken","then","res","catch","err","console","error","log","creatureId","creature","filter","being","_id","checkObjectiveText","text","thisCreature","objectiveIndex","objectives","findIndex","item","toLowerCase","postDelete","creatureDbId","toString","deleteCreature","getExp","habit","time","is_noob","getFirstExp","streakCount","streak_count","newExp","calcExp","multiplier","difficulty","newTotal","exp","newSurplus","exp_goal","exp_surplus","toggleExpUpdate","toggleFormDisplay","showCreatureObjectives","togglePlay","children"],"mappings":"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","sourcesContent":["import React, { useState, useReducer, useEffect, useContext, createContext } from 'react';\nimport creatureReducer from '../reducers/creatureReducer';\nimport * as objective from '../modules/objective'\nimport * as streakTime from '../modules/age';\nimport creatureService from '../services/creatureService';\nimport { UserContext } from './UserContext';\n\nexport const CreatureContext = createContext();\n\nconst CreatureContextProvider = (props) => {\n  const { user, userDispatch, updateUser } = useContext(UserContext);\n\n  const [creatures, dispatch] = useReducer(creatureReducer, user.creatures);\n  //   const creatures = localStorage.getItem('my-user');\n  //   const storedCreatures = creatures ? JSON.parse(creatures) : [];\n  //   return storedCreatures.creatures;\n  // });\n\n  /* useEffect(() => {\n    console.log('creatures', creatures)\n\n    dispatch({ type: 'UPDATE_STATE', creatures: { creatures: user.creatures }});\n  }, [])\n\n  useEffect(() => {\n    userDispatch({ type: 'UPDATE_CREATURES', creatures: { creatures: user.creatures }});\n    localStorage.setItem('my-user', JSON.stringify(user));\n  }, [user.creatures]); */\n\n  /* const [creatures, dispatch] = useReducer(creatureReducer, [], () => {\n    const storedCreatures = localStorage.getItem('my-creatures');\n    return storedCreatures ? JSON.parse(storedCreatures) : [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem('my-creatures', JSON.stringify(creatures));\n  }, [creatures]); */\n\n  const [currentId, setCurrentId] = useState('');\n  const [play, setPlay] = useState(false);\n  const [formDisplay, setFormDisplay] = useState(true);\n  const [expUpdate, setExpUpdate] = useState(false);\n\n  const [done, setDone] = useState({\n    type: '',\n    object: '',\n    method: '',\n  });\n\n  useEffect(() => {\n    if (done.type.trim()) {\n\n      if (done.type === 'objective') {\n        updateObjectives();\n\n      } else if (done.type === 'creature') {\n        if (done.method === 'create') createCreature(done.object);\n        else if (done.method === 'stats') updateCreatureStats(done.object.id);\n        else if (done.method === 'info') updateCreatureInfo(done.object.id);\n\n      } else if (done.type === 'db') {\n        updateUser(done.method);\n      }\n\n      return setDone({ ...done,\n        type: '',\n        object: null,\n        method: '',\n      });\n    }\n\n    return false;\n  }, [done]);\n\n  const finish = (type, object = null, method = null) => {\n    return type = 'creature' ?\n      setDone({\n        ...done, \n        type,\n        object,\n        method\n      }) :\n      setDone({\n        ...done,\n        type,\n        object,\n        method\n      });\n  }\n\n\n  // CREATE CREATURE\n  const createCreature = creatureObject => {\n    creatureService.createCreature(user.db_id, creatureObject, user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n\n    console.log('Successfully added creature', creatureObject);\n  }\n\n  // UPDATE CREATURE STATS\n  const updateCreatureStats = async (creatureId) => {\n    console.log('Updating creature...');\n\n    const creature = user.creatures.filter(being => being.id === creatureId);\n\n    await creatureService.updateCreatureStats(user.db_id, creature[0]._id, creature[0], user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n\n    console.log('Successfully updated creature');\n  }\n\n  // UPDATE CREATURE INFO\n  const updateCreatureInfo = async (creatureId) => {\n    console.log('Updating creature...');\n\n    const creature = user.creatures.filter(being => being.id === creatureId);\n\n    await creatureService.updateCreatureInfo(user.db_id, creature[0]._id, creature[0], user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n\n    console.log('Successfully updated creature');\n  }\n\n  /// OBJECTIVE METHODS ///\n\n  const checkObjectiveText = (creatureId, text) => {\n    const thisCreature = user.creatures.filter(being => being.id === creatureId);\n\n    const objectiveIndex = thisCreature[0].objectives.findIndex(item => item.text.toLowerCase() === text.toLowerCase());\n    return (objectiveIndex >= 0) ? true : false;\n  }\n\n  // UPDATE OBJECTIVES\n  const updateObjectives = async () => {\n    const creature = user.creatures.filter(creature => creature.id === currentId);\n\n    const objectives = creature[0].objectives;\n    console.log('objectives', objectives)\n\n    await creatureService.updateObjectives(user.db_id, creature[0]._id, objectives, user.accessToken)\n      .then(res => console.log('res', res))\n      .catch(err => console.error(err));\n\n    console.log('Successfully updated objectives');\n  }\n\n  // DELETE CREATURE\n  const postDelete = () => {\n    console.log('Deleting creature', currentId);\n\n    const creature = user.creatures.filter(being => being.id === currentId);\n    const creatureDbId = creature[0]._id.toString();\n\n    userDispatch({ type: 'DELETE_CREATURE', id: currentId });\n\n    deleteCreature(creatureDbId);\n\n    finish('db');\n  }\n\n  const deleteCreature = (creatureId) => {\n    creatureService.deleteCreature(user.db_id, creatureId, user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n\n    console.log('Successfully deleted creature.');\n  }\n\n  const getExp = (habit, time) => { \n    const creature = user.creatures.filter(creature => creature.id === currentId);\n\n    if (creature[0].is_noob) return getFirstExp(creature[0]);\n\n    const streakCount = creature[0].streak_count;\n\n    const newExp = objective.calcExp(creature[0].multiplier, streakCount, habit.difficulty, time);\n    const newTotal = creature[0].exp + newExp;\n\n    const newSurplus = (newTotal >= creature[0].exp_goal) ? \n      newTotal - creature[0].exp_goal :\n      creature[0].exp_surplus + newExp;\n\n    userDispatch({ type: 'ADD_EXP', creature: {\n      id: currentId,\n      newTotal,\n      newSurplus\n    }});\n\n    return creature;\n  }\n\n  const getFirstExp = creature => {\n    const newTotal = 1;\n    const newSurplus = 0;\n\n    userDispatch({ type: 'ADD_EXP', creature: { id: creature.id, newTotal, newSurplus } });\n\n    return creature;\n  }\n\n  const toggleExpUpdate = () => {\n    setExpUpdate(!expUpdate);\n  }\n\n  const toggleFormDisplay = () => {\n    setFormDisplay(!formDisplay);\n  }\n\n  const showCreatureObjectives = async (id) => {\n    return setCurrentId(id);\n  }\n\n  const togglePlay = () => {\n    setPlay(!play);\n  }\n\n  return (\n    <CreatureContext.Provider \n      value={{\n        creatures,\n        createCreature,\n        updateCreatureInfo,\n        updateCreatureStats,\n        updateObjectives,\n        postDelete,\n        deleteCreature, \n        currentId,\n        play,\n        togglePlay,\n        formDisplay,\n        toggleFormDisplay,\n        expUpdate,\n        toggleExpUpdate,\n        done,\n        setDone,\n        finish,\n        dispatch,\n        showCreatureObjectives,\n        getExp,\n        checkObjectiveText,\n      }}>\n      {props.children}\n    </CreatureContext.Provider>\n  )\n}\n\nexport default CreatureContextProvider;\n"]},"metadata":{},"sourceType":"module"}