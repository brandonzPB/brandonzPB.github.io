{"ast":null,"code":"var _jsxFileName = \"/home/brandonzpb/Documents/projects/custom/creatures-of-habit/front/src/contexts/UserContext.js\";\nimport React, { useState, useReducer, createContext, useEffect } from 'react';\nimport userService from '../services/userService';\nimport userReducer from '../reducers/userReducer';\nexport const UserContext = createContext();\n\nconst UserContextProvider = props => {\n  const [user, dispatch] = useReducer(userReducer, {}, () => {\n    const storedUser = localStorage.getItem('my-user');\n    return storedUser ? JSON.parse(storedUser) : {};\n  });\n  const [signup, setSignup] = useState(true);\n  useEffect(() => {\n    localStorage.setItem('my-user', JSON.stringify(user));\n  }, [user]);\n\n  const toggleSignup = () => {\n    return setSignup(!signup);\n  };\n\n  const addUser = async userObject => {\n    const users = await userService.getAll();\n    userService.createUser(userObject).then(res => {\n      return console.log('Successfully added new user');\n    }).catch(err => console.err(err));\n  };\n\n  const login = async userObject => {\n    const {\n      username,\n      email,\n      password\n    } = userObject;\n\n    try {\n      const user = userService.login({\n        username: username || email,\n        password\n      });\n    } catch (exception) {\n      throw new Error('Wrong credentials');\n    }\n\n    const users = await userService.getAll();\n    const thisUser = users.filter(acct => acct.username === user.username);\n    if (!thisUser) return false;\n    /* getLocalCreatures(); */\n\n    userService.login(thisUser).then(res => {\n      console.log(res);\n    }).catch(err => {\n      return console.error(err);\n    });\n    /* dispatch({ type: 'LOG_IN', user: {\n      username, email, password,\n      creatures: thisUser.creatures,\n    }}); */\n  };\n\n  const getLocalCreatures = () => {\n    const creatureStorage = localStorage.getItem('my-creatures');\n    const storedCreatures = creatureStorage ? JSON.parse(creatureStorage) : [];\n    console.log(storedCreatures);\n    dispatch({\n      type: 'GET_LOCAL_CREATURES',\n      user: {\n        creatures: storedCreatures\n      }\n    });\n    return false;\n  };\n\n  const deleteUser = userObject => {};\n\n  return /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: {\n      user,\n      signup,\n      toggleSignup,\n      addUser,\n      login,\n      deleteUser\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default UserContextProvider;","map":{"version":3,"sources":["/home/brandonzpb/Documents/projects/custom/creatures-of-habit/front/src/contexts/UserContext.js"],"names":["React","useState","useReducer","createContext","useEffect","userService","userReducer","UserContext","UserContextProvider","props","user","dispatch","storedUser","localStorage","getItem","JSON","parse","signup","setSignup","setItem","stringify","toggleSignup","addUser","userObject","users","getAll","createUser","then","res","console","log","catch","err","login","username","email","password","exception","Error","thisUser","filter","acct","error","getLocalCreatures","creatureStorage","storedCreatures","type","creatures","deleteUser","children"],"mappings":"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","sourcesContent":["import React, { useState, useReducer, createContext, useEffect } from 'react';\nimport userService from '../services/userService';\nimport userReducer from '../reducers/userReducer';\n\nexport const UserContext = createContext();\n\nconst UserContextProvider = (props) => {\n  const [user, dispatch] = useReducer(userReducer, {}, () => {\n    const storedUser = localStorage.getItem('my-user');\n    return storedUser ? JSON.parse(storedUser) : {};\n  });\n\n  const [signup, setSignup] = useState(true);\n\n  useEffect(() => {\n    localStorage.setItem('my-user', JSON.stringify(user));\n  }, [user]);\n\n  const toggleSignup = () => {\n    return setSignup(!signup);\n  }\n\n  const addUser = async (userObject) => {\n    const users = await userService.getAll();\n\n    userService\n      .createUser(userObject)\n      .then(res => { return console.log('Successfully added new user') })\n      .catch(err => console.err(err));\n  }\n\n  const login = async (userObject) => {\n    const { username, email, password } = userObject;\n\n    try {\n      const user = userService.login({\n        username: username || email,\n        password\n      });\n    } catch (exception) {\n      throw new Error('Wrong credentials');\n    }\n\n    const users = await userService.getAll();\n\n    const thisUser = users.filter(acct => acct.username === user.username);\n    \n    if (!thisUser) return false;\n\n    /* getLocalCreatures(); */\n\n    userService\n      .login(thisUser)\n      .then(res => {\n        console.log(res);\n      })\n      .catch(err => {\n        return console.error(err);\n      });\n\n    /* dispatch({ type: 'LOG_IN', user: {\n      username, email, password,\n      creatures: thisUser.creatures,\n    }}); */\n  }\n\n  const getLocalCreatures = () => {\n    const creatureStorage = localStorage.getItem('my-creatures');\n    \n    const storedCreatures = creatureStorage ? JSON.parse(creatureStorage) : [];\n\n    console.log(storedCreatures);\n\n    dispatch({ type: 'GET_LOCAL_CREATURES', user: {\n      creatures: storedCreatures\n    }});\n\n    return false;\n  }\n\n  const deleteUser = userObject => {}\n\n  return (\n    <UserContext.Provider value={{\n      user,\n      signup,\n      toggleSignup,\n      addUser,\n      login,\n      deleteUser,\n    }}>\n      {props.children}\n    </UserContext.Provider>\n  )\n}\n\nexport default UserContextProvider;\n"]},"metadata":{},"sourceType":"module"}