{"ast":null,"code":"var _jsxFileName = \"/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/components/creature/Creature.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport { CreatureContext } from '../../contexts/CreatureContext';\nimport { UserContext } from '../../contexts/UserContext';\nimport * as stats from '../../modules/stats';\nimport CreatureDisplay from './CreatureDisplay';\nimport './creature.css';\nimport * as age from '../../modules/age';\nimport * as streak from '../../modules/streak';\n\nconst lvlUpMusicSrc = require('../../sounds/level-up.mp3');\n\nconst levelUpSound = new Audio(lvlUpMusicSrc);\n\nconst evolveMusicSrc = require('../../sounds/evolve.mp3');\n\nconst evolveSound = new Audio(evolveMusicSrc);\n\nconst Creature = ({\n  creature\n}) => {\n  const {\n    displayObjectives,\n    showCreatureObjectives,\n    expUpdate,\n    toggleExpUpdate,\n    finish\n  } = useContext(CreatureContext);\n  const {\n    user,\n    userDispatch\n  } = useContext(UserContext);\n  const [levelUpdate, setLevelUpdate] = useState(false);\n  const [evolve, setEvolve] = useState(false);\n  const pokeball = !creature.pokeball_number ? 13 : creature.pokeball_number < 14 ? 13 // pokeball\n  : creature.pokeball_number === 14 ? 1 // greatball\n  : creature.pokeball_number === 15 ? 0 : 11; // ultraball : masterball\n\n  const img = require(`../../images/pokeballs/${pokeball}.png`);\n\n  const toggleLevelUpdate = () => {\n    setLevelUpdate(!levelUpdate);\n  };\n\n  const toggleEvolve = () => {\n    setEvolve(!evolve);\n  }; /// AUTO-UPDATE HOOKS ///\n  // HOOK: EXP + STREAK UPDATES\n\n\n  useEffect(() => {\n    if (!expUpdate) return;\n    const streak = streak.checkCreatureStreak(creature);\n    if (streak === 'increment' || creature.streak_count === 0) streak.updateCreatureStreak(creature, userDispatch, finish);\n\n    if (creature.exp >= creature.exp_goal || creature.is_noob) {\n      levelUpSound.currentTime = 1;\n      levelUpSound.play();\n      const newLevel = creature.level + 1;\n      userDispatch({\n        type: 'LEVEL_UP',\n        creature: {\n          id: creature.id,\n          level: newLevel\n        }\n      });\n      finish('creature', creature, 'stats');\n      return toggleLevelUpdate();\n    }\n\n    toggleExpUpdate();\n  }, [creature.exp]); // HOOK: NEW LEVEL UPDATES\n\n  useEffect(() => {\n    if (!levelUpdate) return;\n    const timer = setTimeout(() => {\n      const difficulty = stats.getCreatureDifficulty(creature.purpose, creature.level);\n      const multiplier = stats.getExpMultiplier(creature.level);\n      userDispatch({\n        type: 'UPGRADE_MULTIPLIERS',\n        creature: {\n          id: creature.id,\n          difficulty,\n          multiplier\n        }\n      });\n      finish('creature', creature, 'stats');\n      const prevGoal = creature.is_noob ? 1 : creature.exp_goal;\n      const newGoal = creature.is_noob ? 9 : stats.getExpGoal(creature.level, difficulty);\n      userDispatch({\n        type: 'LEVEL_UPDATES',\n        creature: {\n          id: creature.id,\n          prevGoal,\n          newGoal\n        }\n      });\n      finish('creature', creature, 'stats');\n      toggleExpUpdate();\n      toggleLevelUpdate();\n\n      if (creature.level === 15 || creature.level === 30 || creature.level === 50 || creature.level == 80) {\n        const newPokeball = creature.level === 30 ? 14 : creature.level === 50 ? 15 : creature.level === 80 ? 16 : creature.pokeball_number;\n        userDispatch({\n          type: 'UPDATE_POKEBALL',\n          creature: {\n            id: creature.id,\n            newPokeball\n          }\n        });\n        finish('creature', creature, 'stats');\n        return toggleEvolve();\n      }\n    }, 100);\n    return () => clearTimeout(timer);\n  }, [levelUpdate]); // HOOK: EVOLVE\n\n  useEffect(() => {\n    if (!evolve) return;\n    const nextCreatureIndex = creature.evolutions.findIndex(being => being === creature.creature) + 1;\n    if (!creature.evolutions[nextCreatureIndex]) return toggleEvolve();\n\n    if (creature.evolutions[nextCreatureIndex] === 'none') {\n      let newEvoLine = creature.evolutions;\n      newEvoLine.splice(nextCreatureIndex, 1);\n      console.log('newEvoLine', newEvoLine);\n      return toggleEvolve();\n    }\n\n    setTimeout(() => {\n      evolveSound.play();\n      const nextCreature = creature.evolutions[nextCreatureIndex];\n      userDispatch({\n        type: 'EVOLVE',\n        creature: {\n          id: creature.id,\n          nextCreature\n        }\n      });\n      finish('creature', creature, 'stats');\n      return toggleEvolve();\n    }, 800);\n  }, [evolve]); // Sends creature id to context and allows for\n  // The selected creature's objectives to be shown\n\n  const displayCreatureObjectives = () => {\n    showCreatureObjectives(creature.id);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"creature\",\n    style: {\n      backgroundImage: `linear-gradient(rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0.6)), url(${img})`,\n      backgroundRepeat: 'no-repeat',\n      backgroundSize: 'cover',\n      backgroundPosition: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CreatureDisplay, {\n    creature: creature,\n    displayObjectives: displayObjectives,\n    displayCreatureObjectives: displayCreatureObjectives,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Creature;","map":{"version":3,"sources":["/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/components/creature/Creature.js"],"names":["React","useState","useEffect","useContext","CreatureContext","UserContext","stats","CreatureDisplay","age","streak","lvlUpMusicSrc","require","levelUpSound","Audio","evolveMusicSrc","evolveSound","Creature","creature","displayObjectives","showCreatureObjectives","expUpdate","toggleExpUpdate","finish","user","userDispatch","levelUpdate","setLevelUpdate","evolve","setEvolve","pokeball","pokeball_number","img","toggleLevelUpdate","toggleEvolve","checkCreatureStreak","streak_count","updateCreatureStreak","exp","exp_goal","is_noob","currentTime","play","newLevel","level","type","id","timer","setTimeout","difficulty","getCreatureDifficulty","purpose","multiplier","getExpMultiplier","prevGoal","newGoal","getExpGoal","newPokeball","clearTimeout","nextCreatureIndex","evolutions","findIndex","being","newEvoLine","splice","console","log","nextCreature","displayCreatureObjectives","backgroundImage","backgroundRepeat","backgroundSize","backgroundPosition"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { CreatureContext } from '../../contexts/CreatureContext';\nimport { UserContext } from '../../contexts/UserContext';\nimport * as stats from '../../modules/stats';\nimport CreatureDisplay from './CreatureDisplay';\nimport './creature.css';\nimport * as age from '../../modules/age';\nimport * as streak from '../../modules/streak';\n\nconst lvlUpMusicSrc = require('../../sounds/level-up.mp3');\nconst levelUpSound = new Audio(lvlUpMusicSrc);\n\nconst evolveMusicSrc = require('../../sounds/evolve.mp3');\nconst evolveSound = new Audio(evolveMusicSrc);\n\nconst Creature = ({ creature }) => {\n  const { displayObjectives, showCreatureObjectives, expUpdate, toggleExpUpdate, finish } = useContext(CreatureContext);\n  const { user, userDispatch } = useContext(UserContext);\n\n  const [levelUpdate, setLevelUpdate] = useState(false);\n  const [evolve, setEvolve] = useState(false);\n\n  const pokeball = (!creature.pokeball_number) ? 13\n    : (creature.pokeball_number < 14) ? 13 // pokeball\n    : (creature.pokeball_number === 14) ? 1 // greatball\n    : (creature.pokeball_number === 15) ? 0 : 11; // ultraball : masterball\n\n  const img = require(`../../images/pokeballs/${pokeball}.png`);\n\n  const toggleLevelUpdate = () => {\n    setLevelUpdate(!levelUpdate);\n  }\n\n  const toggleEvolve = () => {\n    setEvolve(!evolve);\n  }\n\n  /// AUTO-UPDATE HOOKS ///\n\n  // HOOK: EXP + STREAK UPDATES\n  useEffect(() => { \n    if (!expUpdate) return;\n    \n    const streak = streak.checkCreatureStreak(creature);\n    if (streak === 'increment' || creature.streak_count === 0) streak.updateCreatureStreak(creature, userDispatch, finish);\n\n    if (creature.exp >= creature.exp_goal || creature.is_noob) {\n      levelUpSound.currentTime = 1;\n        levelUpSound.play();\n        \n      const newLevel = creature.level + 1;\n\n      userDispatch({ type: 'LEVEL_UP', creature: { id: creature.id, level: newLevel }});\n\n      finish('creature', creature, 'stats');\n\n      return toggleLevelUpdate();\n    }\n\n     toggleExpUpdate();\n  }, [creature.exp]);\n\n  // HOOK: NEW LEVEL UPDATES\n  useEffect(() => {\n    if (!levelUpdate) return;\n\n    const timer = setTimeout(() => {\n      const difficulty = stats.getCreatureDifficulty(creature.purpose, creature.level);\n      const multiplier = stats.getExpMultiplier(creature.level);\n\n      userDispatch({ type: 'UPGRADE_MULTIPLIERS', creature: { id: creature.id, difficulty, multiplier }});\n\n      finish('creature', creature, 'stats');\n\n      const prevGoal = (creature.is_noob) ? 1 : creature.exp_goal;\n      const newGoal = (creature.is_noob) ? 9 : stats.getExpGoal(creature.level, difficulty);\n\n      userDispatch({ type: 'LEVEL_UPDATES', creature: {\n        id: creature.id,\n        prevGoal,\n        newGoal,\n      }});\n\n      finish('creature', creature, 'stats');\n\n      toggleExpUpdate();\n      toggleLevelUpdate();\n\n      if (creature.level === 15 || creature.level === 30 || creature.level === 50 || creature.level == 80) {\n        const newPokeball = (creature.level === 30) ? 14\n          : (creature.level === 50) ? 15 \n          : (creature.level === 80) ? 16 \n          : creature.pokeball_number;\n\n        userDispatch({ type: 'UPDATE_POKEBALL', creature: {\n          id: creature.id,\n          newPokeball\n        }});\n\n        finish('creature', creature, 'stats');\n\n        return toggleEvolve();\n      }\n    }, 100);\n\n    return () => clearTimeout(timer);\n  }, [levelUpdate]);\n\n  // HOOK: EVOLVE\n  useEffect(() => {\n    if (!evolve) return;\n    \n    const nextCreatureIndex = creature.evolutions.findIndex(being => being === creature.creature) + 1;\n    if (!creature.evolutions[nextCreatureIndex]) return toggleEvolve();\n\n    if (creature.evolutions[nextCreatureIndex] === 'none') {\n      let newEvoLine = creature.evolutions;\n        newEvoLine.splice(nextCreatureIndex, 1);\n      console.log('newEvoLine', newEvoLine);\n\n      return toggleEvolve();\n    }\n\n    setTimeout(() => {\n      evolveSound.play();\n\n      const nextCreature = creature.evolutions[nextCreatureIndex];\n\n      userDispatch({ type: 'EVOLVE', creature: {\n        id: creature.id,\n        nextCreature\n      }});\n\n      finish('creature', creature, 'stats');\n\n      return toggleEvolve();\n    }, 800);\n  }, [evolve]);\n\n  // Sends creature id to context and allows for\n  // The selected creature's objectives to be shown\n  const displayCreatureObjectives = () => {\n    showCreatureObjectives(creature.id);\n  }\n\n  return (\n    <div className=\"creature\" style={{\n      backgroundImage: `linear-gradient(rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0.6)), url(${img})`,\n      backgroundRepeat: 'no-repeat',\n      backgroundSize: 'cover',\n      backgroundPosition: 'center',\n    }}>\n      <CreatureDisplay \n        creature={creature}\n        displayObjectives={displayObjectives}\n        displayCreatureObjectives={displayCreatureObjectives}\n      />\n    </div>\n  )\n}\n\nexport default Creature;\n"]},"metadata":{},"sourceType":"module"}