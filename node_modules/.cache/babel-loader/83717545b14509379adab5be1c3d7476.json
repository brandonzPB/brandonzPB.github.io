{"ast":null,"code":"var _jsxFileName = \"/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/contexts/UserContext.js\";\nimport React, { useState, useReducer, createContext, useEffect } from 'react';\nimport userService from '../services/userService';\nimport creatureService from '../services/creatureService';\nimport userReducer from '../reducers/userReducer';\nexport const UserContext = createContext();\n\nconst UserContextProvider = props => {\n  const [user, userDispatch] = useReducer(userReducer, {}, () => {\n    const storedUser = localStorage.getItem('my-user');\n    return storedUser ? JSON.parse(storedUser) : {};\n  });\n  const [error, setError] = useState({\n    error: null\n  });\n  const [passwordReset, setPasswordReset] = useState(false);\n  useEffect(() => {\n    localStorage.setItem('my-user', JSON.stringify(user));\n    console.log('user', user);\n    console.log(user.accessToken);\n  }, [user]); // POST new user\n\n  const addUser = async userObject => {\n    userService.createUser(userObject).then(res => {\n      if (res === false) {\n        setError({ ...error,\n          error: true\n        });\n      } else {\n        setError({ ...error,\n          error: null\n        });\n      }\n    }).catch(err => console.error(err));\n  }; // GET localStorage creatures\n\n\n  const getLocalCreatures = () => {\n    const creatureStorage = localStorage.getItem('my-creatures');\n    return creatureStorage ? JSON.parse(creatureStorage) : [];\n  }; // POST localStorage creatures\n\n\n  const postLocalCreatures = async (userId, creatures, token) => {\n    await userService.storeLocalCreatures(userId, creatures, token).then(res => res).catch(err => console.error(err));\n    userDispatch({\n      type: 'POST_LOCAL_CREATURES',\n      creatures: {\n        creatures\n      }\n    });\n  };\n\n  const refreshUser = () => {\n    console.log('Refreshing!');\n    userService.readUser(user.db_id, user.accessToken).then(res => {\n      console.log(res);\n      userDispatch({\n        type: 'REFRESH_USER',\n        user: {\n          username: res.user.username,\n          email: res.user.email,\n          password: res.user.password,\n          db_id: user.db_id,\n          accessToken: user.accessToken,\n          creatures: res.user_creatures\n        }\n      });\n      return res;\n    }).catch(err => console.error(err));\n  };\n\n  const updateUser = method => {\n    console.log('Updating user...');\n    userService.updateUser(method, user.db_id, user, user.accessToken).then(res => res).catch(err => console.error(err));\n  }; // GET user info\n\n\n  const getUserInfo = async (res, password) => {\n    console.log('Successfully logged in', res.db_id, res.accessToken);\n    const storedCreatures = await getLocalCreatures();\n    console.log(storedCreatures);\n\n    if (storedCreatures.length >= 1) {\n      postLocalCreatures(res.db_id, storedCreatures, res.accessToken);\n      console.log('Retrieved localStorage creatures');\n      localStorage.removeItem('my-creatures');\n      console.log('Cleared \\'my-creatures\\' from localStorage');\n    }\n\n    await userService.readUser(res.db_id, res.accessToken).then(response => {\n      console.log(response);\n      userDispatch({\n        type: 'LOG_IN',\n        user: {\n          username: response.user.username,\n          email: response.user.email,\n          password,\n          db_password: response.user.password,\n          db_id: res.db_id,\n          accessToken: res.accessToken,\n          creatures: storedCreatures.length >= 1 ? storedCreatures : response.user_creatures,\n          newDay: response.new_day,\n          newTime: response.new_time\n        }\n      });\n      console.log('Successfully retrieved user data');\n    }).catch(err => console.error(err));\n  }; // POST user login\n\n\n  const login = async userObject => {\n    const {\n      username,\n      password\n    } = userObject;\n    localStorage.removeItem('my-user');\n    await userService.login({\n      username,\n      password\n    }).then(res => {\n      return getUserInfo(res, password);\n    }).catch(err => {\n      console.error(err);\n    });\n  }; // DELETE user\n\n\n  const removeUser = () => {\n    console.log('Deleting user...');\n    localStorage.removeItem('my-user');\n    userService.deleteUser(user.db_id, user, user.accessToken).then(res => res).catch(err => console.error(err));\n    console.log('Successfully deleted user');\n  }; // LOG OUT\n\n\n  const logout = () => {\n    userDispatch({\n      type: 'LOG_OUT'\n    });\n    localStorage.removeItem('my-user');\n  };\n\n  return /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: {\n      user,\n      userDispatch,\n      refreshUser,\n      updateUser,\n      error,\n      setError,\n      passwordReset,\n      addUser,\n      login,\n      postLocalCreatures,\n      removeUser,\n      logout\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default UserContextProvider;","map":{"version":3,"sources":["/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/contexts/UserContext.js"],"names":["React","useState","useReducer","createContext","useEffect","userService","creatureService","userReducer","UserContext","UserContextProvider","props","user","userDispatch","storedUser","localStorage","getItem","JSON","parse","error","setError","passwordReset","setPasswordReset","setItem","stringify","console","log","accessToken","addUser","userObject","createUser","then","res","catch","err","getLocalCreatures","creatureStorage","postLocalCreatures","userId","creatures","token","storeLocalCreatures","type","refreshUser","readUser","db_id","username","email","password","user_creatures","updateUser","method","getUserInfo","storedCreatures","length","removeItem","response","db_password","newDay","new_day","newTime","new_time","login","removeUser","deleteUser","logout","children"],"mappings":"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","sourcesContent":["import React, { useState, useReducer, createContext, useEffect } from 'react';\nimport userService from '../services/userService';\nimport creatureService from '../services/creatureService';\nimport userReducer from '../reducers/userReducer';\n\nexport const UserContext = createContext();\n\nconst UserContextProvider = (props) => {\n  const [user, userDispatch] = useReducer(userReducer, {}, () => {\n    const storedUser = localStorage.getItem('my-user');\n    return storedUser ? JSON.parse(storedUser) : {};\n  });\n\n  const [error, setError] = useState({ error: null });\n\n  const [passwordReset, setPasswordReset] = useState(false);\n\n  useEffect(() => {\n    localStorage.setItem('my-user', JSON.stringify(user));\n\n    console.log('user', user);\n    console.log(user.accessToken);\n  }, [user]);\n\n  // POST new user\n  const addUser = async (userObject) => {\n\n    userService.createUser(userObject)\n      .then(res => {\n        if (res === false) {\n          setError({\n            ...error,\n            error: true\n          });\n        } else {\n          setError({\n            ...error,\n            error: null\n          });\n        }\n      })\n      .catch(err => console.error(err));\n  }\n\n  // GET localStorage creatures\n  const getLocalCreatures = () => {\n    const creatureStorage = localStorage.getItem('my-creatures');\n    \n    return creatureStorage ? JSON.parse(creatureStorage) : [];\n  }\n\n  // POST localStorage creatures\n  const postLocalCreatures = async (userId, creatures, token) => {\n    await userService\n      .storeLocalCreatures(userId, creatures, token)\n      .then(res => res)\n      .catch(err => console.error(err));\n\n    userDispatch({ type: 'POST_LOCAL_CREATURES', creatures: { creatures }});\n  }\n\n  const refreshUser = () => {\n    console.log('Refreshing!');\n\n    userService.readUser(user.db_id, user.accessToken)\n      .then(res => {\n        console.log(res);\n\n        userDispatch({ type: 'REFRESH_USER', user: {\n          username: res.user.username,\n          email: res.user.email,\n          password: res.user.password,\n          db_id: user.db_id,\n          accessToken: user.accessToken,\n          creatures: res.user_creatures\n        }});\n\n        return res;\n      })\n      .catch(err => console.error(err));\n  }\n\n  const updateUser = (method) => {\n    console.log('Updating user...');\n\n    userService.updateUser(method, user.db_id, user, user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n  }\n\n  // GET user info\n  const getUserInfo = async (res, password) => {\n    console.log('Successfully logged in', res.db_id, res.accessToken);\n\n    const storedCreatures = await getLocalCreatures();\n\n    console.log(storedCreatures);\n\n    if (storedCreatures.length >= 1) {\n      postLocalCreatures(res.db_id, storedCreatures, res.accessToken);\n      console.log('Retrieved localStorage creatures');\n\n      localStorage.removeItem('my-creatures');\n      console.log('Cleared \\'my-creatures\\' from localStorage');\n    }\n\n    await userService.readUser(res.db_id, res.accessToken)\n      .then(response => {\n        console.log(response);\n\n        userDispatch({ type: 'LOG_IN', user: {\n          username: response.user.username,\n          email: response.user.email,\n          password,\n          db_password: response.user.password,\n          db_id: res.db_id,\n          accessToken: res.accessToken,\n          creatures: storedCreatures.length >= 1 ? storedCreatures : response.user_creatures,\n          newDay: response.new_day,\n          newTime: response.new_time,\n        }});\n\n        console.log('Successfully retrieved user data');\n      })\n      .catch(err => console.error(err));\n  }\n\n  // POST user login\n  const login = async (userObject) => {\n    const { username, password } = userObject;\n\n    localStorage.removeItem('my-user');\n\n    await userService.login({ \n      username, \n      password \n    })\n      .then(res => { \n        return getUserInfo(res, password); \n      })\n      .catch(err => {\n        console.error(err);\n      });\n  }\n\n  // DELETE user\n  const removeUser = () => {\n    console.log('Deleting user...');\n    \n    localStorage.removeItem('my-user');\n\n    userService.deleteUser(user.db_id, user, user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n\n    console.log('Successfully deleted user');\n  }\n\n  // LOG OUT\n  const logout = () => {\n    userDispatch({ type: 'LOG_OUT' });\n    localStorage.removeItem('my-user');\n  }\n\n  return (\n    <UserContext.Provider value={{\n      user,\n      userDispatch,\n      refreshUser,\n      updateUser,\n      error,\n      setError,\n      passwordReset,\n      addUser,\n      login,\n      postLocalCreatures,\n      removeUser,\n      logout,\n    }}>\n      {props.children}\n    </UserContext.Provider>\n  )\n}\n\nexport default UserContextProvider;\n"]},"metadata":{},"sourceType":"module"}