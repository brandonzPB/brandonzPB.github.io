{"ast":null,"code":"var _jsxFileName = \"/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/components/creature/Creature.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport { CreatureContext } from '../../contexts/CreatureContext';\nimport { UserContext } from '../../contexts/UserContext';\nimport * as stats from '../../modules/stats';\nimport CreatureDisplay from './CreatureDisplay';\nimport './creature.css';\nimport * as age from '../../modules/age';\n\nconst lvlUpMusicSrc = require('../../sounds/level-up.mp3');\n\nconst levelUpSound = new Audio(lvlUpMusicSrc);\n\nconst evolveMusicSrc = require('../../sounds/evolve.mp3');\n\nconst evolveSound = new Audio(evolveMusicSrc);\n\nconst Creature = ({\n  creature\n}) => {\n  const {\n    displayObjectives,\n    showCreatureObjectives,\n    expUpdate,\n    toggleExpUpdate,\n    finish\n  } = useContext(CreatureContext);\n  const {\n    user,\n    userDispatch\n  } = useContext(UserContext);\n  const [levelUpdate, setLevelUpdate] = useState(false);\n  const [evolve, setEvolve] = useState(false);\n  const pokeball = !creature.pokeball_number ? 13 : creature.pokeball_number < 14 ? 13 // pokeball\n  : creature.pokeball_number === 14 ? 1 // greatball\n  : creature.pokeball_number === 15 ? 0 : 11; // ultraball : masterball\n\n  const img = require(`../../images/pokeballs/${pokeball}.png`);\n\n  const toggleLevelUpdate = () => {\n    setLevelUpdate(!levelUpdate);\n  };\n\n  const toggleEvolve = () => {\n    setEvolve(!evolve);\n  }; /// STREAK METHODS ///\n\n\n  const checkCreatureStreak = () => {\n    // checks if streak is broken ('broken', 'constant', or 'increment')\n    const streakTimestamp = creature.streak_timestamp;\n    const streakDay = creature.streak_day;\n    const thisDay = new Date().getDay();\n\n    if (streakDay === 6) {\n      // Streak continues if current week day is 0 and less than 24 hours passed\n      if (thisDay !== 0 && thisDay !== 6) {\n        // Streak broken\n        return 'broken';\n      } else if (thisDay === 0) {\n        // Next week day\n        // if more than 2 days passed; streak is over\n        // else, increment streak count\n        const minDifference = age.getAge(streakTimestamp, false);\n        return minDifference > 2880 ? 'broken' : 'increment';\n      } else {\n        // Same day\n        return 'constant';\n      }\n    } else {\n      // Streak continues if current week day is streak.timestamp + 1, and if less than 24 hours passed\n      if (thisDay === streakDay + 1) {\n        // if more than 2 days passed; streak is over\n        // else, increment streak count\n        const minDifference = age.getAge(streakTimestamp, false);\n        return minDifference > 2880 ? 'broken' : 'increment';\n      } else if (streakDay === thisDay) {\n        // Same day\n        return 'constant';\n      } else {\n        return 'broken';\n      }\n    }\n  };\n\n  const updateCreatureStreak = () => {\n    const newCount = creature.streak_count + 1;\n    const newTimestamp = Date.now();\n    const newDay = new Date().getDay();\n    userDispatch({\n      type: 'UPDATE_STREAK',\n      creature: {\n        id: creature.id,\n        newCount,\n        newTimestamp,\n        newDay\n      }\n    });\n    return creature;\n  };\n\n  const resetCreatureStreak = () => {\n    const newCount = 0;\n    const newTimestamp = Date.now();\n    const newDay = new Date().getDay();\n    userDispatch({\n      type: 'UPDATE_STREAK',\n      creature: {\n        id: creature.id,\n        newCount,\n        newTimestamp,\n        newDay\n      }\n    });\n    return creature;\n  }; /// AUTO-UPDATE HOOKS ///\n  // Updates age, streak, exp, and level\n\n\n  useEffect(() => {\n    const birthTime = creature.birth_time;\n    const newAge = age.getAge(birthTime);\n    userDispatch({\n      type: 'UPDATE_AGE',\n      creature: {\n        newAge,\n        id: creature.id\n      }\n    });\n    /* const streak = checkCreatureStreak();\n    if (streak === 'broken') resetCreatureStreak(); */\n\n    if (!expUpdate) return; // if (streak === 'increment' || creature.streak_count === 0) updateCreatureStreak();\n\n    if (creature.exp >= creature.exp_goal || creature.is_noob) {\n      levelUpSound.currentTime = 1;\n      levelUpSound.play();\n      const newLevel = creature.level + 1;\n      userDispatch({\n        type: 'LEVEL_UP',\n        creature: {\n          id: creature.id,\n          level: newLevel\n        }\n      });\n      return; // toggleLevelUpdate();\n    }\n\n    toggleExpUpdate();\n  }, [creature.exp]);\n  /* // Updates creature multipliers\n  useEffect(() => {\n    if (!levelUpdate) return;\n     const timer = setTimeout(() => {\n      const difficulty = stats.getCreatureDifficulty(creature.purpose, creature.level);\n      const multiplier = stats.getExpMultiplier(creature.level);\n       userDispatch({ type: 'UPGRADE_MULTIPLIERS', creature: { id: creature.id, difficulty, multiplier }});\n       const prevGoal = (creature.is_noob) ? 1 : creature.exp_goal;\n      const newGoal = (creature.is_noob) ? 9 : stats.getExpGoal(creature.level, difficulty);\n       userDispatch({ type: 'LEVEL_UPDATES', creature: {\n        id: creature.id,\n        prevGoal,\n        newGoal,\n      }});\n       toggleExpUpdate();\n      toggleLevelUpdate();\n       if (creature.level === 15 || creature.level === 30 || creature.level === 50 || creature.level == 80) {\n        const newPokeball = (creature.level === 30) ? 14\n          : (creature.level === 50) ? 15 \n          : (creature.level === 80) ? 16 \n          : creature.pokeball_number;\n         userDispatch({ type: 'UPDATE_POKEBALL', creature: {\n          id: creature.id,\n          newPokeball\n        }});\n         return toggleEvolve();\n      }\n    }, 100);\n     return () => clearTimeout(timer);\n  }, [levelUpdate]); */\n\n  /* // Evolves creature\n  useEffect(() => {\n    if (!evolve) return;\n    \n    const nextCreatureIndex = creature.evolutions.findIndex(being => being === creature.creature) + 1;\n    if (!creature.evolutions[nextCreatureIndex]) return toggleEvolve();\n     if (creature.evolutions[nextCreatureIndex] === 'none') {\n      let newEvoLine = creature.evolutions;\n        newEvoLine.splice(nextCreatureIndex, 1);\n      console.log('newEvoLine', newEvoLine);\n       return toggleEvolve();\n    }\n     setTimeout(() => {\n      evolveSound.play();\n       const nextCreature = creature.evolutions[nextCreatureIndex];\n       userDispatch({\n        type: 'EVOLVE',\n        creature: {\n          id: creature.id,\n          nextCreature\n        }\n      });\n       return toggleEvolve();\n    }, 800);\n  }, [evolve]); */\n  // Sends creature id to context and allows for\n  // The selected creature's objectives to be shown\n\n  const displayCreatureObjectives = () => {\n    showCreatureObjectives(creature.id);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"creature\",\n    style: {\n      backgroundImage: `linear-gradient(rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0.6)), url(${img})`,\n      backgroundRepeat: 'no-repeat',\n      backgroundSize: 'cover',\n      backgroundPosition: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CreatureDisplay, {\n    creature: creature,\n    displayObjectives: displayObjectives,\n    displayCreatureObjectives: displayCreatureObjectives,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Creature;","map":{"version":3,"sources":["/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/components/creature/Creature.js"],"names":["React","useState","useEffect","useContext","CreatureContext","UserContext","stats","CreatureDisplay","age","lvlUpMusicSrc","require","levelUpSound","Audio","evolveMusicSrc","evolveSound","Creature","creature","displayObjectives","showCreatureObjectives","expUpdate","toggleExpUpdate","finish","user","userDispatch","levelUpdate","setLevelUpdate","evolve","setEvolve","pokeball","pokeball_number","img","toggleLevelUpdate","toggleEvolve","checkCreatureStreak","streakTimestamp","streak_timestamp","streakDay","streak_day","thisDay","Date","getDay","minDifference","getAge","updateCreatureStreak","newCount","streak_count","newTimestamp","now","newDay","type","id","resetCreatureStreak","birthTime","birth_time","newAge","exp","exp_goal","is_noob","currentTime","play","newLevel","level","displayCreatureObjectives","backgroundImage","backgroundRepeat","backgroundSize","backgroundPosition"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { CreatureContext } from '../../contexts/CreatureContext';\nimport { UserContext } from '../../contexts/UserContext';\nimport * as stats from '../../modules/stats';\nimport CreatureDisplay from './CreatureDisplay';\nimport './creature.css';\nimport * as age from '../../modules/age';\n\nconst lvlUpMusicSrc = require('../../sounds/level-up.mp3');\nconst levelUpSound = new Audio(lvlUpMusicSrc);\n\nconst evolveMusicSrc = require('../../sounds/evolve.mp3');\nconst evolveSound = new Audio(evolveMusicSrc);\n\nconst Creature = ({ creature }) => {\n  const { displayObjectives, showCreatureObjectives, expUpdate, toggleExpUpdate, finish } = useContext(CreatureContext);\n  const { user, userDispatch } = useContext(UserContext);\n\n  const [levelUpdate, setLevelUpdate] = useState(false);\n  const [evolve, setEvolve] = useState(false);\n\n  const pokeball = (!creature.pokeball_number) ? 13\n    : (creature.pokeball_number < 14) ? 13 // pokeball\n    : (creature.pokeball_number === 14) ? 1 // greatball\n    : (creature.pokeball_number === 15) ? 0 : 11; // ultraball : masterball\n\n  const img = require(`../../images/pokeballs/${pokeball}.png`);\n\n  const toggleLevelUpdate = () => {\n    setLevelUpdate(!levelUpdate);\n  }\n\n  const toggleEvolve = () => {\n    setEvolve(!evolve);\n  }\n\n  /// STREAK METHODS ///\n\n  const checkCreatureStreak = () => {\n    // checks if streak is broken ('broken', 'constant', or 'increment')\n\n    const streakTimestamp = creature.streak_timestamp;\n    const streakDay = creature.streak_day;\n    const thisDay = (new Date()).getDay();\n\n    if (streakDay === 6) { // Streak continues if current week day is 0 and less than 24 hours passed\n\n      if (thisDay !== 0 && thisDay !== 6) { // Streak broken\n        return 'broken';\n      } else if (thisDay === 0) { // Next week day\n        // if more than 2 days passed; streak is over\n        // else, increment streak count\n\n        const minDifference = age.getAge(streakTimestamp, false);\n        return minDifference > 2880 ? 'broken' : 'increment';\n      } else { // Same day\n\n        return 'constant';\n      }\n\n    } else { // Streak continues if current week day is streak.timestamp + 1, and if less than 24 hours passed\n      \n      if (thisDay === streakDay + 1) {\n        // if more than 2 days passed; streak is over\n        // else, increment streak count\n\n        const minDifference = age.getAge(streakTimestamp, false);\n        return minDifference > 2880 ? 'broken' : 'increment';\n      } else if (streakDay === thisDay) { // Same day\n\n        return 'constant';\n      } else {\n        return 'broken';\n      }\n    }\n  }\n\n  const updateCreatureStreak = () => {\n    const newCount = creature.streak_count + 1;\n    const newTimestamp = Date.now();\n    const newDay = (new Date()).getDay();\n\n    userDispatch({ type: 'UPDATE_STREAK', creature: {\n      id: creature.id,\n      newCount,\n      newTimestamp,\n      newDay,\n    }});\n\n    return creature;\n  }\n\n  const resetCreatureStreak = () => {\n    const newCount = 0;\n    const newTimestamp = Date.now();\n    const newDay = (new Date()).getDay();\n\n    userDispatch({ type: 'UPDATE_STREAK', creature: {\n      id: creature.id,\n      newCount,\n      newTimestamp,\n      newDay,\n    }});\n    \n    return creature;\n  }\n\n  /// AUTO-UPDATE HOOKS ///\n\n  // Updates age, streak, exp, and level\n  useEffect(() => { \n    const birthTime = creature.birth_time;\n    const newAge = age.getAge(birthTime);\n\n    userDispatch({ type: 'UPDATE_AGE', creature: { newAge, id: creature.id } });\n\n    /* const streak = checkCreatureStreak();\n    if (streak === 'broken') resetCreatureStreak(); */\n\n    if (!expUpdate) return;\n    \n    // if (streak === 'increment' || creature.streak_count === 0) updateCreatureStreak();\n\n    if (creature.exp >= creature.exp_goal || creature.is_noob) {\n      levelUpSound.currentTime = 1;\n        levelUpSound.play();\n        \n      const newLevel = creature.level + 1;\n\n      userDispatch({ type: 'LEVEL_UP', creature: { id: creature.id, level: newLevel }});\n\n      return // toggleLevelUpdate();\n    }\n\n    toggleExpUpdate();\n  }, [creature.exp]);\n\n  /* // Updates creature multipliers\n  useEffect(() => {\n    if (!levelUpdate) return;\n\n    const timer = setTimeout(() => {\n      const difficulty = stats.getCreatureDifficulty(creature.purpose, creature.level);\n      const multiplier = stats.getExpMultiplier(creature.level);\n\n      userDispatch({ type: 'UPGRADE_MULTIPLIERS', creature: { id: creature.id, difficulty, multiplier }});\n\n      const prevGoal = (creature.is_noob) ? 1 : creature.exp_goal;\n      const newGoal = (creature.is_noob) ? 9 : stats.getExpGoal(creature.level, difficulty);\n\n      userDispatch({ type: 'LEVEL_UPDATES', creature: {\n        id: creature.id,\n        prevGoal,\n        newGoal,\n      }});\n\n      toggleExpUpdate();\n      toggleLevelUpdate();\n\n      if (creature.level === 15 || creature.level === 30 || creature.level === 50 || creature.level == 80) {\n        const newPokeball = (creature.level === 30) ? 14\n          : (creature.level === 50) ? 15 \n          : (creature.level === 80) ? 16 \n          : creature.pokeball_number;\n\n        userDispatch({ type: 'UPDATE_POKEBALL', creature: {\n          id: creature.id,\n          newPokeball\n        }});\n\n        return toggleEvolve();\n      }\n    }, 100);\n\n    return () => clearTimeout(timer);\n  }, [levelUpdate]); */\n\n  /* // Evolves creature\n  useEffect(() => {\n    if (!evolve) return;\n    \n    const nextCreatureIndex = creature.evolutions.findIndex(being => being === creature.creature) + 1;\n    if (!creature.evolutions[nextCreatureIndex]) return toggleEvolve();\n\n    if (creature.evolutions[nextCreatureIndex] === 'none') {\n      let newEvoLine = creature.evolutions;\n        newEvoLine.splice(nextCreatureIndex, 1);\n      console.log('newEvoLine', newEvoLine);\n\n      return toggleEvolve();\n    }\n\n    setTimeout(() => {\n      evolveSound.play();\n\n      const nextCreature = creature.evolutions[nextCreatureIndex];\n\n      userDispatch({\n        type: 'EVOLVE',\n        creature: {\n          id: creature.id,\n          nextCreature\n        }\n      });\n\n      return toggleEvolve();\n    }, 800);\n  }, [evolve]); */\n\n  // Sends creature id to context and allows for\n  // The selected creature's objectives to be shown\n  const displayCreatureObjectives = () => {\n    showCreatureObjectives(creature.id);\n  }\n\n  return (\n    <div className=\"creature\" style={{\n      backgroundImage: `linear-gradient(rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0.6)), url(${img})`,\n      backgroundRepeat: 'no-repeat',\n      backgroundSize: 'cover',\n      backgroundPosition: 'center',\n    }}>\n      <CreatureDisplay \n        creature={creature}\n        displayObjectives={displayObjectives}\n        displayCreatureObjectives={displayCreatureObjectives}\n      />\n    </div>\n  )\n}\n\nexport default Creature;\n"]},"metadata":{},"sourceType":"module"}