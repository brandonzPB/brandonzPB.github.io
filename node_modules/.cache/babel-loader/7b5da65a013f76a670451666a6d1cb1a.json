{"ast":null,"code":"import axios from 'axios';\nconst baseUrl = '/dashboard/user'; // CREATE user\n\nconst createUser = userObject => {\n  const req = axios.post(`${baseUrl}/create`, userObject);\n  return req.then(res => res.data).catch(err => console.error(err));\n}; // LOGIN\n\n\nconst login = (type, credentials) => {\n  let reqUser = {\n    password: credentials.password\n  };\n  type === 'username' ? reqUser.username = credentials.username : reqUser.email = credentials.email;\n  const req = axios.post(`${baseUrl}/login`, reqUser);\n  return req.then(res => {\n    console.log('res', res.data);\n    return res.data;\n  }).catch(err => console.error(err));\n}; // POST reset request\n\n\nconst postResetRequest = email => {\n  const reqUser = {\n    email\n  };\n  const req = axios.post(`${baseUrl}/reset`, reqUser);\n  return req.then(res => {\n    console.log('res', res.data);\n    return res.data;\n  }).catch(err => console.error(err));\n}; // GET reset code (POST email)\n\n\nconst getResetCode = email => {\n  const reqUser = {\n    email\n  };\n  const req = axios.post(`${baseUrl}/reset_code_email`, reqUser);\n  return req.then(res => res.data).catch(err => console.error(err));\n}; // POST reset code\n\n\nconst postResetCode = (code, token) => {\n  const reqUser = {\n    reset_code: code\n  };\n  const req = axios.post(`${baseUrl}/reset_code`, reqUser, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => res.data).catch(err => console.error(err));\n}; // PUT password resest\n\n\nconst putPasswordReset = (userObject, token) => {\n  const req = axios.put(`${baseUrl}/reset_password`, userObject, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => {\n    console.log('res.data', res.data);\n    return res.data;\n  }).catch(err => console.error(err));\n}; // GET all users\n\n\nconst getAll = token => {\n  const req = axios.get('/dashboard/users', {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => res.data).catch(err => console.error(err));\n}; // READ user\n\n\nconst readUser = (userId, token) => {\n  const req = axios.get(`${baseUrl}/${userId}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => {\n    console.log(res.data);\n    return res.data;\n  }).catch(err => console.error(err));\n}; // GET USERNAMES\n\n\nconst checkUsername = (type, input, userObject, token) => {\n  // returns if request is available\n  let thisUser;\n  type === 'username' ? thisUser = { ...userObject,\n    username: input,\n    type: 'username'\n  } : thisUser = { ...userObject,\n    email: input,\n    type: 'email'\n  };\n  const req = axios.post(`${baseUrl}/usernames`, thisUser, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => {\n    console.log('res', res.data);\n    return res.data;\n  }).catch(err => console.error(err));\n}; // POST localStorage creatures\n\n\nconst storeLocalCreatures = (userId, creatures, token) => {\n  const req = axios.post(`${baseUrl}/${userId}`, creatures, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => res.data).catch(err => console.error(err));\n}; // UPDATE user\n\n\nconst updateUser = (type = 'none', userId, userObject, token) => {\n  const thisUser = { ...userObject,\n    type\n  };\n  const req = axios.put(`${baseUrl}/${userId}/update`, thisUser, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => res.data).catch(err => console.error(err));\n}; // DELETE user\n\n\nconst deleteUser = (userId, token) => {\n  const req = axios.delete(`${baseUrl}/${userId}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => res.data).catch(err => console.error(err));\n};\n\nexport default {\n  getAll,\n  createUser,\n  login,\n  postResetRequest,\n  getResetCode,\n  postResetCode,\n  putPasswordReset,\n  readUser,\n  checkUsername,\n  storeLocalCreatures,\n  updateUser,\n  deleteUser\n};","map":{"version":3,"sources":["/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/services/userService.js"],"names":["axios","baseUrl","createUser","userObject","req","post","then","res","data","catch","err","console","error","login","type","credentials","reqUser","password","username","email","log","postResetRequest","getResetCode","postResetCode","code","token","reset_code","headers","putPasswordReset","put","getAll","get","readUser","userId","checkUsername","input","thisUser","storeLocalCreatures","creatures","updateUser","deleteUser","delete"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,MAAMC,OAAO,GAAG,iBAAhB,C,CAEA;;AACA,MAAMC,UAAU,GAAIC,UAAD,IAAgB;AACjC,QAAMC,GAAG,GAAGJ,KAAK,CAACK,IAAN,CAAY,GAAEJ,OAAQ,SAAtB,EAAgCE,UAAhC,CAAZ;AACA,SAAOC,GAAG,CAACE,IAAJ,CAASC,GAAG,IAAIA,GAAG,CAACC,IAApB,EACJC,KADI,CACEC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CADT,CAAP;AAED,CAJD,C,CAMA;;;AACA,MAAMG,KAAK,GAAG,CAACC,IAAD,EAAOC,WAAP,KAAuB;AACnC,MAAIC,OAAO,GAAG;AAAEC,IAAAA,QAAQ,EAAEF,WAAW,CAACE;AAAxB,GAAd;AAEAH,EAAAA,IAAI,KAAK,UAAT,GACIE,OAAO,CAACE,QAAR,GAAmBH,WAAW,CAACG,QADnC,GAEIF,OAAO,CAACG,KAAR,GAAgBJ,WAAW,CAACI,KAFhC;AAIA,QAAMf,GAAG,GAAGJ,KAAK,CAACK,IAAN,CAAY,GAAEJ,OAAQ,QAAtB,EAA+Be,OAA/B,CAAZ;AAEA,SAAOZ,GAAG,CAACE,IAAJ,CAASC,GAAG,IAAI;AACrBI,IAAAA,OAAO,CAACS,GAAR,CAAY,KAAZ,EAAmBb,GAAG,CAACC,IAAvB;AAEA,WAAOD,GAAG,CAACC,IAAX;AACD,GAJM,EAKJC,KALI,CAKEC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CALT,CAAP;AAMD,CAfD,C,CAiBA;;;AACA,MAAMW,gBAAgB,GAAIF,KAAD,IAAW;AAClC,QAAMH,OAAO,GAAG;AAAEG,IAAAA;AAAF,GAAhB;AAEA,QAAMf,GAAG,GAAGJ,KAAK,CAACK,IAAN,CAAY,GAAEJ,OAAQ,QAAtB,EAA+Be,OAA/B,CAAZ;AAEA,SAAOZ,GAAG,CAACE,IAAJ,CAASC,GAAG,IAAI;AACrBI,IAAAA,OAAO,CAACS,GAAR,CAAY,KAAZ,EAAmBb,GAAG,CAACC,IAAvB;AAEA,WAAOD,GAAG,CAACC,IAAX;AACD,GAJM,EAKJC,KALI,CAKEC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CALT,CAAP;AAMD,CAXD,C,CAaA;;;AACA,MAAMY,YAAY,GAAIH,KAAD,IAAW;AAC9B,QAAMH,OAAO,GAAG;AAAEG,IAAAA;AAAF,GAAhB;AAEA,QAAMf,GAAG,GAAGJ,KAAK,CAACK,IAAN,CAAY,GAAEJ,OAAQ,mBAAtB,EAA0Ce,OAA1C,CAAZ;AAEA,SAAOZ,GAAG,CAACE,IAAJ,CAASC,GAAG,IAAIA,GAAG,CAACC,IAApB,EACJC,KADI,CACEC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CADT,CAAP;AAED,CAPD,C,CASA;;;AACA,MAAMa,aAAa,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACrC,QAAMT,OAAO,GAAG;AAAEU,IAAAA,UAAU,EAAEF;AAAd,GAAhB;AAEA,QAAMpB,GAAG,GAAGJ,KAAK,CAACK,IAAN,CAAY,GAAEJ,OAAQ,aAAtB,EAAoCe,OAApC,EAA6C;AACvDW,IAAAA,OAAO,EAAE;AACP,uBAAkB,UAASF,KAAM;AAD1B;AAD8C,GAA7C,CAAZ;AAMA,SAAOrB,GAAG,CAACE,IAAJ,CAASC,GAAG,IAAIA,GAAG,CAACC,IAApB,EACJC,KADI,CACEC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CADT,CAAP;AAED,CAXD,C,CAaA;;;AACA,MAAMkB,gBAAgB,GAAG,CAACzB,UAAD,EAAasB,KAAb,KAAuB;AAC9C,QAAMrB,GAAG,GAAGJ,KAAK,CAAC6B,GAAN,CAAW,GAAE5B,OAAQ,iBAArB,EAAuCE,UAAvC,EAAmD;AAC7DwB,IAAAA,OAAO,EAAE;AACP,uBAAkB,UAASF,KAAM;AAD1B;AADoD,GAAnD,CAAZ;AAMA,SAAOrB,GAAG,CAACE,IAAJ,CAASC,GAAG,IAAI;AACrBI,IAAAA,OAAO,CAACS,GAAR,CAAY,UAAZ,EAAwBb,GAAG,CAACC,IAA5B;AACA,WAAOD,GAAG,CAACC,IAAX;AACD,GAHM,EAIJC,KAJI,CAIEC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CAJT,CAAP;AAKD,CAZD,C,CAcA;;;AACA,MAAMoB,MAAM,GAAIL,KAAD,IAAW;AACxB,QAAMrB,GAAG,GAAGJ,KAAK,CAAC+B,GAAN,CAAU,kBAAV,EAA8B;AACxCJ,IAAAA,OAAO,EAAE;AACP,uBAAkB,UAASF,KAAM;AAD1B;AAD+B,GAA9B,CAAZ;AAMA,SAAOrB,GAAG,CAACE,IAAJ,CAASC,GAAG,IAAIA,GAAG,CAACC,IAApB,EACJC,KADI,CACEC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CADT,CAAP;AAED,CATD,C,CAWA;;;AACA,MAAMsB,QAAQ,GAAG,CAACC,MAAD,EAASR,KAAT,KAAmB;AAClC,QAAMrB,GAAG,GAAGJ,KAAK,CAAC+B,GAAN,CAAW,GAAE9B,OAAQ,IAAGgC,MAAO,EAA/B,EAAkC;AAC5CN,IAAAA,OAAO,EAAE;AACP,uBAAkB,UAASF,KAAM;AAD1B;AADmC,GAAlC,CAAZ;AAMA,SAAOrB,GAAG,CAACE,IAAJ,CAASC,GAAG,IAAI;AACrBI,IAAAA,OAAO,CAACS,GAAR,CAAYb,GAAG,CAACC,IAAhB;AAEA,WAAOD,GAAG,CAACC,IAAX;AACD,GAJM,EAKJC,KALI,CAKEC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CALT,CAAP;AAMD,CAbD,C,CAeA;;;AACA,MAAMwB,aAAa,GAAG,CAACpB,IAAD,EAAOqB,KAAP,EAAchC,UAAd,EAA0BsB,KAA1B,KAAoC;AACxD;AACA,MAAIW,QAAJ;AAEAtB,EAAAA,IAAI,KAAK,UAAT,GACIsB,QAAQ,GAAG,EACX,GAAGjC,UADQ;AAEXe,IAAAA,QAAQ,EAAEiB,KAFC;AAGXrB,IAAAA,IAAI,EAAE;AAHK,GADf,GAMIsB,QAAQ,GAAG,EACX,GAAGjC,UADQ;AAEXgB,IAAAA,KAAK,EAAEgB,KAFI;AAGXrB,IAAAA,IAAI,EAAE;AAHK,GANf;AAYA,QAAMV,GAAG,GAAGJ,KAAK,CAACK,IAAN,CAAY,GAAEJ,OAAQ,YAAtB,EAAmCmC,QAAnC,EAA6C;AACvDT,IAAAA,OAAO,EAAE;AACP,uBAAkB,UAASF,KAAM;AAD1B;AAD8C,GAA7C,CAAZ;AAMA,SAAOrB,GAAG,CAACE,IAAJ,CAASC,GAAG,IAAI;AACrBI,IAAAA,OAAO,CAACS,GAAR,CAAY,KAAZ,EAAmBb,GAAG,CAACC,IAAvB;AACA,WAAOD,GAAG,CAACC,IAAX;AACD,GAHM,EAIJC,KAJI,CAIEC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CAJT,CAAP;AAKD,CA3BD,C,CA6BA;;;AACA,MAAM2B,mBAAmB,GAAG,CAACJ,MAAD,EAASK,SAAT,EAAoBb,KAApB,KAA8B;AACxD,QAAMrB,GAAG,GAAGJ,KAAK,CAACK,IAAN,CAAY,GAAEJ,OAAQ,IAAGgC,MAAO,EAAhC,EAAmCK,SAAnC,EAA8C;AACxDX,IAAAA,OAAO,EAAE;AACP,uBAAkB,UAASF,KAAM;AAD1B;AAD+C,GAA9C,CAAZ;AAMA,SAAOrB,GAAG,CAACE,IAAJ,CAASC,GAAG,IAAIA,GAAG,CAACC,IAApB,EACJC,KADI,CACEC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CADT,CAAP;AAED,CATD,C,CAWA;;;AACA,MAAM6B,UAAU,GAAG,CAACzB,IAAI,GAAG,MAAR,EAAgBmB,MAAhB,EAAwB9B,UAAxB,EAAoCsB,KAApC,KAA8C;AAC/D,QAAMW,QAAQ,GAAG,EACf,GAAGjC,UADY;AAEfW,IAAAA;AAFe,GAAjB;AAKA,QAAMV,GAAG,GAAGJ,KAAK,CAAC6B,GAAN,CAAW,GAAE5B,OAAQ,IAAGgC,MAAO,SAA/B,EAAyCG,QAAzC,EAAmD;AAC7DT,IAAAA,OAAO,EAAE;AACP,uBAAkB,UAASF,KAAM;AAD1B;AADoD,GAAnD,CAAZ;AAMA,SAAOrB,GAAG,CAACE,IAAJ,CAASC,GAAG,IAAIA,GAAG,CAACC,IAApB,EACJC,KADI,CACEC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CADT,CAAP;AAED,CAdD,C,CAgBA;;;AACA,MAAM8B,UAAU,GAAG,CAACP,MAAD,EAASR,KAAT,KAAmB;AACpC,QAAMrB,GAAG,GAAGJ,KAAK,CAACyC,MAAN,CAAc,GAAExC,OAAQ,IAAGgC,MAAO,EAAlC,EACZ;AACEN,IAAAA,OAAO,EAAE;AACP,uBAAkB,UAASF,KAAM;AAD1B;AADX,GADY,CAAZ;AAOA,SAAOrB,GAAG,CAACE,IAAJ,CAASC,GAAG,IAAIA,GAAG,CAACC,IAApB,EACJC,KADI,CACEC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CADT,CAAP;AAED,CAVD;;AAYA,eAAe;AACboB,EAAAA,MADa;AAEb5B,EAAAA,UAFa;AAGbW,EAAAA,KAHa;AAIbQ,EAAAA,gBAJa;AAKbC,EAAAA,YALa;AAMbC,EAAAA,aANa;AAObK,EAAAA,gBAPa;AAQbI,EAAAA,QARa;AASbE,EAAAA,aATa;AAUbG,EAAAA,mBAVa;AAWbE,EAAAA,UAXa;AAYbC,EAAAA;AAZa,CAAf","sourcesContent":["import axios from 'axios';\nconst baseUrl = '/dashboard/user';\n\n// CREATE user\nconst createUser = (userObject) => {\n  const req = axios.post(`${baseUrl}/create`, userObject);\n  return req.then(res => res.data)\n    .catch(err => console.error(err));\n};\n\n// LOGIN\nconst login = (type, credentials) => {\n  let reqUser = { password: credentials.password };\n\n  type === 'username'\n    ? reqUser.username = credentials.username\n    : reqUser.email = credentials.email;\n\n  const req = axios.post(`${baseUrl}/login`, reqUser);\n\n  return req.then(res => {\n    console.log('res', res.data);\n\n    return res.data;\n  })\n    .catch(err => console.error(err));\n}\n\n// POST reset request\nconst postResetRequest = (email) => {\n  const reqUser = { email };\n\n  const req = axios.post(`${baseUrl}/reset`, reqUser);\n\n  return req.then(res => {\n    console.log('res', res.data);\n\n    return res.data;\n  })\n    .catch(err => console.error(err));\n}\n\n// GET reset code (POST email)\nconst getResetCode = (email) => {\n  const reqUser = { email };\n\n  const req = axios.post(`${baseUrl}/reset_code_email`, reqUser);\n\n  return req.then(res => res.data)\n    .catch(err => console.error(err));\n}\n\n// POST reset code\nconst postResetCode = (code, token) => {\n  const reqUser = { reset_code: code };\n\n  const req = axios.post(`${baseUrl}/reset_code`, reqUser, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n\n  return req.then(res => res.data)\n    .catch(err => console.error(err));\n}\n\n// PUT password resest\nconst putPasswordReset = (userObject, token) => {\n  const req = axios.put(`${baseUrl}/reset_password`, userObject, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n\n  return req.then(res => {\n    console.log('res.data', res.data);\n    return res.data;\n  })\n    .catch(err => console.error(err));\n}\n\n// GET all users\nconst getAll = (token) => {\n  const req = axios.get('/dashboard/users', {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n\n  return req.then(res => res.data)\n    .catch(err => console.error(err));\n};\n\n// READ user\nconst readUser = (userId, token) => {\n  const req = axios.get(`${baseUrl}/${userId}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n\n  return req.then(res => {\n    console.log(res.data);\n\n    return res.data;\n  })\n    .catch(err => console.error(err));\n};\n\n// GET USERNAMES\nconst checkUsername = (type, input, userObject, token) => {\n  // returns if request is available\n  let thisUser;\n\n  type === 'username'\n    ? thisUser = {\n      ...userObject,\n      username: input,\n      type: 'username',\n    }\n    : thisUser = {\n      ...userObject,\n      email: input,\n      type: 'email',\n    };\n\n  const req = axios.post(`${baseUrl}/usernames`, thisUser, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n\n  return req.then(res => {\n    console.log('res', res.data);\n    return res.data;\n  })\n    .catch(err => console.error(err));\n}\n\n// POST localStorage creatures\nconst storeLocalCreatures = (userId, creatures, token) => {\n  const req = axios.post(`${baseUrl}/${userId}`, creatures, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n\n  return req.then(res => res.data)\n    .catch(err => console.error(err));\n}\n\n// UPDATE user\nconst updateUser = (type = 'none', userId, userObject, token) => {\n  const thisUser = {\n    ...userObject,\n    type\n  };\n\n  const req = axios.put(`${baseUrl}/${userId}/update`, thisUser, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n\n  return req.then(res => res.data)\n    .catch(err => console.error(err));\n};\n\n// DELETE user\nconst deleteUser = (userId, token) => {\n  const req = axios.delete(`${baseUrl}/${userId}`, \n  {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n\n  return req.then(res => res.data)\n    .catch(err => console.error(err));\n};\n\nexport default { \n  getAll,\n  createUser,\n  login,\n  postResetRequest,\n  getResetCode,\n  postResetCode,\n  putPasswordReset,\n  readUser,\n  checkUsername,\n  storeLocalCreatures,\n  updateUser,\n  deleteUser \n};\n"]},"metadata":{},"sourceType":"module"}