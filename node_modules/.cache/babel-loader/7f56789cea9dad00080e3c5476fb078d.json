{"ast":null,"code":"var _jsxFileName = \"/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/contexts/UserContext.js\";\nimport React, { useState, useReducer, createContext, useEffect } from 'react';\nimport userService from '../services/userService';\nimport userReducer from '../reducers/userReducer';\nexport const UserContext = createContext();\n\nconst UserContextProvider = props => {\n  const [user, userDispatch] = useReducer(userReducer, {}, () => {\n    const storedUser = localStorage.getItem('my-user');\n    return storedUser ? JSON.parse(storedUser) : {};\n  });\n  const [error, setError] = useState({\n    error: null\n  });\n  useEffect(() => {\n    localStorage.setItem('my-user', JSON.stringify(user));\n    console.log('user', user);\n    console.log(user.accessToken);\n  }, [user]); // POST new user\n\n  const addUser = async userObject => {\n    userService.createUser(userObject).then(res => {\n      if (res === false) {\n        setError({ ...error,\n          error: true\n        });\n      } else {\n        setError({ ...error,\n          error: null\n        });\n      }\n    }).catch(err => console.error(err));\n  }; // GET localStorage creatures\n\n\n  const getLocalCreatures = () => {\n    const creatureStorage = localStorage.getItem('my-creatures');\n    return creatureStorage ? JSON.parse(creatureStorage) : [];\n  }; // POST localStorage creatures\n\n\n  const postLocalCreatures = async (userId, creatures, token) => {\n    await userService.storeLocalCreatures(userId, creatures, token).then(res => res).catch(err => console.error(err));\n    userDispatch({\n      type: 'POST_LOCAL_CREATURES',\n      creatures: {\n        creatures\n      }\n    });\n  }; // GET user info\n\n\n  const getUserInfo = async res => {\n    console.log('Successfully logged in', res.db_id, res.accessToken);\n    const storedCreatures = await getLocalCreatures();\n    console.log(storedCreatures);\n\n    if (storedCreatures.length >= 1) {\n      postLocalCreatures(res.db_ib, storedCreatures, res.accessToken);\n      console.log('Retrieved localStorage creatures');\n      localStorage.removeItem('my-creatures');\n      console.log('Cleared \\'my-creatures\\' from localStorage');\n    }\n\n    await userService.readUser(res.db_id, res.accessToken).then(response => {\n      userDispatch({\n        type: 'LOG_IN',\n        user: {\n          username: response.user.username,\n          email: response.user.email,\n          db_id: res.db_id,\n          accessToken: res.accessToken,\n          creatures: storedCreatures.length >= 1 ? storedCreatures : response.user_creatures\n        }\n      });\n      console.log('Successfully retrieved user data');\n    }).catch(err => console.error(err));\n  }; // POST user login\n\n\n  const login = async userObject => {\n    const {\n      username,\n      password\n    } = userObject;\n    localStorage.removeItem('my-user');\n    await userService.login({\n      username,\n      password\n    }).then(res => {\n      return getUserInfo(res);\n    }).catch(err => {\n      console.error(err);\n    });\n  }; // DELETE user\n\n\n  const deleteUser = userObject => {}; // LOG OUT\n\n\n  const logout = () => {\n    localStorage.removeItem('my-user');\n    userDispatch({\n      type: 'LOG_OUT'\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: {\n      user,\n      error,\n      setError,\n      addUser,\n      login,\n      postLocalCreatures,\n      deleteUser,\n      logout\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default UserContextProvider;","map":{"version":3,"sources":["/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/contexts/UserContext.js"],"names":["React","useState","useReducer","createContext","useEffect","userService","userReducer","UserContext","UserContextProvider","props","user","userDispatch","storedUser","localStorage","getItem","JSON","parse","error","setError","setItem","stringify","console","log","accessToken","addUser","userObject","createUser","then","res","catch","err","getLocalCreatures","creatureStorage","postLocalCreatures","userId","creatures","token","storeLocalCreatures","type","getUserInfo","db_id","storedCreatures","length","db_ib","removeItem","readUser","response","username","email","user_creatures","login","password","deleteUser","logout","children"],"mappings":"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","sourcesContent":["import React, { useState, useReducer, createContext, useEffect } from 'react';\nimport userService from '../services/userService';\nimport userReducer from '../reducers/userReducer';\n\nexport const UserContext = createContext();\n\nconst UserContextProvider = (props) => {\n  const [user, userDispatch] = useReducer(userReducer, {}, () => {\n    const storedUser = localStorage.getItem('my-user');\n    return storedUser ? JSON.parse(storedUser) : {};\n  });\n\n  const [error, setError] = useState({ error: null });\n\n  useEffect(() => {\n    localStorage.setItem('my-user', JSON.stringify(user));\n\n    console.log('user', user);\n    console.log(user.accessToken);\n  }, [user]);\n\n  // POST new user\n  const addUser = async (userObject) => {\n\n    userService.createUser(userObject)\n      .then(res => {\n        if (res === false) {\n          setError({\n            ...error,\n            error: true\n          });\n        } else {\n          setError({\n            ...error,\n            error: null\n          });\n        }\n      })\n      .catch(err => console.error(err));\n  }\n\n  // GET localStorage creatures\n  const getLocalCreatures = () => {\n    const creatureStorage = localStorage.getItem('my-creatures');\n    \n    return creatureStorage ? JSON.parse(creatureStorage) : [];\n  }\n\n  // POST localStorage creatures\n  const postLocalCreatures = async (userId, creatures, token) => {\n    await userService\n      .storeLocalCreatures(userId, creatures, token)\n      .then(res => res)\n      .catch(err => console.error(err));\n\n    userDispatch({ type: 'POST_LOCAL_CREATURES', creatures: { creatures }});\n  }\n\n  // GET user info\n  const getUserInfo = async (res) => {\n    console.log('Successfully logged in', res.db_id, res.accessToken);\n\n    const storedCreatures = await getLocalCreatures();\n\n    console.log(storedCreatures);\n\n    if (storedCreatures.length >= 1) {\n      postLocalCreatures(res.db_ib, storedCreatures, res.accessToken);\n      console.log('Retrieved localStorage creatures');\n\n      localStorage.removeItem('my-creatures');\n      console.log('Cleared \\'my-creatures\\' from localStorage');\n    }\n\n    await userService.readUser(res.db_id, res.accessToken)\n      .then(response => {\n\n        userDispatch({ type: 'LOG_IN', user: {\n          username: response.user.username,\n          email: response.user.email,\n          db_id: res.db_id,\n          accessToken: res.accessToken,\n          creatures: storedCreatures.length >= 1 ? storedCreatures : response.user_creatures\n        }});\n\n        console.log('Successfully retrieved user data');\n      })\n      .catch(err => console.error(err));\n  }\n\n  // POST user login\n  const login = async (userObject) => {\n    const { username, password } = userObject;\n\n    localStorage.removeItem('my-user');\n\n    await userService.login({\n      username,\n      password\n    })\n      .then(res => { \n        return getUserInfo(res); \n      })\n      .catch(err => {\n        console.error(err);\n      });\n  }\n\n  // DELETE user\n  const deleteUser = userObject => {}\n\n  // LOG OUT\n  const logout = () => {\n    localStorage.removeItem('my-user');\n    userDispatch({ type: 'LOG_OUT' });\n  }\n\n  return (\n    <UserContext.Provider value={{\n      user,\n      error,\n      setError,\n      addUser,\n      login,\n      postLocalCreatures,\n      deleteUser,\n      logout,\n    }}>\n      {props.children}\n    </UserContext.Provider>\n  )\n}\n\nexport default UserContextProvider;\n"]},"metadata":{},"sourceType":"module"}