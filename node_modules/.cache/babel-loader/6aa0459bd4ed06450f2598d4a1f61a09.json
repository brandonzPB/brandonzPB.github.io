{"ast":null,"code":"import * as streak from '../modules/streak';\nimport * as ages from '../modules/age';\n\nconst userReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOG_IN':\n      return { ...state,\n        accessToken: action.user.accessToken,\n        db_id: action.user.db_id,\n        username: action.user.username,\n        email: action.user.email,\n        password: action.user.password,\n        db_password: action.user.db_password,\n        creatures: action.user.creatures.map(creature => {\n          // updates streaks (if broken) and ages\n          return { ...creature,\n            streak_count: streak.checkCreatureStreak(action.user.newDay, creature) === 'broken' ? 0 : creature.streak_count,\n            age: ages.getAge(creature.birth_time)\n          };\n        }),\n        new_day: action.user.newDay,\n        new_time: action.user.newTime\n      };\n\n    case 'POST_LOCAL_CREATURES':\n      return { ...state,\n        creatures: action.creatures.creatures\n      };\n\n    case 'UPDATE_CREATURES':\n      return { ...state,\n        creatures: action.creatures.creatures\n      };\n\n    case 'REFRESH_USER':\n      return { ...state,\n        creatures: action.user.creatures,\n        refreshed: true\n      };\n\n    case 'UPDATE_USER':\n      return { ...state,\n        username: action.user.username,\n        email: action.user.email,\n        password: action.user.password\n      };\n\n    case 'ADD_CREATURE':\n      return { ...state,\n        creatures: [...state.creatures, {\n          creature: action.creature.creature,\n          creature_name: action.creature.creature_name,\n          purpose: action.creature.purpose,\n          purpose_name: action.creature.purpose_name,\n          evolutions: action.creature.evolutions,\n          difficulty: action.creature.difficulty,\n          multiplier: action.creature.multiplier,\n          birth_date: action.creature.birth_date,\n          birth_time: action.creature.birth_time,\n          pokeball_number: action.creature.pokeball_number,\n          id: action.creature.id,\n          level: 1,\n          exp: 0,\n          exp_goal: 1,\n          prev_exp_goal: 0,\n          exp_surplus: 0,\n          objectives: [],\n          age: 0,\n          is_noob: true,\n          streak_count: 0,\n          streak_timestamp: Date.now(),\n          streak_day: action.creature.streak_day\n        }]\n      };\n\n    case 'UPDATE_CREATURE_INFO':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              creature: action.creature.current,\n              evolutions: action.creature.newEvos,\n              creature_name: action.creature.name\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'ADD_OBJECTIVE':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.id) {\n            return { ...creature,\n              objectives: [...creature.objectives, {\n                id: action.objective.id,\n                text: action.objective.text,\n                is_timed: action.objective.is_timed,\n                difficulty: action.objective.difficulty,\n                factor: action.objective.factor\n              }]\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'DELETE_OBJECTIVE':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creatureId) {\n            return { ...creature,\n              objectives: creature.objectives.filter(obj => obj.id !== action.objectiveId)\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'ADD_EXP':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              exp: action.creature.newTotal,\n              exp_surplus: action.creature.newSurplus\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'UPDATE_STREAK':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              streak_count: action.creature.newCount,\n              streak_timestamp: Date.now(),\n              streak_day: action.creature.newDay\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'LEVEL_UP':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              level: action.creature.level,\n              is_noob: false\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'UPGRADE_MULTIPLIERS':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              difficulty: action.creature.difficulty,\n              multiplier: action.creature.multiplier\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'LEVEL_UPDATES':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              prev_exp_goal: action.creature.prevGoal,\n              exp_goal: action.creature.newGoal\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'UPDATE_POKEBALL':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              pokeball_number: action.creature.newPokeball\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'EVOLVE':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              creature: action.creature.nextCreature\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'DELETE_CREATURE':\n      return { ...state,\n        creatures: state.creatures.filter(creature => creature.id !== action.id)\n      };\n\n    case 'LOG_OUT':\n      return { ...state,\n        accessToken: null,\n        db_id: null,\n        username: null,\n        email: null,\n        password: null,\n        db_password: null,\n        creatures: [],\n        new_day: 0,\n        new_time: 0,\n        refreshed: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;","map":{"version":3,"sources":["/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/reducers/userReducer.js"],"names":["streak","ages","userReducer","state","action","type","accessToken","user","db_id","username","email","password","db_password","creatures","map","creature","streak_count","checkCreatureStreak","newDay","age","getAge","birth_time","new_day","new_time","newTime","refreshed","creature_name","purpose","purpose_name","evolutions","difficulty","multiplier","birth_date","pokeball_number","id","level","exp","exp_goal","prev_exp_goal","exp_surplus","objectives","is_noob","streak_timestamp","Date","now","streak_day","current","newEvos","name","objective","text","is_timed","factor","creatureId","filter","obj","objectiveId","newTotal","newSurplus","newCount","prevGoal","newGoal","newPokeball","nextCreature"],"mappings":"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","sourcesContent":["import * as streak from '../modules/streak';\nimport * as ages from '../modules/age';\n\nconst userReducer = (state, action) => {\n  switch(action.type) {\n    case 'LOG_IN':\n      return {\n        ...state,\n        accessToken: action.user.accessToken,\n        db_id: action.user.db_id,\n        username: action.user.username,\n        email: action.user.email,\n        password: action.user.password,\n        db_password: action.user.db_password,\n        creatures: action.user.creatures.map(creature => {\n          // updates streaks (if broken) and ages\n          return {\n            ...creature,\n            streak_count: (streak.checkCreatureStreak((action.user.newDay), creature) === 'broken') \n              ? 0 : creature.streak_count,\n            age: (ages.getAge(creature.birth_time)),\n          }\n        }),\n        new_day: action.user.newDay,\n        new_time: action.user.newTime,\n      };\n    case 'POST_LOCAL_CREATURES':\n      return {\n        ...state,\n        creatures: action.creatures.creatures\n      };\n    case 'UPDATE_CREATURES':\n      return {\n        ...state,\n        creatures: action.creatures.creatures\n      };\n    case 'REFRESH_USER':\n      return {\n        ...state,\n        creatures: action.user.creatures,\n        refreshed: true\n      };\n    case 'UPDATE_USER':\n      return {\n        ...state,\n        username: action.user.username,\n        email: action.user.email,\n        password: action.user.password\n      };\n    case 'ADD_CREATURE':\n      return {\n        ...state,\n        creatures: [\n          ...state.creatures,\n          {\n            creature: action.creature.creature,\n            creature_name: action.creature.creature_name,\n            purpose: action.creature.purpose,\n            purpose_name: action.creature.purpose_name,\n            evolutions: action.creature.evolutions,\n            difficulty: action.creature.difficulty,\n            multiplier: action.creature.multiplier,\n            birth_date: action.creature.birth_date,\n            birth_time: action.creature.birth_time,\n            pokeball_number: action.creature.pokeball_number,\n            id: action.creature.id,\n            level: 1,\n            exp: 0,\n            exp_goal: 1,\n            prev_exp_goal: 0,\n            exp_surplus: 0,\n            objectives: [],\n            age: 0,\n            is_noob: true,\n            streak_count: 0,\n            streak_timestamp: Date.now(),\n            streak_day: action.creature.streak_day\n          }\n        ]\n      };\n    case 'UPDATE_CREATURE_INFO':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              creature: action.creature.current,\n              evolutions: action.creature.newEvos,\n              creature_name: action.creature.name\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'ADD_OBJECTIVE':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.id) {\n            return {\n              ...creature,\n              objectives: [\n                ...creature.objectives,\n                {\n                  id: action.objective.id,\n                  text: action.objective.text,\n                  is_timed: action.objective.is_timed,\n                  difficulty: action.objective.difficulty,\n                  factor: action.objective.factor\n                },\n              ],\n            };\n          }\n\n          return creature;\n        })\n      };\n    case 'DELETE_OBJECTIVE':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creatureId) {\n            return {\n              ...creature,\n              objectives: creature.objectives.filter(obj => obj.id !== action.objectiveId)\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'ADD_EXP':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              exp: action.creature.newTotal,\n              exp_surplus: action.creature.newSurplus\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'UPDATE_STREAK':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              streak_count: action.creature.newCount,\n              streak_timestamp: Date.now(),\n              streak_day: action.creature.newDay,\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'LEVEL_UP':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              level: action.creature.level,\n              is_noob: false\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'UPGRADE_MULTIPLIERS':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              difficulty: action.creature.difficulty,\n              multiplier: action.creature.multiplier,\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'LEVEL_UPDATES':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              prev_exp_goal: action.creature.prevGoal,\n              exp_goal: action.creature.newGoal,\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'UPDATE_POKEBALL':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              pokeball_number: action.creature.newPokeball,\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'EVOLVE':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              creature: action.creature.nextCreature,\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'DELETE_CREATURE':\n      return {\n        ...state,\n        creatures: state.creatures.filter(creature => creature.id !== action.id)\n      };\n    case 'LOG_OUT':\n      return {\n        ...state,\n        accessToken: null,\n        db_id: null,\n        username: null,\n        email: null,\n        password: null,\n        db_password: null,\n        creatures: [],\n        new_day: 0,\n        new_time: 0,\n        refreshed: false,\n      };\n    default:\n      return state;\n  }\n}\n\nexport default userReducer;\n"]},"metadata":{},"sourceType":"module"}