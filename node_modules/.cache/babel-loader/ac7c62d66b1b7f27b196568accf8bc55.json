{"ast":null,"code":"import _slicedToArray from\"/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,createContext}from'react';export var ConfirmDisplayContext=createContext();var ConfirmDisplayContextProvider=function ConfirmDisplayContextProvider(props){var _useState=useState({confirmIsDisplayed:false}),_useState2=_slicedToArray(_useState,2),confirmDisplay=_useState2[0],setConfirmDisplay=_useState2[1];var toggleConfirmDisplay=function toggleConfirmDisplay(){setConfirmDisplay({confirmIsDisplayed:!confirmDisplay.confirmIsDisplayed});};return/*#__PURE__*/React.createElement(ConfirmDisplayContext.Provider,{value:{confirmDisplay:confirmDisplay,toggleConfirmDisplay:toggleConfirmDisplay}},props.children);};export default ConfirmDisplayContextProvider;","map":{"version":3,"sources":["/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/contexts/ConfirmDisplayContext.js"],"names":["React","useState","createContext","ConfirmDisplayContext","ConfirmDisplayContextProvider","props","confirmIsDisplayed","confirmDisplay","setConfirmDisplay","toggleConfirmDisplay","children"],"mappings":"uMAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,aAA1B,KAA+C,OAA/C,CAEA,MAAO,IAAMC,CAAAA,qBAAqB,CAAGD,aAAa,EAA3C,CAEP,GAAME,CAAAA,6BAA6B,CAAG,QAAhCA,CAAAA,6BAAgC,CAACC,KAAD,CAAW,eACHJ,QAAQ,CAAC,CACnDK,kBAAkB,CAAE,KAD+B,CAAD,CADL,wCACxCC,cADwC,eACxBC,iBADwB,eAK/C,GAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,EAAM,CACjCD,iBAAiB,CAAC,CAChBF,kBAAkB,CAAE,CAACC,cAAc,CAACD,kBADpB,CAAD,CAAjB,CAGD,CAJD,CAMA,mBACE,oBAAC,qBAAD,CAAuB,QAAvB,EAAgC,KAAK,CAAE,CAACC,cAAc,CAAdA,cAAD,CAAiBE,oBAAoB,CAApBA,oBAAjB,CAAvC,EACGJ,KAAK,CAACK,QADT,CADF,CAKD,CAhBD,CAkBA,cAAeN,CAAAA,6BAAf","sourcesContent":["import React, { useState, createContext } from 'react';\n\nexport const ConfirmDisplayContext = createContext();\n\nconst ConfirmDisplayContextProvider = (props) => {\n  const [confirmDisplay, setConfirmDisplay] = useState({\n    confirmIsDisplayed: false\n  });\n\n  const toggleConfirmDisplay = () => {\n    setConfirmDisplay({\n      confirmIsDisplayed: !confirmDisplay.confirmIsDisplayed\n    });\n  };\n\n  return (\n    <ConfirmDisplayContext.Provider value={{confirmDisplay, toggleConfirmDisplay}}>\n      {props.children}\n    </ConfirmDisplayContext.Provider>\n  )\n}\n\nexport default ConfirmDisplayContextProvider;\n"]},"metadata":{},"sourceType":"module"}