{"ast":null,"code":"import * as streak from '../modules/streak';\n\nconst userReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOG_IN':\n      return { ...state,\n        accessToken: action.user.accessToken,\n        db_id: action.user.db_id,\n        username: action.user.username,\n        email: action.user.email,\n        creatures: action.user.creatures.map(creature => {\n          // updates streaks (if broken) and ages\n          return { ...creature,\n            streak_count: streak.checkCreatureStreak(creature) === 'broken' ? 0 : creature.streak_count,\n            streak_timestamp: streak.checkCreatureStreak(creature) === 'broken' ? Date.now() : creature.streak_timestamp,\n            streak_day: streak.checkCreatureStreak(creature) === 'broken' ? new Date().getDay() : creature.streak_day,\n            age: streak.getAge(creature.birth_time)\n          };\n        })\n      };\n\n    case 'POST_LOCAL_CREATURES':\n      return { ...state,\n        creatures: action.creatures.creatures\n      };\n\n    case 'UPDATE_CREATURES':\n      return { ...state,\n        creatures: action.creatures.creatures\n      };\n\n    case 'ADD_CREATURE':\n      return { ...state,\n        creatures: [...state.creatures, {\n          creature: action.creature.creature,\n          creature_name: action.creature.creature_name,\n          purpose: action.creature.purpose,\n          purpose_name: action.creature.purpose_name,\n          evolutions: action.creature.evolutions,\n          difficulty: action.creature.difficulty,\n          multiplier: action.creature.multiplier,\n          birth_date: action.creature.birth_date,\n          birth_time: action.creature.birth_time,\n          pokeball_number: action.creature.pokeball_number,\n          id: action.creature.id,\n          level: 1,\n          exp: 0,\n          exp_goal: 1,\n          prev_exp_goal: 0,\n          exp_surplus: 0,\n          objectives: [],\n          age: 0,\n          is_noob: true,\n          streak_count: 0,\n          streak_timestamp: Date.now(),\n          streak_day: new Date().getDay()\n        }]\n      };\n\n    case 'UPDATE_AGE':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              age: action.creature.newAge\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'ADD_OBJECTIVE':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.id) {\n            return { ...creature,\n              objectives: [...creature.objectives, {\n                id: action.objective.id,\n                text: action.objective.text,\n                is_timed: action.objective.is_timed,\n                difficulty: action.objective.difficulty,\n                factor: action.objective.factor\n              }]\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'DELETE_OBJECTIVE':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creatureId) {\n            return { ...creature,\n              objectives: creature.objectives.filter(obj => obj.id !== action.objectiveId)\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'ADD_EXP':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              exp: action.creature.newTotal,\n              exp_surplus: action.creature.newSurplus\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'UPDATE_STREAK':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              streak_count: action.creature.newCount,\n              streak_timestamp: action.creature.newTimestamp,\n              streak_day: action.creature.day\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'LEVEL_UP':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              level: action.creature.level,\n              is_noob: false\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'UPGRADE_MULTIPLIERS':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              difficulty: action.creature.difficulty,\n              multiplier: action.creature.multiplier\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'LEVEL_UPDATES':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              prev_exp_goal: action.creature.prevGoal,\n              exp_goal: action.creature.newGoal\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'UPDATE_POKEBALL':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              pokeball_number: action.creature.newPokeball\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'EVOLVE':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              creature: action.creature.nextCreature\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'DELETE_CREATURE':\n      return { ...state,\n        creatures: state.creatures.filter(creature => creature.id !== action.id)\n      };\n\n    case 'LOG_OUT':\n      return { ...state,\n        accessToken: null,\n        db_id: null,\n        username: null,\n        email: null,\n        password: null,\n        creatures: []\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;","map":{"version":3,"sources":["/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/reducers/userReducer.js"],"names":["streak","userReducer","state","action","type","accessToken","user","db_id","username","email","creatures","map","creature","streak_count","checkCreatureStreak","streak_timestamp","Date","now","streak_day","getDay","age","getAge","birth_time","creature_name","purpose","purpose_name","evolutions","difficulty","multiplier","birth_date","pokeball_number","id","level","exp","exp_goal","prev_exp_goal","exp_surplus","objectives","is_noob","newAge","objective","text","is_timed","factor","creatureId","filter","obj","objectiveId","newTotal","newSurplus","newCount","newTimestamp","day","prevGoal","newGoal","newPokeball","nextCreature","password"],"mappings":"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","sourcesContent":["import * as streak from '../modules/streak';\n\nconst userReducer = (state, action) => {\n  switch(action.type) {\n    case 'LOG_IN':\n      return {\n        ...state,\n        accessToken: action.user.accessToken,\n        db_id: action.user.db_id,\n        username: action.user.username,\n        email: action.user.email,\n        creatures: action.user.creatures.map(creature => {\n          // updates streaks (if broken) and ages\n          return {\n            ...creature,\n            streak_count: (streak.checkCreatureStreak(creature) === 'broken') ? 0 : creature.streak_count,\n            streak_timestamp: (streak.checkCreatureStreak(creature) === 'broken') ? Date.now() : creature.streak_timestamp,\n            streak_day: (streak.checkCreatureStreak(creature) === 'broken') ? (new Date()).getDay() : creature.streak_day,\n            age: (streak.getAge(creature.birth_time)),\n          }\n        }),\n      };\n    case 'POST_LOCAL_CREATURES':\n      return {\n        ...state,\n        creatures: action.creatures.creatures\n      };\n    case 'UPDATE_CREATURES':\n      return {\n        ...state,\n        creatures: action.creatures.creatures\n      };\n    case 'ADD_CREATURE':\n      return {\n        ...state,\n        creatures: [\n          ...state.creatures,\n          {\n            creature: action.creature.creature,\n            creature_name: action.creature.creature_name,\n            purpose: action.creature.purpose,\n            purpose_name: action.creature.purpose_name,\n            evolutions: action.creature.evolutions,\n            difficulty: action.creature.difficulty,\n            multiplier: action.creature.multiplier,\n            birth_date: action.creature.birth_date,\n            birth_time: action.creature.birth_time,\n            pokeball_number: action.creature.pokeball_number,\n            id: action.creature.id,\n            level: 1,\n            exp: 0,\n            exp_goal: 1,\n            prev_exp_goal: 0,\n            exp_surplus: 0,\n            objectives: [],\n            age: 0,\n            is_noob: true,\n            streak_count: 0,\n            streak_timestamp: Date.now(),\n            streak_day: (new Date()).getDay(),\n          }\n        ]\n      };\n    case 'UPDATE_AGE':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              age: action.creature.newAge,\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'ADD_OBJECTIVE':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.id) {\n            return {\n              ...creature,\n              objectives: [\n                ...creature.objectives,\n                {\n                  id: action.objective.id,\n                  text: action.objective.text,\n                  is_timed: action.objective.is_timed,\n                  difficulty: action.objective.difficulty,\n                  factor: action.objective.factor\n                },\n              ],\n            };\n          }\n\n          return creature;\n        })\n      };\n    case 'DELETE_OBJECTIVE':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creatureId) {\n            return {\n              ...creature,\n              objectives: creature.objectives.filter(obj => obj.id !== action.objectiveId)\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'ADD_EXP':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              exp: action.creature.newTotal,\n              exp_surplus: action.creature.newSurplus\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'UPDATE_STREAK':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              streak_count: action.creature.newCount,\n              streak_timestamp: action.creature.newTimestamp,\n              streak_day: action.creature.day,\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'LEVEL_UP':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              level: action.creature.level,\n              is_noob: false\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'UPGRADE_MULTIPLIERS':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              difficulty: action.creature.difficulty,\n              multiplier: action.creature.multiplier,\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'LEVEL_UPDATES':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              prev_exp_goal: action.creature.prevGoal,\n              exp_goal: action.creature.newGoal,\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'UPDATE_POKEBALL':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              pokeball_number: action.creature.newPokeball,\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'EVOLVE':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              creature: action.creature.nextCreature,\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'DELETE_CREATURE':\n      return {\n        ...state,\n        creatures: state.creatures.filter(creature => creature.id !== action.id)\n      };\n    case 'LOG_OUT':\n      return {\n        ...state,\n        accessToken: null,\n        db_id: null,\n        username: null,\n        email: null,\n        password: null,\n        creatures: [],\n      };\n    default:\n      return state;\n  }\n}\n\nexport default userReducer;\n"]},"metadata":{},"sourceType":"module"}