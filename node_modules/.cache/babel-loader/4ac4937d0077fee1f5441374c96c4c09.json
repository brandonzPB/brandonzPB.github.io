{"ast":null,"code":"var _jsxFileName = \"/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/contexts/UserContext.js\";\nimport React, { useState, useReducer, createContext, useEffect } from 'react';\nimport userService from '../services/userService';\nimport creatureService from '../services/creatureService';\nimport userReducer from '../reducers/userReducer';\nexport const UserContext = createContext();\n\nconst UserContextProvider = props => {\n  const [user, userDispatch] = useReducer(userReducer, {}, () => {\n    const storedUser = localStorage.getItem('my-user');\n    return storedUser ? JSON.parse(storedUser) : {};\n  });\n  const [error, setError] = useState({\n    error: null,\n    ref: '',\n    success: false\n  });\n  const [createResult, setCreateResult] = useState({\n    success: false\n  });\n  const [reset, setReset] = useState({\n    resetToken: '',\n    email: '',\n    code: '',\n    passwordReset: false\n  });\n  useEffect(() => {\n    localStorage.setItem('my-user', JSON.stringify(user));\n    console.log('user', user);\n    console.log(user.accessToken);\n  }, [user]);\n  useEffect(() => {\n    localStorage.setItem('my-reset', JSON.stringify(reset));\n    console.log('reset', reset);\n  }, [reset]); // // POST new user\n  // const addUser = async (userObject) => {\n  //   userService.createUser(userObject)\n  //     .then(res => {\n  //       if (res === 'Email: false') {\n  //         setError({\n  //           ...error,\n  //           error: true,\n  //           ref: 'email'\n  //         });\n  //       } else if (res === 'Username: false') {\n  //         setError({\n  //           ...error,\n  //           error: true,\n  //           ref: 'username'\n  //         });\n  //       } else {\n  //         setError({\n  //           ...error,\n  //           error: null\n  //         });\n  //       }\n  //     })\n  //     .catch(err => console.error(err));\n  // }\n  // GET localStorage creatures\n\n  const getLocalCreatures = () => {\n    const creatureStorage = localStorage.getItem('my-creatures');\n    return creatureStorage ? JSON.parse(creatureStorage) : [];\n  }; // POST localStorage creatures\n\n\n  const postLocalCreatures = async (userId, creatures, token) => {\n    await userService.storeLocalCreatures(userId, creatures, token).then(res => res).catch(err => console.error(err));\n    userDispatch({\n      type: 'POST_LOCAL_CREATURES',\n      creatures: {\n        creatures\n      }\n    });\n  };\n\n  const refreshUser = () => {\n    console.log('Refreshing!');\n    userService.readUser(user.db_id, user.accessToken).then(res => {\n      console.log(res);\n      userDispatch({\n        type: 'REFRESH_USER',\n        user: {\n          username: res.user.username,\n          email: res.user.email,\n          password: res.user.password,\n          db_id: user.db_id,\n          accessToken: user.accessToken,\n          creatures: res.user_creatures\n        }\n      });\n      return res;\n    }).catch(err => console.error(err));\n  };\n\n  const updateUser = method => {\n    console.log('Updating user...');\n    userService.updateUser(method, user.db_id, user, user.accessToken).then(res => res).catch(err => console.error(err));\n  }; // GET user info\n\n\n  const getUserInfo = async (res, password) => {\n    console.log('Successfully logged in', res.db_id, res.accessToken);\n    const storedCreatures = await getLocalCreatures();\n    console.log(storedCreatures);\n\n    if (storedCreatures.length >= 1) {\n      postLocalCreatures(res.db_id, storedCreatures, res.accessToken);\n      console.log('Retrieved localStorage creatures');\n      localStorage.removeItem('my-creatures');\n      console.log('Cleared \\'my-creatures\\' from localStorage');\n    }\n\n    await userService.readUser(res.db_id, res.accessToken).then(response => {\n      console.log(response);\n      userDispatch({\n        type: 'LOG_IN',\n        user: {\n          username: response.user.username,\n          email: response.user.email,\n          password,\n          db_password: response.user.password,\n          db_id: res.db_id,\n          accessToken: res.accessToken,\n          creatures: storedCreatures.length >= 1 ? storedCreatures : response.user_creatures,\n          newDay: response.new_day,\n          newTime: response.new_time\n        }\n      });\n      console.log('Successfully retrieved user data');\n    }).catch(err => console.error(err));\n  }; // POST user login\n\n\n  const login = async userObject => {\n    const {\n      username,\n      password\n    } = userObject;\n    localStorage.removeItem('my-reset');\n    localStorage.removeItem('my-user');\n    await userService.login({\n      username,\n      password\n    }).then(res => {\n      return getUserInfo(res, password);\n    }).catch(err => {\n      console.error(err);\n    });\n  }; // DELETE user\n\n\n  const removeUser = () => {\n    console.log('Deleting user...');\n    localStorage.removeItem('my-user');\n    localStorage.removeItem('my-reset');\n    userService.deleteUser(user.db_id, user, user.accessToken).then(res => res).catch(err => console.error(err));\n    console.log('Successfully deleted user');\n  }; // LOG OUT\n\n\n  const logout = () => {\n    userDispatch({\n      type: 'LOG_OUT'\n    });\n    localStorage.removeItem('my-reset');\n    localStorage.removeItem('my-user');\n  };\n\n  return /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: {\n      user,\n      userDispatch,\n      refreshUser,\n      updateUser,\n      error,\n      setError,\n      createResult,\n      setCreateResult,\n      reset,\n      setReset,\n      login,\n      postLocalCreatures,\n      removeUser,\n      logout\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default UserContextProvider;","map":{"version":3,"sources":["/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/contexts/UserContext.js"],"names":["React","useState","useReducer","createContext","useEffect","userService","creatureService","userReducer","UserContext","UserContextProvider","props","user","userDispatch","storedUser","localStorage","getItem","JSON","parse","error","setError","ref","success","createResult","setCreateResult","reset","setReset","resetToken","email","code","passwordReset","setItem","stringify","console","log","accessToken","getLocalCreatures","creatureStorage","postLocalCreatures","userId","creatures","token","storeLocalCreatures","then","res","catch","err","type","refreshUser","readUser","db_id","username","password","user_creatures","updateUser","method","getUserInfo","storedCreatures","length","removeItem","response","db_password","newDay","new_day","newTime","new_time","login","userObject","removeUser","deleteUser","logout","children"],"mappings":"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","sourcesContent":["import React, { useState, useReducer, createContext, useEffect } from 'react';\nimport userService from '../services/userService';\nimport creatureService from '../services/creatureService';\nimport userReducer from '../reducers/userReducer';\n\nexport const UserContext = createContext();\n\nconst UserContextProvider = (props) => {\n  const [user, userDispatch] = useReducer(userReducer, {}, () => {\n    const storedUser = localStorage.getItem('my-user');\n    return storedUser ? JSON.parse(storedUser) : {};\n  });\n\n  const [error, setError] = useState({ error: null, ref: '', success: false });\n  const [createResult, setCreateResult] = useState({ success: false });\n\n  const [reset, setReset] = useState({\n    resetToken: '',\n    email: '',\n    code: '',\n    passwordReset: false\n  });\n\n  useEffect(() => {\n    localStorage.setItem('my-user', JSON.stringify(user));\n\n    console.log('user', user);\n    console.log(user.accessToken);\n  }, [user]);\n\n  useEffect(() => {\n    localStorage.setItem('my-reset', JSON.stringify(reset));\n\n    console.log('reset', reset);\n  }, [reset]);\n\n  // // POST new user\n  // const addUser = async (userObject) => {\n\n  //   userService.createUser(userObject)\n  //     .then(res => {\n  //       if (res === 'Email: false') {\n  //         setError({\n  //           ...error,\n  //           error: true,\n  //           ref: 'email'\n  //         });\n  //       } else if (res === 'Username: false') {\n  //         setError({\n  //           ...error,\n  //           error: true,\n  //           ref: 'username'\n  //         });\n  //       } else {\n  //         setError({\n  //           ...error,\n  //           error: null\n  //         });\n  //       }\n  //     })\n  //     .catch(err => console.error(err));\n  // }\n\n  // GET localStorage creatures\n  const getLocalCreatures = () => {\n    const creatureStorage = localStorage.getItem('my-creatures');\n    \n    return creatureStorage ? JSON.parse(creatureStorage) : [];\n  }\n\n  // POST localStorage creatures\n  const postLocalCreatures = async (userId, creatures, token) => {\n    await userService\n      .storeLocalCreatures(userId, creatures, token)\n      .then(res => res)\n      .catch(err => console.error(err));\n\n    userDispatch({ type: 'POST_LOCAL_CREATURES', creatures: { creatures }});\n  }\n\n  const refreshUser = () => {\n    console.log('Refreshing!');\n\n    userService.readUser(user.db_id, user.accessToken)\n      .then(res => {\n        console.log(res);\n\n        userDispatch({ type: 'REFRESH_USER', user: {\n          username: res.user.username,\n          email: res.user.email,\n          password: res.user.password,\n          db_id: user.db_id,\n          accessToken: user.accessToken,\n          creatures: res.user_creatures\n        }});\n\n        return res;\n      })\n      .catch(err => console.error(err));\n  }\n\n  const updateUser = (method) => {\n    console.log('Updating user...');\n\n    userService.updateUser(method, user.db_id, user, user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n  }\n\n  // GET user info\n  const getUserInfo = async (res, password) => {\n    console.log('Successfully logged in', res.db_id, res.accessToken);\n\n    const storedCreatures = await getLocalCreatures();\n\n    console.log(storedCreatures);\n\n    if (storedCreatures.length >= 1) {\n      postLocalCreatures(res.db_id, storedCreatures, res.accessToken);\n      console.log('Retrieved localStorage creatures');\n\n      localStorage.removeItem('my-creatures');\n      console.log('Cleared \\'my-creatures\\' from localStorage');\n    }\n\n    await userService.readUser(res.db_id, res.accessToken)\n      .then(response => {\n        console.log(response);\n\n        userDispatch({ type: 'LOG_IN', user: {\n          username: response.user.username,\n          email: response.user.email,\n          password,\n          db_password: response.user.password,\n          db_id: res.db_id,\n          accessToken: res.accessToken,\n          creatures: storedCreatures.length >= 1 ? storedCreatures : response.user_creatures,\n          newDay: response.new_day,\n          newTime: response.new_time,\n        }});\n\n        console.log('Successfully retrieved user data');\n      })\n      .catch(err => console.error(err));\n  }\n\n  // POST user login\n  const login = async (userObject) => {\n    const { username, password } = userObject;\n\n    localStorage.removeItem('my-reset');\n    localStorage.removeItem('my-user');\n\n    await userService.login({ \n      username, \n      password \n    })\n      .then(res => { \n        return getUserInfo(res, password); \n      })\n      .catch(err => {\n        console.error(err);\n      });\n  }\n\n  // DELETE user\n  const removeUser = () => {\n    console.log('Deleting user...');\n    \n    localStorage.removeItem('my-user');\n    localStorage.removeItem('my-reset');\n\n    userService.deleteUser(user.db_id, user, user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n\n    console.log('Successfully deleted user');\n  }\n\n  // LOG OUT\n  const logout = () => {\n    userDispatch({ type: 'LOG_OUT' });\n    localStorage.removeItem('my-reset');\n    localStorage.removeItem('my-user');\n  }\n\n  return (\n    <UserContext.Provider value={{\n      user,\n      userDispatch,\n      refreshUser,\n      updateUser,\n      error,\n      setError,\n      createResult,\n      setCreateResult,\n      reset,\n      setReset,\n      login,\n      postLocalCreatures,\n      removeUser,\n      logout,\n    }}>\n      {props.children}\n    </UserContext.Provider>\n  )\n}\n\nexport default UserContextProvider;\n"]},"metadata":{},"sourceType":"module"}