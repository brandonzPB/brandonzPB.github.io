{"ast":null,"code":"var _jsxFileName = \"/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/contexts/CreatureContext.js\";\nimport React, { useState, useReducer, useEffect, useContext, createContext } from 'react';\nimport creatureReducer from '../reducers/creatureReducer';\nimport * as objective from '../modules/objective';\nimport * as streakTime from '../modules/age';\nimport creatureService from '../services/creatureService';\nimport { UserContext } from './UserContext';\nexport const CreatureContext = createContext();\n\nconst CreatureContextProvider = props => {\n  const {\n    user,\n    userDispatch\n  } = useContext(UserContext);\n  const [creatures, dispatch] = useReducer(creatureReducer, [], () => {\n    return creatureService.getAll().then(res => res).catch(err => console.error(err));\n    /* const creatures = localStorage.getItem('my-user');\n    const storedCreatures = creatures ? JSON.parse(creatures) : [];\n    return storedCreatures.creatures; */\n  });\n  useEffect(() => {\n    userDispatch({\n      type: 'UPDATE_CREATURES',\n      creatures: {\n        creatures: creatures\n      }\n    });\n    localStorage.setItem('my-user', JSON.stringify(user));\n  }, [creatures]);\n  /* const [creatures, dispatch] = useReducer(creatureReducer, [], () => {\n    const storedCreatures = localStorage.getItem('my-creatures');\n    return storedCreatures ? JSON.parse(storedCreatures) : [];\n  });\n   useEffect(() => {\n    localStorage.setItem('my-creatures', JSON.stringify(creatures));\n  }, [creatures]); */\n\n  const [currentId, setCurrentId] = useState('');\n  const [play, setPlay] = useState(false);\n  const [formDisplay, setFormDisplay] = useState(true);\n  const [expUpdate, setExpUpdate] = useState(false); // CREATE creature\n\n  const createCreature = creatureObject => {\n    console.log('creatures', creatures);\n    console.log('creature', creatureObject);\n    creatureService.createCreature(user.db_id, creatureObject, user.accessToken).then(res => res).catch(err => console.error(err));\n    console.log('Successfully added creature');\n  }; // UPDATE creature stats\n\n\n  const updateCreatureStats = async creatureId => {\n    const creature = creatures.filter(being => being.id === creatureId);\n    await creatureService.updateCreatureStats(user.db_id, creatureId, creature, user.accessToken).then(res => res).catch(err => console.error(err));\n    dispatch({\n      type: 'UPDATE_CREATURE',\n      creature: {\n        exp: creature.exp,\n        exp_goal: creature.exp_goal,\n        exp_surplus: creature.exp_surplus,\n        prev_exp_goal: creature.prev_exp_goal,\n        difficulty: creature.difficulty,\n        multiplier: creature.multiplier,\n        pokeball_number: creature.pokeball_number\n      }\n    });\n    console.log('Successfully added creature');\n  }; // UPDATE creature objectives\n\n\n  const updateCreatureObjectves = async creatureId => {\n    const creature = creatures.filter(being => being.id === creatureId);\n    await creatureService.updateCreatureObjectves(user.db_id, creatureId, creature, user.accessToken).then(res => res).catch(err => console.error(err));\n    dispatch({\n      type: 'UPDATE_CREATURE',\n      creature: {\n        objectives: creature.objectives\n      }\n    });\n    console.log('Successfully added creature');\n  }; // UPDATE creature info\n\n\n  const updateCreatureInfo = async creatureId => {\n    const creature = creatures.filter(being => being.id === creatureId);\n    await creatureService.updateCreatureObjectves(user.db_id, creatureId, creature, user.accessToken).then(res => res).catch(err => console.error(err));\n    dispatch({\n      type: 'UPDATE_CREATURE',\n      creature: {\n        creature_name: creature.creature_name,\n        evolutions: creature.evolutions\n      }\n    });\n    console.log('Successfully added creature');\n  }; // DELETE creature\n\n\n  const deleteCreature = async creatureId => {\n    const creature = user.creatures.filter(being => being.id === creatureId);\n    await creatureService.deleteCreature(user.db_id, creature._id, creature, user.accessToken).then(res => res).catch(err => console.error(err));\n    dispatch({\n      type: 'DELETE_CREATURE',\n      creature: {\n        creature\n      }\n    });\n    console.log('Successfully deleted creature: ' + creature);\n  };\n\n  const getExp = (creature, habit, time) => {\n    if (creature.is_noob) return getFirstExp(creature);\n    const streakCount = creature.streak_count;\n    const newExp = objective.calcExp(creature.multiplier, streakCount, habit.difficulty, time);\n    const newTotal = creature.exp + newExp;\n    const newSurplus = newTotal >= creature.exp_goal ? newTotal - creature.exp_goal : creature.exp_surplus + newExp;\n    dispatch({\n      type: 'ADD_EXP',\n      creature: {\n        id: creature.id,\n        newTotal,\n        newSurplus\n      }\n    });\n    return creature;\n  };\n\n  const getFirstExp = creature => {\n    const newTotal = 1;\n    const newSurplus = 0;\n    dispatch({\n      type: 'ADD_EXP',\n      creature: {\n        id: creature.id,\n        newTotal,\n        newSurplus\n      }\n    });\n    return creature;\n  };\n\n  const toggleExpUpdate = () => {\n    setExpUpdate(!expUpdate);\n  };\n\n  const toggleFormDisplay = () => {\n    setFormDisplay(!formDisplay);\n  };\n\n  const sendCreatureId = id => {\n    return setCurrentId(id);\n  };\n\n  const togglePlay = () => {\n    setPlay(!play);\n  };\n\n  const checkObjectiveText = (creatureId, text) => {\n    const creatureInfo = creatures.filter(being => being.id === creatureId);\n    const objectiveIndex = creatureInfo[0].objectives.findIndex(item => item.text.toLowerCase() === text.toLowerCase());\n    return objectiveIndex >= 0 ? true : false;\n  };\n\n  return /*#__PURE__*/React.createElement(CreatureContext.Provider, {\n    value: {\n      creatures,\n      createCreature,\n      updateCreatureStats,\n      updateCreatureObjectves,\n      updateCreatureInfo,\n      deleteCreature,\n      currentId,\n      play,\n      togglePlay,\n      formDisplay,\n      toggleFormDisplay,\n      expUpdate,\n      toggleExpUpdate,\n      dispatch,\n      sendCreatureId,\n      getExp,\n      checkObjectiveText\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default CreatureContextProvider;","map":{"version":3,"sources":["/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/contexts/CreatureContext.js"],"names":["React","useState","useReducer","useEffect","useContext","createContext","creatureReducer","objective","streakTime","creatureService","UserContext","CreatureContext","CreatureContextProvider","props","user","userDispatch","creatures","dispatch","getAll","then","res","catch","err","console","error","type","localStorage","setItem","JSON","stringify","currentId","setCurrentId","play","setPlay","formDisplay","setFormDisplay","expUpdate","setExpUpdate","createCreature","creatureObject","log","db_id","accessToken","updateCreatureStats","creatureId","creature","filter","being","id","exp","exp_goal","exp_surplus","prev_exp_goal","difficulty","multiplier","pokeball_number","updateCreatureObjectves","objectives","updateCreatureInfo","creature_name","evolutions","deleteCreature","_id","getExp","habit","time","is_noob","getFirstExp","streakCount","streak_count","newExp","calcExp","newTotal","newSurplus","toggleExpUpdate","toggleFormDisplay","sendCreatureId","togglePlay","checkObjectiveText","text","creatureInfo","objectiveIndex","findIndex","item","toLowerCase","children"],"mappings":"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","sourcesContent":["import React, { useState, useReducer, useEffect, useContext, createContext } from 'react';\nimport creatureReducer from '../reducers/creatureReducer';\nimport * as objective from '../modules/objective'\nimport * as streakTime from '../modules/age';\nimport creatureService from '../services/creatureService';\nimport { UserContext } from './UserContext';\n\nexport const CreatureContext = createContext();\n\nconst CreatureContextProvider = (props) => {\n  const { user, userDispatch } = useContext(UserContext);\n\n  const [creatures, dispatch] = useReducer(creatureReducer, [], () => {\n    return creatureService.getAll().then(res => res).catch(err => console.error(err));\n    /* const creatures = localStorage.getItem('my-user');\n    const storedCreatures = creatures ? JSON.parse(creatures) : [];\n    return storedCreatures.creatures; */\n  });\n\n  useEffect(() => {\n    userDispatch({ type: 'UPDATE_CREATURES', creatures: { creatures: creatures }});\n    localStorage.setItem('my-user', JSON.stringify(user));\n  }, [creatures]);\n\n  /* const [creatures, dispatch] = useReducer(creatureReducer, [], () => {\n    const storedCreatures = localStorage.getItem('my-creatures');\n    return storedCreatures ? JSON.parse(storedCreatures) : [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem('my-creatures', JSON.stringify(creatures));\n  }, [creatures]); */\n\n  const [currentId, setCurrentId] = useState('');\n  const [play, setPlay] = useState(false);\n  const [formDisplay, setFormDisplay] = useState(true);\n  const [expUpdate, setExpUpdate] = useState(false);\n\n  // CREATE creature\n  const createCreature = creatureObject => {\n    console.log('creatures', creatures);\n\n    console.log('creature', creatureObject);\n\n    creatureService.createCreature(user.db_id, creatureObject, user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n\n    console.log('Successfully added creature');\n  }\n\n  // UPDATE creature stats\n  const updateCreatureStats = async (creatureId) => {\n    const creature = creatures.filter(being => being.id === creatureId);\n\n    await creatureService.updateCreatureStats(user.db_id, creatureId, creature, user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n\n    dispatch({ type: 'UPDATE_CREATURE', creature: {\n      exp: creature.exp,\n      exp_goal: creature.exp_goal,\n      exp_surplus: creature.exp_surplus,\n      prev_exp_goal: creature.prev_exp_goal,\n      difficulty: creature.difficulty,\n      multiplier: creature.multiplier,\n      pokeball_number: creature.pokeball_number,\n    }});\n\n    console.log('Successfully added creature');\n  }\n\n  // UPDATE creature objectives\n  const updateCreatureObjectves = async (creatureId) => {\n    const creature = creatures.filter(being => being.id === creatureId);\n\n    await creatureService.updateCreatureObjectves(user.db_id, creatureId, creature, user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n\n    dispatch({ type: 'UPDATE_CREATURE', creature: {\n      objectives: creature.objectives,\n    }});\n\n    console.log('Successfully added creature');\n  }\n\n  // UPDATE creature info\n  const updateCreatureInfo = async (creatureId) => {\n    const creature = creatures.filter(being => being.id === creatureId);\n\n    await creatureService.updateCreatureObjectves(user.db_id, creatureId, creature, user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n\n    dispatch({ type: 'UPDATE_CREATURE', creature: {\n      creature_name: creature.creature_name,\n      evolutions: creature.evolutions,\n    }});\n\n    console.log('Successfully added creature');\n  }\n\n  // DELETE creature\n  const deleteCreature = async (creatureId) => {\n    const creature = user.creatures.filter(being => being.id === creatureId);\n\n    await creatureService.deleteCreature(user.db_id, creature._id, creature, user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n    \n    dispatch({ type: 'DELETE_CREATURE', creature: { creature }});\n\n    console.log('Successfully deleted creature: ' + creature);\n  }\n\n  const getExp = (creature, habit, time) => { \n    if (creature.is_noob) return getFirstExp(creature);\n\n    const streakCount = creature.streak_count;\n\n    const newExp = objective.calcExp(creature.multiplier, streakCount, habit.difficulty, time);\n    const newTotal = creature.exp + newExp;\n\n    const newSurplus = (newTotal >= creature.exp_goal) ? \n      newTotal - creature.exp_goal :\n      creature.exp_surplus + newExp;\n\n    dispatch({ type: 'ADD_EXP', creature: {\n      id: creature.id,\n      newTotal,\n      newSurplus\n    }});\n\n    return creature;\n  }\n\n  const getFirstExp = creature => {\n    const newTotal = 1;\n    const newSurplus = 0;\n\n    dispatch({ type: 'ADD_EXP', creature: { id: creature.id, newTotal, newSurplus } });\n\n    return creature;\n  }\n\n  const toggleExpUpdate = () => {\n    setExpUpdate(!expUpdate);\n  }\n\n  const toggleFormDisplay = () => {\n    setFormDisplay(!formDisplay);\n  }\n\n  const sendCreatureId = id => {\n    return setCurrentId(id);\n  }\n\n  const togglePlay = () => {\n    setPlay(!play);\n  }\n\n  const checkObjectiveText = (creatureId, text) => {\n    const creatureInfo = creatures.filter(being => being.id === creatureId);\n\n    const objectiveIndex = creatureInfo[0].objectives.findIndex(item => item.text.toLowerCase() === text.toLowerCase());\n    return (objectiveIndex >= 0) ? true : false;\n  }\n\n  return (\n    <CreatureContext.Provider \n      value={{\n        creatures,\n        createCreature,\n        updateCreatureStats,\n        updateCreatureObjectves,\n        updateCreatureInfo,\n        deleteCreature, \n        currentId,\n        play,\n        togglePlay,\n        formDisplay,\n        toggleFormDisplay,\n        expUpdate,\n        toggleExpUpdate,\n        dispatch,\n        sendCreatureId,\n        getExp,\n        checkObjectiveText,\n      }}>\n      {props.children}\n    </CreatureContext.Provider>\n  )\n}\n\nexport default CreatureContextProvider;\n"]},"metadata":{},"sourceType":"module"}