{"ast":null,"code":"import * as streak from '../modules/streak';\nimport * as ages from '../modules/age';\n\nconst checkCreatureStreak = (thisDay, creature) => {\n  // checks if streak is broken, constant, or needs to be incremented\n  const {\n    streak_timestamp,\n    streak_day\n  } = creature;\n\n  if (streak_day === 6) {\n    // Streak continues if current week day is 0 and less than 24 hours passed\n    if (thisDay !== 0 && thisDay !== 6) {\n      // Streak broken\n      return 'broken';\n    } else if (thisDay === 0) {\n      // Next week day\n      // if more than 2 days passed; streak is over\n      // else, increment streak count\n      const minDifference = getAge(streak_timestamp, false);\n      return minDifference > 2880 ? 'broken' : 'increment';\n    } else {\n      // Same day\n      return 'constant';\n    }\n  } else {\n    // Streak continues if current week day is streak.timestamp + 1, and if less than 24 hours passed\n    if (thisDay === streak_day + 1) {\n      // if more than 2 days passed; streak is over\n      // else, increment streak count\n      const minDifference = getAge(streak_timestamp, false);\n      return minDifference > 2880 ? 'broken' : 'increment';\n    } else if (streak_day === thisDay) {\n      // Same day\n      return 'constant';\n    } else {\n      return 'broken';\n    }\n  }\n};\n\nconst getAge = (birthTime, string = true) => {\n  const currentTime = Date.now();\n  const difference = currentTime - birthTime;\n  const dayDifference = difference / 1000 / 86400;\n  const minutes = dayDifference * 1440;\n  const days = dayDifference % 365;\n  const years = (dayDifference - days) / 365;\n  return string ? `${years} years, and ${Math.round(days)} days old` : minutes;\n};\n\nconst userReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOG_IN':\n      return { ...state,\n        accessToken: action.user.accessToken,\n        db_id: action.user.db_id,\n        username: action.user.username,\n        email: action.user.email,\n        password: action.user.password,\n        db_password: action.user.db_password,\n        creatures: action.user.creatures.map(creature => {\n          // updates streaks (if broken) and ages\n          consoleCreature(creature);\n          return { ...creature,\n            streak_count: checkCreatureStreak((action.user.newDay, creature)) === 'broken' ? 0 : creature.streak_count,\n            age: getAge(creature.birth_time)\n          };\n        }),\n        new_day: action.user.newDay,\n        new_time: action.user.newTime,\n        local_time: action.user.localTime\n      };\n\n    case 'POST_LOCAL_CREATURES':\n      return { ...state,\n        creatures: action.creatures.creatures\n      };\n\n    case 'UPDATE_CREATURES':\n      return { ...state,\n        creatures: action.creatures.creatures\n      };\n\n    case 'REFRESH_USER':\n      return { ...state,\n        creatures: action.user.creatures,\n        refreshed: true\n      };\n\n    case 'UPDATE_USER':\n      return { ...state,\n        username: action.user.username,\n        email: action.user.email,\n        password: action.user.password\n      };\n\n    case 'ADD_CREATURE':\n      return { ...state,\n        creatures: [...state.creatures, {\n          creature: action.creature.creature,\n          creature_name: action.creature.creature_name,\n          purpose: action.creature.purpose,\n          purpose_name: action.creature.purpose_name,\n          evolutions: action.creature.evolutions,\n          difficulty: action.creature.difficulty,\n          multiplier: action.creature.multiplier,\n          birth_date: action.creature.birth_date,\n          birth_time: action.creature.birth_time,\n          pokeball_number: action.creature.pokeball_number,\n          id: action.creature.id,\n          level: 1,\n          exp: 0,\n          exp_goal: 1,\n          prev_exp_goal: 0,\n          exp_surplus: 0,\n          objectives: [],\n          age: 0,\n          is_noob: true,\n          streak_count: 0,\n          streak_timestamp: Date.now(),\n          streak_day: action.creature.streak_day\n        }]\n      };\n\n    case 'UPDATE_CREATURE_INFO':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              creature: action.creature.current,\n              evolutions: action.creature.newEvos,\n              creature_name: action.creature.name\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'ADD_OBJECTIVE':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.id) {\n            return { ...creature,\n              objectives: [...creature.objectives, {\n                id: action.objective.id,\n                text: action.objective.text,\n                is_timed: action.objective.is_timed,\n                difficulty: action.objective.difficulty,\n                factor: action.objective.factor\n              }]\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'DELETE_OBJECTIVE':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creatureId) {\n            return { ...creature,\n              objectives: creature.objectives.filter(obj => obj.id !== action.objectiveId)\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'ADD_EXP':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              exp: action.creature.newTotal,\n              exp_surplus: action.creature.newSurplus\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'UPDATE_STREAK':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              streak_count: action.creature.newCount,\n              streak_timestamp: Date.now(),\n              streak_day: action.creature.newDay\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'LEVEL_UP':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              level: action.creature.level,\n              is_noob: false\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'UPGRADE_MULTIPLIERS':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              difficulty: action.creature.difficulty,\n              multiplier: action.creature.multiplier\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'LEVEL_UPDATES':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              prev_exp_goal: action.creature.prevGoal,\n              exp_goal: action.creature.newGoal\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'UPDATE_POKEBALL':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              pokeball_number: action.creature.newPokeball\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'EVOLVE':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              creature: action.creature.nextCreature\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'DELETE_CREATURE':\n      return { ...state,\n        creatures: state.creatures.filter(creature => creature.id !== action.id)\n      };\n\n    case 'LOG_OUT':\n      return { ...state,\n        accessToken: null,\n        db_id: null,\n        username: null,\n        email: null,\n        password: null,\n        db_password: null,\n        creatures: [],\n        new_day: 0,\n        new_time: 0,\n        refreshed: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;","map":{"version":3,"sources":["/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/reducers/userReducer.js"],"names":["streak","ages","checkCreatureStreak","thisDay","creature","streak_timestamp","streak_day","minDifference","getAge","birthTime","string","currentTime","Date","now","difference","dayDifference","minutes","days","years","Math","round","userReducer","state","action","type","accessToken","user","db_id","username","email","password","db_password","creatures","map","consoleCreature","streak_count","newDay","age","birth_time","new_day","new_time","newTime","local_time","localTime","refreshed","creature_name","purpose","purpose_name","evolutions","difficulty","multiplier","birth_date","pokeball_number","id","level","exp","exp_goal","prev_exp_goal","exp_surplus","objectives","is_noob","current","newEvos","name","objective","text","is_timed","factor","creatureId","filter","obj","objectiveId","newTotal","newSurplus","newCount","prevGoal","newGoal","newPokeball","nextCreature"],"mappings":"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","sourcesContent":["import * as streak from '../modules/streak';\nimport * as ages from '../modules/age';\n\nconst checkCreatureStreak = (thisDay, creature) => {\n  // checks if streak is broken, constant, or needs to be incremented\n\n  const { streak_timestamp, streak_day } = creature;\n\n  if (streak_day === 6) { // Streak continues if current week day is 0 and less than 24 hours passed\n\n    if (thisDay !== 0 && thisDay !== 6) { // Streak broken\n      return 'broken';\n    } else if (thisDay === 0) { // Next week day\n      // if more than 2 days passed; streak is over\n      // else, increment streak count\n\n      const minDifference = getAge(streak_timestamp, false);\n      return minDifference > 2880 ? 'broken' : 'increment';\n    } else { // Same day\n\n      return 'constant';\n    }\n\n  } else { // Streak continues if current week day is streak.timestamp + 1, and if less than 24 hours passed\n    \n    if (thisDay === streak_day + 1) {\n      // if more than 2 days passed; streak is over\n      // else, increment streak count\n\n      const minDifference = getAge(streak_timestamp, false);\n      return minDifference > 2880 ? 'broken' : 'increment';\n    } else if (streak_day === thisDay) { // Same day\n\n      return 'constant';\n    } else {\n      return 'broken';\n    }\n  }\n}\n\nconst getAge = (birthTime, string = true) => {\n  const currentTime = Date.now();\n  const difference = currentTime - birthTime;\n\n  const dayDifference = (difference / 1000) / 86400;\n\n  const minutes = dayDifference * 1440;\n  const days = dayDifference % 365;\n  const years = (dayDifference - days) / 365;\n\n  return string ? `${years} years, and ${Math.round(days)} days old` : minutes;\n}\n\nconst userReducer = (state, action) => {\n  switch(action.type) {\n    case 'LOG_IN':\n      return {\n        ...state,\n        accessToken: action.user.accessToken,\n        db_id: action.user.db_id,\n        username: action.user.username,\n        email: action.user.email,\n        password: action.user.password,\n        db_password: action.user.db_password,\n        creatures: action.user.creatures.map(creature => {\n          // updates streaks (if broken) and ages\n          consoleCreature(creature);\n          return {\n            ...creature,\n            streak_count: (checkCreatureStreak((action.user.newDay, creature)) === 'broken') \n              ? 0 : creature.streak_count,\n            age: (getAge(creature.birth_time)),\n          }\n        }),\n        new_day: action.user.newDay,\n        new_time: action.user.newTime,\n        local_time: action.user.localTime,\n      };\n    case 'POST_LOCAL_CREATURES':\n      return {\n        ...state,\n        creatures: action.creatures.creatures\n      };\n    case 'UPDATE_CREATURES':\n      return {\n        ...state,\n        creatures: action.creatures.creatures\n      };\n    case 'REFRESH_USER':\n      return {\n        ...state,\n        creatures: action.user.creatures,\n        refreshed: true\n      };\n    case 'UPDATE_USER':\n      return {\n        ...state,\n        username: action.user.username,\n        email: action.user.email,\n        password: action.user.password\n      };\n    case 'ADD_CREATURE':\n      return {\n        ...state,\n        creatures: [\n          ...state.creatures,\n          {\n            creature: action.creature.creature,\n            creature_name: action.creature.creature_name,\n            purpose: action.creature.purpose,\n            purpose_name: action.creature.purpose_name,\n            evolutions: action.creature.evolutions,\n            difficulty: action.creature.difficulty,\n            multiplier: action.creature.multiplier,\n            birth_date: action.creature.birth_date,\n            birth_time: action.creature.birth_time,\n            pokeball_number: action.creature.pokeball_number,\n            id: action.creature.id,\n            level: 1,\n            exp: 0,\n            exp_goal: 1,\n            prev_exp_goal: 0,\n            exp_surplus: 0,\n            objectives: [],\n            age: 0,\n            is_noob: true,\n            streak_count: 0,\n            streak_timestamp: Date.now(),\n            streak_day: action.creature.streak_day\n          }\n        ]\n      };\n    case 'UPDATE_CREATURE_INFO':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              creature: action.creature.current,\n              evolutions: action.creature.newEvos,\n              creature_name: action.creature.name\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'ADD_OBJECTIVE':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.id) {\n            return {\n              ...creature,\n              objectives: [\n                ...creature.objectives,\n                {\n                  id: action.objective.id,\n                  text: action.objective.text,\n                  is_timed: action.objective.is_timed,\n                  difficulty: action.objective.difficulty,\n                  factor: action.objective.factor\n                },\n              ],\n            };\n          }\n\n          return creature;\n        })\n      };\n    case 'DELETE_OBJECTIVE':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creatureId) {\n            return {\n              ...creature,\n              objectives: creature.objectives.filter(obj => obj.id !== action.objectiveId)\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'ADD_EXP':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              exp: action.creature.newTotal,\n              exp_surplus: action.creature.newSurplus\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'UPDATE_STREAK':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              streak_count: action.creature.newCount,\n              streak_timestamp: Date.now(),\n              streak_day: action.creature.newDay,\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'LEVEL_UP':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              level: action.creature.level,\n              is_noob: false\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'UPGRADE_MULTIPLIERS':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              difficulty: action.creature.difficulty,\n              multiplier: action.creature.multiplier,\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'LEVEL_UPDATES':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              prev_exp_goal: action.creature.prevGoal,\n              exp_goal: action.creature.newGoal,\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'UPDATE_POKEBALL':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              pokeball_number: action.creature.newPokeball,\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'EVOLVE':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              creature: action.creature.nextCreature,\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'DELETE_CREATURE':\n      return {\n        ...state,\n        creatures: state.creatures.filter(creature => creature.id !== action.id)\n      };\n    case 'LOG_OUT':\n      return {\n        ...state,\n        accessToken: null,\n        db_id: null,\n        username: null,\n        email: null,\n        password: null,\n        db_password: null,\n        creatures: [],\n        new_day: 0,\n        new_time: 0,\n        refreshed: false,\n      };\n    default:\n      return state;\n  }\n}\n\nexport default userReducer;\n"]},"metadata":{},"sourceType":"module"}