{"ast":null,"code":"import * as streak from '../modules/streak';\n\nconst userReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOG_IN':\n      return { ...state,\n        accessToken: action.user.accessToken,\n        db_id: action.user.db_id,\n        username: action.user.username,\n        email: action.user.email,\n        password: action.user.password,\n        creatures: action.user.creatures.map(creature => {\n          // updates streaks (if broken) and ages\n          return { ...creature,\n            streak_count: streak.checkCreatureStreak(action.user.newDay, creature) === 'broken' ? 0 : creature.streak_count,\n            streak_timestamp: streak.checkCreatureStreak(action.user.newDay, creature) === 'broken' ? Date.now() - 86400000 : creature.streak_timestamp,\n            streak_day: streak.checkCreatureStreak(action.user.newDay, creature) === 'broken' ? new Date().getDay() : creature.streak_day,\n            age: streak.getAge(action.user.newTime, creature.birth_time)\n          };\n        }),\n        new_day: action.user.newDay,\n        new_time: action.user.newTime\n      };\n\n    case 'POST_LOCAL_CREATURES':\n      return { ...state,\n        creatures: action.creatures.creatures\n      };\n\n    case 'UPDATE_CREATURES':\n      return { ...state,\n        creatures: action.creatures.creatures\n      };\n\n    case 'REFRESH_USER':\n      return { ...state,\n        username: action.user.username,\n        email: action.user.email,\n        password: action.user.password,\n        creatures: action.user.creatures,\n        updated: true\n      };\n\n    case 'ADD_CREATURE':\n      return { ...state,\n        creatures: [...state.creatures, {\n          creature: action.creature.creature,\n          creature_name: action.creature.creature_name,\n          purpose: action.creature.purpose,\n          purpose_name: action.creature.purpose_name,\n          evolutions: action.creature.evolutions,\n          difficulty: action.creature.difficulty,\n          multiplier: action.creature.multiplier,\n          birth_date: action.creature.birth_date,\n          birth_time: action.creature.birth_time,\n          pokeball_number: action.creature.pokeball_number,\n          id: action.creature.id,\n          level: 1,\n          exp: 0,\n          exp_goal: 1,\n          prev_exp_goal: 0,\n          exp_surplus: 0,\n          objectives: [],\n          age: 0,\n          is_noob: true,\n          streak_count: 0,\n          streak_timestamp: Date.now(),\n          streak_day: action.creature.streak_day\n        }]\n      };\n\n    case 'UPDATE_CREATURE_INFO':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              creature: action.creature.current,\n              evolutions: action.creature.newEvos,\n              creature_name: action.creature.name\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'ADD_OBJECTIVE':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.id) {\n            return { ...creature,\n              objectives: [...creature.objectives, {\n                id: action.objective.id,\n                text: action.objective.text,\n                is_timed: action.objective.is_timed,\n                difficulty: action.objective.difficulty,\n                factor: action.objective.factor\n              }]\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'DELETE_OBJECTIVE':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creatureId) {\n            return { ...creature,\n              objectives: creature.objectives.filter(obj => obj.id !== action.objectiveId)\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'ADD_EXP':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              exp: action.creature.newTotal,\n              exp_surplus: action.creature.newSurplus\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'UPDATE_STREAK':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              streak_count: action.creature.newCount,\n              streak_timestamp: Date.now(),\n              streak_day: new Date().getDay()\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'LEVEL_UP':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              level: action.creature.level,\n              is_noob: false\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'UPGRADE_MULTIPLIERS':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              difficulty: action.creature.difficulty,\n              multiplier: action.creature.multiplier\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'LEVEL_UPDATES':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              prev_exp_goal: action.creature.prevGoal,\n              exp_goal: action.creature.newGoal\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'UPDATE_POKEBALL':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              pokeball_number: action.creature.newPokeball\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'EVOLVE':\n      return { ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return { ...creature,\n              creature: action.creature.nextCreature\n            };\n          }\n\n          return creature;\n        })\n      };\n\n    case 'DELETE_CREATURE':\n      return { ...state,\n        creatures: state.creatures.filter(creature => creature.id !== action.id)\n      };\n\n    case 'LOG_OUT':\n      return { ...state,\n        accessToken: null,\n        db_id: null,\n        username: null,\n        email: null,\n        password: null,\n        creatures: [],\n        newDay: 0,\n        newTime: 0,\n        updated: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;","map":{"version":3,"sources":["/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/reducers/userReducer.js"],"names":["streak","userReducer","state","action","type","accessToken","user","db_id","username","email","password","creatures","map","creature","streak_count","checkCreatureStreak","newDay","streak_timestamp","Date","now","streak_day","getDay","age","getAge","newTime","birth_time","new_day","new_time","updated","creature_name","purpose","purpose_name","evolutions","difficulty","multiplier","birth_date","pokeball_number","id","level","exp","exp_goal","prev_exp_goal","exp_surplus","objectives","is_noob","current","newEvos","name","objective","text","is_timed","factor","creatureId","filter","obj","objectiveId","newTotal","newSurplus","newCount","prevGoal","newGoal","newPokeball","nextCreature"],"mappings":"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","sourcesContent":["import * as streak from '../modules/streak';\n\nconst userReducer = (state, action) => {\n  switch(action.type) {\n    case 'LOG_IN':\n      return {\n        ...state,\n        accessToken: action.user.accessToken,\n        db_id: action.user.db_id,\n        username: action.user.username,\n        email: action.user.email,\n        password: action.user.password,\n        creatures: action.user.creatures.map(creature => {\n          // updates streaks (if broken) and ages\n          return {\n            ...creature,\n            streak_count: (streak.checkCreatureStreak(action.user.newDay, creature) === 'broken') \n              ? 0 : creature.streak_count,\n            streak_timestamp: (streak.checkCreatureStreak(action.user.newDay, creature) === 'broken') \n              ? Date.now() - 86400000 : creature.streak_timestamp,\n            streak_day: (streak.checkCreatureStreak(action.user.newDay, creature) === 'broken') \n              ? (new Date()).getDay() : creature.streak_day,\n            age: (streak.getAge(action.user.newTime, creature.birth_time)),\n          }\n        }),\n        new_day: action.user.newDay,\n        new_time: action.user.newTime,\n      };\n    case 'POST_LOCAL_CREATURES':\n      return {\n        ...state,\n        creatures: action.creatures.creatures\n      };\n    case 'UPDATE_CREATURES':\n      return {\n        ...state,\n        creatures: action.creatures.creatures\n      };\n    case 'REFRESH_USER':\n      return {\n        ...state,\n        username: action.user.username,\n        email: action.user.email,\n        password: action.user.password,\n        creatures: action.user.creatures,\n        updated: true\n      };\n    case 'ADD_CREATURE':\n      return {\n        ...state,\n        creatures: [\n          ...state.creatures,\n          {\n            creature: action.creature.creature,\n            creature_name: action.creature.creature_name,\n            purpose: action.creature.purpose,\n            purpose_name: action.creature.purpose_name,\n            evolutions: action.creature.evolutions,\n            difficulty: action.creature.difficulty,\n            multiplier: action.creature.multiplier,\n            birth_date: action.creature.birth_date,\n            birth_time: action.creature.birth_time,\n            pokeball_number: action.creature.pokeball_number,\n            id: action.creature.id,\n            level: 1,\n            exp: 0,\n            exp_goal: 1,\n            prev_exp_goal: 0,\n            exp_surplus: 0,\n            objectives: [],\n            age: 0,\n            is_noob: true,\n            streak_count: 0,\n            streak_timestamp: Date.now(),\n            streak_day: action.creature.streak_day\n          }\n        ]\n      };\n    case 'UPDATE_CREATURE_INFO':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              creature: action.creature.current,\n              evolutions: action.creature.newEvos,\n              creature_name: action.creature.name\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'ADD_OBJECTIVE':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.id) {\n            return {\n              ...creature,\n              objectives: [\n                ...creature.objectives,\n                {\n                  id: action.objective.id,\n                  text: action.objective.text,\n                  is_timed: action.objective.is_timed,\n                  difficulty: action.objective.difficulty,\n                  factor: action.objective.factor\n                },\n              ],\n            };\n          }\n\n          return creature;\n        })\n      };\n    case 'DELETE_OBJECTIVE':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creatureId) {\n            return {\n              ...creature,\n              objectives: creature.objectives.filter(obj => obj.id !== action.objectiveId)\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'ADD_EXP':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              exp: action.creature.newTotal,\n              exp_surplus: action.creature.newSurplus\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'UPDATE_STREAK':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              streak_count: action.creature.newCount,\n              streak_timestamp: Date.now(),\n              streak_day: (new Date()).getDay()\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'LEVEL_UP':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              level: action.creature.level,\n              is_noob: false\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'UPGRADE_MULTIPLIERS':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              difficulty: action.creature.difficulty,\n              multiplier: action.creature.multiplier,\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'LEVEL_UPDATES':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              prev_exp_goal: action.creature.prevGoal,\n              exp_goal: action.creature.newGoal,\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'UPDATE_POKEBALL':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              pokeball_number: action.creature.newPokeball,\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'EVOLVE':\n      return {\n        ...state,\n        creatures: state.creatures.map(creature => {\n          if (creature.id === action.creature.id) {\n            return {\n              ...creature,\n              creature: action.creature.nextCreature,\n            }\n          }\n\n          return creature;\n        })\n      };\n    case 'DELETE_CREATURE':\n      return {\n        ...state,\n        creatures: state.creatures.filter(creature => creature.id !== action.id)\n      };\n    case 'LOG_OUT':\n      return {\n        ...state,\n        accessToken: null,\n        db_id: null,\n        username: null,\n        email: null,\n        password: null,\n        creatures: [],\n        newDay: 0,\n        newTime: 0,\n        updated: false,\n      };\n    default:\n      return state;\n  }\n}\n\nexport default userReducer;\n"]},"metadata":{},"sourceType":"module"}