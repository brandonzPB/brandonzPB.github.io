{"ast":null,"code":"var _jsxFileName = \"/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/contexts/CreatureContext.js\";\nimport React, { useState, useReducer, useEffect, createContext } from 'react';\nimport creatureReducer from '../reducers/creatureReducer';\nimport * as objective from '../modules/objective';\nimport * as streakTime from '../modules/age';\nimport creatureService from '../services/creatureService';\nexport const CreatureContext = createContext();\n\nconst CreatureContextProvider = props => {\n  const [creatures, dispatch] = useReducer(creatureReducer, [], () => {\n    const storedCreatures = localStorage.getItem('my-user');\n    return storedCreatures ? JSON.parse(storedCreatures.creatures) : [];\n  });\n  const [currentId, setCurrentId] = useState('');\n  const [play, setPlay] = useState(false);\n  const [formDisplay, setFormDisplay] = useState(true);\n  const [expUpdate, setExpUpdate] = useState(false); // Remove this hook once user is able to log in\n  // And creatures are stored to database under account\n  // useEffect(() => {\n  //   localStorage.setItem('my-creatures', JSON.stringify(creatures));\n  // }, [creatures]);\n\n  const getExp = (creature, habit, time) => {\n    if (creature.isNoob) return getFirstExp(creature);\n    const streakCount = creature.streak ? creature.streak.count : 0;\n    const newExp = objective.calcExp(creature.multiplier, streakCount, habit.difficulty, time);\n    const newTotal = creature.exp + newExp;\n    const newSurplus = newTotal >= creature.expGoal ? newTotal - creature.expGoal : creature.expSurplus + newExp;\n    dispatch({\n      type: 'ADD_EXP',\n      creature: {\n        id: creature.id,\n        newTotal,\n        newSurplus\n      }\n    });\n    return creature;\n  };\n\n  const getFirstExp = creature => {\n    const newTotal = 1;\n    const newSurplus = 0;\n    dispatch({\n      type: 'ADD_EXP',\n      creature: {\n        id: creature.id,\n        newTotal,\n        newSurplus\n      }\n    });\n    return creature;\n  };\n\n  const toggleExpUpdate = () => {\n    setExpUpdate(!expUpdate);\n  };\n\n  const toggleFormDisplay = () => {\n    setFormDisplay(!formDisplay);\n  };\n\n  const sendCreatureId = id => {\n    return setCurrentId(id);\n  };\n\n  const togglePlay = () => {\n    setPlay(!play);\n  };\n\n  const checkObjectiveText = (creatureId, text) => {\n    const creatureInfo = creatures.filter(being => being.id === creatureId);\n    const objectiveIndex = creatureInfo[0].objectives.findIndex(item => item.text.toLowerCase() === text.toLowerCase());\n    return objectiveIndex >= 0 ? true : false;\n  };\n\n  return /*#__PURE__*/React.createElement(CreatureContext.Provider, {\n    value: {\n      creatures,\n      currentId,\n      play,\n      togglePlay,\n      formDisplay,\n      toggleFormDisplay,\n      expUpdate,\n      toggleExpUpdate,\n      dispatch,\n      sendCreatureId,\n      getExp,\n      checkObjectiveText\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default CreatureContextProvider;","map":{"version":3,"sources":["/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/contexts/CreatureContext.js"],"names":["React","useState","useReducer","useEffect","createContext","creatureReducer","objective","streakTime","creatureService","CreatureContext","CreatureContextProvider","props","creatures","dispatch","storedCreatures","localStorage","getItem","JSON","parse","currentId","setCurrentId","play","setPlay","formDisplay","setFormDisplay","expUpdate","setExpUpdate","getExp","creature","habit","time","isNoob","getFirstExp","streakCount","streak","count","newExp","calcExp","multiplier","difficulty","newTotal","exp","newSurplus","expGoal","expSurplus","type","id","toggleExpUpdate","toggleFormDisplay","sendCreatureId","togglePlay","checkObjectiveText","creatureId","text","creatureInfo","filter","being","objectiveIndex","objectives","findIndex","item","toLowerCase","children"],"mappings":"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","sourcesContent":["import React, { useState, useReducer, useEffect, createContext } from 'react';\nimport creatureReducer from '../reducers/creatureReducer';\nimport * as objective from '../modules/objective'\nimport * as streakTime from '../modules/age';\nimport creatureService from '../services/creatureService';\n\nexport const CreatureContext = createContext();\n\nconst CreatureContextProvider = (props) => {\n  const [creatures, dispatch] = useReducer(creatureReducer, [], () => {\n    const storedCreatures = localStorage.getItem('my-user');\n    return storedCreatures ? JSON.parse(storedCreatures.creatures) : [];\n  });\n\n  const [currentId, setCurrentId] = useState('');\n  const [play, setPlay] = useState(false);\n  const [formDisplay, setFormDisplay] = useState(true);\n  const [expUpdate, setExpUpdate] = useState(false);\n\n  // Remove this hook once user is able to log in\n  // And creatures are stored to database under account\n  // useEffect(() => {\n  //   localStorage.setItem('my-creatures', JSON.stringify(creatures));\n  // }, [creatures]);\n\n  const getExp = (creature, habit, time) => { \n    if (creature.isNoob) return getFirstExp(creature);\n\n    const streakCount = creature.streak ? creature.streak.count : 0;\n\n    const newExp = objective.calcExp(creature.multiplier, streakCount, habit.difficulty, time);\n    const newTotal = creature.exp + newExp;\n\n    const newSurplus = (newTotal >= creature.expGoal) ? \n      newTotal - creature.expGoal :\n      creature.expSurplus + newExp;\n\n    dispatch({ type: 'ADD_EXP', creature: {\n      id: creature.id,\n      newTotal,\n      newSurplus\n    }});\n\n    return creature;\n  }\n\n  const getFirstExp = creature => {\n    const newTotal = 1;\n    const newSurplus = 0;\n\n    dispatch({ type: 'ADD_EXP', creature: { id: creature.id, newTotal, newSurplus } });\n\n    return creature;\n  }\n\n  const toggleExpUpdate = () => {\n    setExpUpdate(!expUpdate);\n  }\n\n  const toggleFormDisplay = () => {\n    setFormDisplay(!formDisplay);\n  }\n\n  const sendCreatureId = id => {\n    return setCurrentId(id);\n  }\n\n  const togglePlay = () => {\n    setPlay(!play);\n  }\n\n  const checkObjectiveText = (creatureId, text) => {\n    const creatureInfo = creatures.filter(being => being.id === creatureId);\n\n    const objectiveIndex = creatureInfo[0].objectives.findIndex(item => item.text.toLowerCase() === text.toLowerCase());\n    return (objectiveIndex >= 0) ? true : false;\n  }\n\n  return (\n    <CreatureContext.Provider \n      value={{\n        creatures, \n        currentId,\n        play,\n        togglePlay,\n        formDisplay,\n        toggleFormDisplay,\n        expUpdate,\n        toggleExpUpdate,\n        dispatch,\n        sendCreatureId,\n        getExp,\n        checkObjectiveText,\n      }}>\n      {props.children}\n    </CreatureContext.Provider>\n  )\n}\n\nexport default CreatureContextProvider;\n"]},"metadata":{},"sourceType":"module"}