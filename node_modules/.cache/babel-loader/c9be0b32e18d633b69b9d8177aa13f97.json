{"ast":null,"code":"var _jsxFileName = \"/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/contexts/UserContext.js\";\nimport React, { useState, useReducer, createContext, useEffect } from 'react';\nimport userService from '../services/userService';\nimport creatureService from '../services/creatureService';\nimport userReducer from '../reducers/userReducer';\nexport const UserContext = createContext();\n\nconst UserContextProvider = props => {\n  const [user, userDispatch] = useReducer(userReducer, {}, () => {\n    const storedUser = localStorage.getItem('my-user');\n    return storedUser ? JSON.parse(storedUser) : {};\n  });\n  const [error, setError] = useState({\n    error: null\n  });\n  const [reset, setReset] = useState({\n    resetToken: '',\n    email: ''\n  });\n  useEffect(() => {\n    localStorage.setItem('my-user', JSON.stringify(user));\n    console.log('user', user);\n    console.log(user.accessToken);\n  }, [user]);\n  useEffect(() => {\n    localStorage.setItem('my-reset', JSON.stringify(reset));\n  }, [reset]); // POST new user\n\n  const addUser = async userObject => {\n    userService.createUser(userObject).then(res => {\n      if (res === false) {\n        setError({ ...error,\n          error: true\n        });\n      } else {\n        setError({ ...error,\n          error: null\n        });\n      }\n    }).catch(err => console.error(err));\n  }; // GET localStorage creatures\n\n\n  const getLocalCreatures = () => {\n    const creatureStorage = localStorage.getItem('my-creatures');\n    return creatureStorage ? JSON.parse(creatureStorage) : [];\n  }; // POST localStorage creatures\n\n\n  const postLocalCreatures = async (userId, creatures, token) => {\n    await userService.storeLocalCreatures(userId, creatures, token).then(res => res).catch(err => console.error(err));\n    userDispatch({\n      type: 'POST_LOCAL_CREATURES',\n      creatures: {\n        creatures\n      }\n    });\n  };\n\n  const refreshUser = () => {\n    console.log('Refreshing!');\n    userService.readUser(user.db_id, user.accessToken).then(res => {\n      console.log(res);\n      userDispatch({\n        type: 'REFRESH_USER',\n        user: {\n          username: res.user.username,\n          email: res.user.email,\n          password: res.user.password,\n          db_id: user.db_id,\n          accessToken: user.accessToken,\n          creatures: res.user_creatures\n        }\n      });\n      return res;\n    }).catch(err => console.error(err));\n  };\n\n  const updateUser = method => {\n    console.log('Updating user...');\n    userService.updateUser(method, user.db_id, user, user.accessToken).then(res => res).catch(err => console.error(err));\n  }; // GET user info\n\n\n  const getUserInfo = async (res, password) => {\n    console.log('Successfully logged in', res.db_id, res.accessToken);\n    const storedCreatures = await getLocalCreatures();\n    console.log(storedCreatures);\n\n    if (storedCreatures.length >= 1) {\n      postLocalCreatures(res.db_id, storedCreatures, res.accessToken);\n      console.log('Retrieved localStorage creatures');\n      localStorage.removeItem('my-creatures');\n      console.log('Cleared \\'my-creatures\\' from localStorage');\n    }\n\n    await userService.readUser(res.db_id, res.accessToken).then(response => {\n      console.log(response);\n      userDispatch({\n        type: 'LOG_IN',\n        user: {\n          username: response.user.username,\n          email: response.user.email,\n          password,\n          db_password: response.user.password,\n          db_id: res.db_id,\n          accessToken: res.accessToken,\n          creatures: storedCreatures.length >= 1 ? storedCreatures : response.user_creatures,\n          newDay: response.new_day,\n          newTime: response.new_time\n        }\n      });\n      console.log('Successfully retrieved user data');\n    }).catch(err => console.error(err));\n  }; // POST user login\n\n\n  const login = async userObject => {\n    const {\n      username,\n      password\n    } = userObject;\n    localStorage.removeItem('my-reset');\n    localStorage.removeItem('my-user');\n    await userService.login({\n      username,\n      password\n    }).then(res => {\n      return getUserInfo(res, password);\n    }).catch(err => {\n      console.error(err);\n    });\n  }; // DELETE user\n\n\n  const removeUser = () => {\n    console.log('Deleting user...');\n    localStorage.removeItem('my-user');\n    localStorage.removeItem('my-reset');\n    userService.deleteUser(user.db_id, user, user.accessToken).then(res => res).catch(err => console.error(err));\n    console.log('Successfully deleted user');\n  }; // LOG OUT\n\n\n  const logout = () => {\n    userDispatch({\n      type: 'LOG_OUT'\n    });\n    localStorage.removeItem('my-reset');\n    localStorage.removeItem('my-user');\n  };\n\n  return /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: {\n      user,\n      userDispatch,\n      refreshUser,\n      updateUser,\n      error,\n      setError,\n      reset,\n      setReset,\n      addUser,\n      login,\n      postLocalCreatures,\n      removeUser,\n      logout\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default UserContextProvider;","map":{"version":3,"sources":["/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/contexts/UserContext.js"],"names":["React","useState","useReducer","createContext","useEffect","userService","creatureService","userReducer","UserContext","UserContextProvider","props","user","userDispatch","storedUser","localStorage","getItem","JSON","parse","error","setError","reset","setReset","resetToken","email","setItem","stringify","console","log","accessToken","addUser","userObject","createUser","then","res","catch","err","getLocalCreatures","creatureStorage","postLocalCreatures","userId","creatures","token","storeLocalCreatures","type","refreshUser","readUser","db_id","username","password","user_creatures","updateUser","method","getUserInfo","storedCreatures","length","removeItem","response","db_password","newDay","new_day","newTime","new_time","login","removeUser","deleteUser","logout","children"],"mappings":"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","sourcesContent":["import React, { useState, useReducer, createContext, useEffect } from 'react';\nimport userService from '../services/userService';\nimport creatureService from '../services/creatureService';\nimport userReducer from '../reducers/userReducer';\n\nexport const UserContext = createContext();\n\nconst UserContextProvider = (props) => {\n  const [user, userDispatch] = useReducer(userReducer, {}, () => {\n    const storedUser = localStorage.getItem('my-user');\n    return storedUser ? JSON.parse(storedUser) : {};\n  });\n\n  const [error, setError] = useState({ error: null });\n\n  const [reset, setReset] = useState({\n    resetToken: '',\n    email: '',\n  });\n\n  useEffect(() => {\n    localStorage.setItem('my-user', JSON.stringify(user));\n\n    console.log('user', user);\n    console.log(user.accessToken);\n  }, [user]);\n\n  useEffect(() => {\n    localStorage.setItem('my-reset', JSON.stringify(reset));\n  }, [reset]);\n\n  // POST new user\n  const addUser = async (userObject) => {\n\n    userService.createUser(userObject)\n      .then(res => {\n        if (res === false) {\n          setError({\n            ...error,\n            error: true\n          });\n        } else {\n          setError({\n            ...error,\n            error: null\n          });\n        }\n      })\n      .catch(err => console.error(err));\n  }\n\n  // GET localStorage creatures\n  const getLocalCreatures = () => {\n    const creatureStorage = localStorage.getItem('my-creatures');\n    \n    return creatureStorage ? JSON.parse(creatureStorage) : [];\n  }\n\n  // POST localStorage creatures\n  const postLocalCreatures = async (userId, creatures, token) => {\n    await userService\n      .storeLocalCreatures(userId, creatures, token)\n      .then(res => res)\n      .catch(err => console.error(err));\n\n    userDispatch({ type: 'POST_LOCAL_CREATURES', creatures: { creatures }});\n  }\n\n  const refreshUser = () => {\n    console.log('Refreshing!');\n\n    userService.readUser(user.db_id, user.accessToken)\n      .then(res => {\n        console.log(res);\n\n        userDispatch({ type: 'REFRESH_USER', user: {\n          username: res.user.username,\n          email: res.user.email,\n          password: res.user.password,\n          db_id: user.db_id,\n          accessToken: user.accessToken,\n          creatures: res.user_creatures\n        }});\n\n        return res;\n      })\n      .catch(err => console.error(err));\n  }\n\n  const updateUser = (method) => {\n    console.log('Updating user...');\n\n    userService.updateUser(method, user.db_id, user, user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n  }\n\n  // GET user info\n  const getUserInfo = async (res, password) => {\n    console.log('Successfully logged in', res.db_id, res.accessToken);\n\n    const storedCreatures = await getLocalCreatures();\n\n    console.log(storedCreatures);\n\n    if (storedCreatures.length >= 1) {\n      postLocalCreatures(res.db_id, storedCreatures, res.accessToken);\n      console.log('Retrieved localStorage creatures');\n\n      localStorage.removeItem('my-creatures');\n      console.log('Cleared \\'my-creatures\\' from localStorage');\n    }\n\n    await userService.readUser(res.db_id, res.accessToken)\n      .then(response => {\n        console.log(response);\n\n        userDispatch({ type: 'LOG_IN', user: {\n          username: response.user.username,\n          email: response.user.email,\n          password,\n          db_password: response.user.password,\n          db_id: res.db_id,\n          accessToken: res.accessToken,\n          creatures: storedCreatures.length >= 1 ? storedCreatures : response.user_creatures,\n          newDay: response.new_day,\n          newTime: response.new_time,\n        }});\n\n        console.log('Successfully retrieved user data');\n      })\n      .catch(err => console.error(err));\n  }\n\n  // POST user login\n  const login = async (userObject) => {\n    const { username, password } = userObject;\n\n    localStorage.removeItem('my-reset');\n    localStorage.removeItem('my-user');\n\n    await userService.login({ \n      username, \n      password \n    })\n      .then(res => { \n        return getUserInfo(res, password); \n      })\n      .catch(err => {\n        console.error(err);\n      });\n  }\n\n  // DELETE user\n  const removeUser = () => {\n    console.log('Deleting user...');\n    \n    localStorage.removeItem('my-user');\n    localStorage.removeItem('my-reset');\n\n    userService.deleteUser(user.db_id, user, user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n\n    console.log('Successfully deleted user');\n  }\n\n  // LOG OUT\n  const logout = () => {\n    userDispatch({ type: 'LOG_OUT' });\n    localStorage.removeItem('my-reset');\n    localStorage.removeItem('my-user');\n  }\n\n  return (\n    <UserContext.Provider value={{\n      user,\n      userDispatch,\n      refreshUser,\n      updateUser,\n      error,\n      setError,\n      reset,\n      setReset,\n      addUser,\n      login,\n      postLocalCreatures,\n      removeUser,\n      logout,\n    }}>\n      {props.children}\n    </UserContext.Provider>\n  )\n}\n\nexport default UserContextProvider;\n"]},"metadata":{},"sourceType":"module"}