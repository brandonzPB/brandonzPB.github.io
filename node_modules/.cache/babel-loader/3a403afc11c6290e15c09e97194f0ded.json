{"ast":null,"code":"var _jsxFileName = \"/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/contexts/CreatureContext.js\";\nimport React, { useState, useReducer, useEffect, useContext, createContext } from 'react';\nimport creatureReducer from '../reducers/creatureReducer';\nimport * as objective from '../modules/objective';\nimport * as streakTime from '../modules/age';\nimport creatureService from '../services/creatureService';\nimport { UserContext } from './UserContext';\nexport const CreatureContext = createContext();\n\nconst CreatureContextProvider = props => {\n  const {\n    user,\n    userDispatch\n  } = useContext(UserContext);\n  const [creatures, dispatch] = useReducer(creatureReducer, user.creatures); //   const creatures = localStorage.getItem('my-user');\n  //   const storedCreatures = creatures ? JSON.parse(creatures) : [];\n  //   return storedCreatures.creatures;\n  // });\n\n  useEffect(() => {\n    console.log('creatures', creatures);\n  }, []);\n  /* useEffect(() => {\n    userDispatch({ type: 'UPDATE_CREATURES', creatures: { creatures: creatures }});\n    localStorage.setItem('my-user', JSON.stringify(user));\n  }, [creatures]); */\n\n  /* const [creatures, dispatch] = useReducer(creatureReducer, [], () => {\n    const storedCreatures = localStorage.getItem('my-creatures');\n    return storedCreatures ? JSON.parse(storedCreatures) : [];\n  });\n   useEffect(() => {\n    localStorage.setItem('my-creatures', JSON.stringify(creatures));\n  }, [creatures]); */\n\n  const [currentId, setCurrentId] = useState('');\n  const [play, setPlay] = useState(false);\n  const [formDisplay, setFormDisplay] = useState(true);\n  const [expUpdate, setExpUpdate] = useState(false); // CREATE creature\n\n  const createCreature = creatureObject => {\n    console.log('creatures', creatures);\n    console.log('creature', creatureObject);\n    creatureService.createCreature(user.db_id, creatureObject, user.accessToken).then(res => res).catch(err => console.error(err));\n    console.log('Successfully added creature');\n  }; // UPDATE creature stats\n\n\n  const updateCreatureStats = async creatureId => {\n    const creature = creatures.filter(being => being.id === creatureId);\n    await creatureService.updateCreatureStats(user.db_id, creatureId, creature, user.accessToken).then(res => res).catch(err => console.error(err));\n    dispatch({\n      type: 'UPDATE_CREATURE',\n      creature: {\n        exp: creature.exp,\n        exp_goal: creature.exp_goal,\n        exp_surplus: creature.exp_surplus,\n        prev_exp_goal: creature.prev_exp_goal,\n        difficulty: creature.difficulty,\n        multiplier: creature.multiplier,\n        pokeball_number: creature.pokeball_number\n      }\n    });\n    console.log('Successfully added creature');\n  }; // UPDATE creature objectives\n\n\n  const updateCreatureObjectves = async creatureId => {\n    const creature = creatures.filter(being => being.id === creatureId);\n    await creatureService.updateCreatureObjectves(user.db_id, creatureId, creature, user.accessToken).then(res => res).catch(err => console.error(err));\n    dispatch({\n      type: 'UPDATE_CREATURE',\n      creature: {\n        objectives: creature.objectives\n      }\n    });\n    console.log('Successfully added creature');\n  }; // UPDATE creature info\n\n\n  const updateCreatureInfo = async creatureId => {\n    const creature = creatures.filter(being => being.id === creatureId);\n    await creatureService.updateCreatureObjectves(user.db_id, creatureId, creature, user.accessToken).then(res => res).catch(err => console.error(err));\n    dispatch({\n      type: 'UPDATE_CREATURE',\n      creature: {\n        creature_name: creature.creature_name,\n        evolutions: creature.evolutions\n      }\n    });\n    console.log('Successfully added creature');\n  }; // DELETE creature\n\n\n  const deleteCreature = async creatureId => {\n    const creature = user.creatures.filter(being => being.id === creatureId);\n    await creatureService.deleteCreature(user.db_id, creature._id, creature, user.accessToken).then(res => res).catch(err => console.error(err));\n    dispatch({\n      type: 'DELETE_CREATURE',\n      creature: {\n        creature\n      }\n    });\n    console.log('Successfully deleted creature: ' + creature);\n  };\n\n  const getExp = (creature, habit, time) => {\n    if (creature.is_noob) return getFirstExp(creature);\n    const streakCount = creature.streak_count;\n    const newExp = objective.calcExp(creature.multiplier, streakCount, habit.difficulty, time);\n    const newTotal = creature.exp + newExp;\n    const newSurplus = newTotal >= creature.exp_goal ? newTotal - creature.exp_goal : creature.exp_surplus + newExp;\n    dispatch({\n      type: 'ADD_EXP',\n      creature: {\n        id: creature.id,\n        newTotal,\n        newSurplus\n      }\n    });\n    return creature;\n  };\n\n  const getFirstExp = creature => {\n    const newTotal = 1;\n    const newSurplus = 0;\n    dispatch({\n      type: 'ADD_EXP',\n      creature: {\n        id: creature.id,\n        newTotal,\n        newSurplus\n      }\n    });\n    return creature;\n  };\n\n  const toggleExpUpdate = () => {\n    setExpUpdate(!expUpdate);\n  };\n\n  const toggleFormDisplay = () => {\n    setFormDisplay(!formDisplay);\n  };\n\n  const sendCreatureId = id => {\n    return setCurrentId(id);\n  };\n\n  const togglePlay = () => {\n    setPlay(!play);\n  };\n\n  const checkObjectiveText = (creatureId, text) => {\n    const creatureInfo = creatures.filter(being => being.id === creatureId);\n    const objectiveIndex = creatureInfo[0].objectives.findIndex(item => item.text.toLowerCase() === text.toLowerCase());\n    return objectiveIndex >= 0 ? true : false;\n  };\n\n  return /*#__PURE__*/React.createElement(CreatureContext.Provider, {\n    value: {\n      creatures,\n      createCreature,\n      updateCreatureStats,\n      updateCreatureObjectves,\n      updateCreatureInfo,\n      deleteCreature,\n      currentId,\n      play,\n      togglePlay,\n      formDisplay,\n      toggleFormDisplay,\n      expUpdate,\n      toggleExpUpdate,\n      dispatch,\n      sendCreatureId,\n      getExp,\n      checkObjectiveText\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default CreatureContextProvider;","map":{"version":3,"sources":["/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/contexts/CreatureContext.js"],"names":["React","useState","useReducer","useEffect","useContext","createContext","creatureReducer","objective","streakTime","creatureService","UserContext","CreatureContext","CreatureContextProvider","props","user","userDispatch","creatures","dispatch","console","log","currentId","setCurrentId","play","setPlay","formDisplay","setFormDisplay","expUpdate","setExpUpdate","createCreature","creatureObject","db_id","accessToken","then","res","catch","err","error","updateCreatureStats","creatureId","creature","filter","being","id","type","exp","exp_goal","exp_surplus","prev_exp_goal","difficulty","multiplier","pokeball_number","updateCreatureObjectves","objectives","updateCreatureInfo","creature_name","evolutions","deleteCreature","_id","getExp","habit","time","is_noob","getFirstExp","streakCount","streak_count","newExp","calcExp","newTotal","newSurplus","toggleExpUpdate","toggleFormDisplay","sendCreatureId","togglePlay","checkObjectiveText","text","creatureInfo","objectiveIndex","findIndex","item","toLowerCase","children"],"mappings":"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","sourcesContent":["import React, { useState, useReducer, useEffect, useContext, createContext } from 'react';\nimport creatureReducer from '../reducers/creatureReducer';\nimport * as objective from '../modules/objective'\nimport * as streakTime from '../modules/age';\nimport creatureService from '../services/creatureService';\nimport { UserContext } from './UserContext';\n\nexport const CreatureContext = createContext();\n\nconst CreatureContextProvider = (props) => {\n  const { user, userDispatch } = useContext(UserContext);\n\n  const [creatures, dispatch] = useReducer(creatureReducer, user.creatures);\n  //   const creatures = localStorage.getItem('my-user');\n  //   const storedCreatures = creatures ? JSON.parse(creatures) : [];\n  //   return storedCreatures.creatures;\n  // });\n\n  useEffect(() => {\n    console.log('creatures', creatures)\n  }, [])\n\n  /* useEffect(() => {\n    userDispatch({ type: 'UPDATE_CREATURES', creatures: { creatures: creatures }});\n    localStorage.setItem('my-user', JSON.stringify(user));\n  }, [creatures]); */\n\n  /* const [creatures, dispatch] = useReducer(creatureReducer, [], () => {\n    const storedCreatures = localStorage.getItem('my-creatures');\n    return storedCreatures ? JSON.parse(storedCreatures) : [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem('my-creatures', JSON.stringify(creatures));\n  }, [creatures]); */\n\n  const [currentId, setCurrentId] = useState('');\n  const [play, setPlay] = useState(false);\n  const [formDisplay, setFormDisplay] = useState(true);\n  const [expUpdate, setExpUpdate] = useState(false);\n\n  // CREATE creature\n  const createCreature = creatureObject => {\n    console.log('creatures', creatures);\n\n    console.log('creature', creatureObject);\n\n    creatureService.createCreature(user.db_id, creatureObject, user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n\n    console.log('Successfully added creature');\n  }\n\n  // UPDATE creature stats\n  const updateCreatureStats = async (creatureId) => {\n    const creature = creatures.filter(being => being.id === creatureId);\n\n    await creatureService.updateCreatureStats(user.db_id, creatureId, creature, user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n\n    dispatch({ type: 'UPDATE_CREATURE', creature: {\n      exp: creature.exp,\n      exp_goal: creature.exp_goal,\n      exp_surplus: creature.exp_surplus,\n      prev_exp_goal: creature.prev_exp_goal,\n      difficulty: creature.difficulty,\n      multiplier: creature.multiplier,\n      pokeball_number: creature.pokeball_number,\n    }});\n\n    console.log('Successfully added creature');\n  }\n\n  // UPDATE creature objectives\n  const updateCreatureObjectves = async (creatureId) => {\n    const creature = creatures.filter(being => being.id === creatureId);\n\n    await creatureService.updateCreatureObjectves(user.db_id, creatureId, creature, user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n\n    dispatch({ type: 'UPDATE_CREATURE', creature: {\n      objectives: creature.objectives,\n    }});\n\n    console.log('Successfully added creature');\n  }\n\n  // UPDATE creature info\n  const updateCreatureInfo = async (creatureId) => {\n    const creature = creatures.filter(being => being.id === creatureId);\n\n    await creatureService.updateCreatureObjectves(user.db_id, creatureId, creature, user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n\n    dispatch({ type: 'UPDATE_CREATURE', creature: {\n      creature_name: creature.creature_name,\n      evolutions: creature.evolutions,\n    }});\n\n    console.log('Successfully added creature');\n  }\n\n  // DELETE creature\n  const deleteCreature = async (creatureId) => {\n    const creature = user.creatures.filter(being => being.id === creatureId);\n\n    await creatureService.deleteCreature(user.db_id, creature._id, creature, user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n    \n    dispatch({ type: 'DELETE_CREATURE', creature: { creature }});\n\n    console.log('Successfully deleted creature: ' + creature);\n  }\n\n  const getExp = (creature, habit, time) => { \n    if (creature.is_noob) return getFirstExp(creature);\n\n    const streakCount = creature.streak_count;\n\n    const newExp = objective.calcExp(creature.multiplier, streakCount, habit.difficulty, time);\n    const newTotal = creature.exp + newExp;\n\n    const newSurplus = (newTotal >= creature.exp_goal) ? \n      newTotal - creature.exp_goal :\n      creature.exp_surplus + newExp;\n\n    dispatch({ type: 'ADD_EXP', creature: {\n      id: creature.id,\n      newTotal,\n      newSurplus\n    }});\n\n    return creature;\n  }\n\n  const getFirstExp = creature => {\n    const newTotal = 1;\n    const newSurplus = 0;\n\n    dispatch({ type: 'ADD_EXP', creature: { id: creature.id, newTotal, newSurplus } });\n\n    return creature;\n  }\n\n  const toggleExpUpdate = () => {\n    setExpUpdate(!expUpdate);\n  }\n\n  const toggleFormDisplay = () => {\n    setFormDisplay(!formDisplay);\n  }\n\n  const sendCreatureId = id => {\n    return setCurrentId(id);\n  }\n\n  const togglePlay = () => {\n    setPlay(!play);\n  }\n\n  const checkObjectiveText = (creatureId, text) => {\n    const creatureInfo = creatures.filter(being => being.id === creatureId);\n\n    const objectiveIndex = creatureInfo[0].objectives.findIndex(item => item.text.toLowerCase() === text.toLowerCase());\n    return (objectiveIndex >= 0) ? true : false;\n  }\n\n  return (\n    <CreatureContext.Provider \n      value={{\n        creatures,\n        createCreature,\n        updateCreatureStats,\n        updateCreatureObjectves,\n        updateCreatureInfo,\n        deleteCreature, \n        currentId,\n        play,\n        togglePlay,\n        formDisplay,\n        toggleFormDisplay,\n        expUpdate,\n        toggleExpUpdate,\n        dispatch,\n        sendCreatureId,\n        getExp,\n        checkObjectiveText,\n      }}>\n      {props.children}\n    </CreatureContext.Provider>\n  )\n}\n\nexport default CreatureContextProvider;\n"]},"metadata":{},"sourceType":"module"}