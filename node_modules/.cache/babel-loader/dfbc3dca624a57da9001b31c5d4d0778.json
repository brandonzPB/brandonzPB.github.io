{"ast":null,"code":"import axios from 'axios';\nconst baseUrl = '/dashboard/user'; // CREATE user\n\nconst createUser = userObject => {\n  const req = axios.post(`${baseUrl}/create`, userObject);\n  return req.then(res => res.data).catch(err => console.error(err));\n}; // LOGIN\n\n\nconst login = credentials => {\n  const req = axios.post(`${baseUrl}/login`, credentials);\n  return req.then(res => {\n    console.log('res', res.data);\n    return res.data;\n  }).catch(err => console.error(err));\n}; // GET all users\n\n\nconst getAll = token => {\n  const req = axios.get('/dashboard/users', {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => res.data).catch(err => console.error(err));\n}; // READ user\n\n\nconst readUser = (userId, token) => {\n  const req = axios.get(`${baseUrl}/${userId}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => {\n    console.log(res.data);\n    return res.data;\n  }).catch(err => console.error(err));\n}; // GET USERNAMES; RETURN IF REQUEST IS AVAILABLE\n\n\nconst checkUsername = (userId, userObject, token) => {\n  const req = axios.get(`${baseUrl}/usernames`, userObject, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => res.data).catch(err => console.error(err));\n}; // POST localStorage creatures\n\n\nconst storeLocalCreatures = (userId, creatures, token) => {\n  const req = axios.post(`${baseUrl}/${userId}`, creatures, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => res.data).catch(err => console.error(err));\n}; // UPDATE user\n\n\nconst updateUser = (userId, userObject, token) => {\n  const req = axios.put(`${baseUrl}/${userId}/update`, userObject, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => res.data).catch(err => console.error(err));\n}; // DELETE user\n\n\nconst deleteUser = (userId, userObject, token) => {\n  const req = axios.delete(`${baseUrl}/${userId}/delete`, userObject, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => res.data).catch(err => console.error(err));\n};\n\nexport default {\n  getAll,\n  createUser,\n  login,\n  readUser,\n  checkUsername,\n  storeLocalCreatures,\n  updateUser,\n  deleteUser\n};","map":{"version":3,"sources":["/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/services/userService.js"],"names":["axios","baseUrl","createUser","userObject","req","post","then","res","data","catch","err","console","error","login","credentials","log","getAll","token","get","headers","readUser","userId","checkUsername","storeLocalCreatures","creatures","updateUser","put","deleteUser","delete"],"mappings":"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","sourcesContent":["import axios from 'axios';\nconst baseUrl = '/dashboard/user';\n\n// CREATE user\nconst createUser = (userObject) => {\n  const req = axios.post(`${baseUrl}/create`, userObject);\n  return req.then(res => res.data)\n    .catch(err => console.error(err));\n};\n\n// LOGIN\nconst login = (credentials) => {\n  const req = axios.post(`${baseUrl}/login`, credentials);\n\n  return req.then(res => {\n    console.log('res', res.data);\n\n    return res.data;\n  })\n    .catch(err => console.error(err));\n}\n\n// GET all users\nconst getAll = (token) => {\n  const req = axios.get('/dashboard/users', {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n\n  return req.then(res => res.data)\n    .catch(err => console.error(err));\n};\n\n// READ user\nconst readUser = (userId, token) => {\n  const req = axios.get(`${baseUrl}/${userId}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n\n  return req.then(res => {\n    console.log(res.data);\n\n    return res.data;\n  })\n    .catch(err => console.error(err));\n};\n\n// GET USERNAMES; RETURN IF REQUEST IS AVAILABLE\nconst checkUsername = (userId, userObject, token) => {\n  const req = axios.get(`${baseUrl}/usernames`, userObject, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n\n  return req.then(res => res.data)\n    .catch(err => console.error(err));\n}\n\n// POST localStorage creatures\nconst storeLocalCreatures = (userId, creatures, token) => {\n  const req = axios.post(`${baseUrl}/${userId}`, creatures, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n\n  return req.then(res => res.data)\n    .catch(err => console.error(err));\n}\n\n// UPDATE user\nconst updateUser = (userId, userObject, token) => {\n  const req = axios.put(`${baseUrl}/${userId}/update`, userObject, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n\n  return req.then(res => res.data)\n    .catch(err => console.error(err));\n};\n\n// DELETE user\nconst deleteUser = (userId, userObject, token) => {\n  const req = axios.delete(`${baseUrl}/${userId}/delete`, userObject, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n\n  return req.then(res => res.data)\n    .catch(err => console.error(err));\n};\n\nexport default { \n  getAll,\n  createUser,\n  login,\n  readUser,\n  checkUsername,\n  storeLocalCreatures,\n  updateUser,\n  deleteUser \n};\n"]},"metadata":{},"sourceType":"module"}