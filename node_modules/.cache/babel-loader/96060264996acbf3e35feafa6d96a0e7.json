{"ast":null,"code":"exports.getAge = (birthTime, string = true) => {\n  const currentTime = Date.now();\n  const difference = currentTime - birthTime;\n  const dayDifference = difference / 1000 / 86400;\n  const minutes = dayDifference * 1440;\n  const days = dayDifference % 365;\n  const years = (dayDifference - days) / 365;\n  return string ? `${years} years, and ${Math.round(days)} days old` : minutes;\n};\n\nexports.checkCreatureStreak = creature => {\n  // checks if streak is broken ('broken', 'constant', or 'increment')\n  const streakTimestamp = creature.streak_timestamp;\n  const streakDay = creature.streak_day;\n  const thisDay = new Date().getDay();\n\n  if (streakDay === 6) {\n    // Streak continues if current week day is 0 and less than 24 hours passed\n    if (thisDay !== 0 && thisDay !== 6) {\n      // Streak broken\n      return 'broken';\n    } else if (thisDay === 0) {\n      // Next week day\n      // if more than 2 days passed; streak is over\n      // else, increment streak count\n      const minDifference = this.getAge(streakTimestamp, false);\n      return minDifference > 2880 ? 'broken' : 'increment';\n    } else {\n      // Same day\n      return 'constant';\n    }\n  } else {\n    // Streak continues if current week day is streak.timestamp + 1, and if less than 24 hours passed\n    if (thisDay === streakDay + 1) {\n      // if more than 2 days passed; streak is over\n      // else, increment streak count\n      const minDifference = this.getAge(streakTimestamp, false);\n      return minDifference > 2880 ? 'broken' : 'increment';\n    } else if (streakDay === thisDay) {\n      // Same day\n      return 'constant';\n    } else {\n      return 'broken';\n    }\n  }\n};\n\nexports.updateCreatureStreak = (creature, userDispatch, finish) => {\n  const newCount = creature.streak_count + 1;\n  const newTimestamp = Date.now();\n  const newDay = new Date().getDay();\n  userDispatch({\n    type: 'UPDATE_STREAK',\n    creature: {\n      id: creature.id,\n      newCount,\n      newTimestamp,\n      newDay\n    }\n  });\n  finish('creature', creature, 'stats');\n  return creature;\n};\n\nexports.resetCreatureStreak = (creature, user, userDispatch, finish) => {\n  const newCount = 0;\n  const newTimestamp = Date.now() - 86400000;\n  const newDay = user.newDay;\n  userDispatch({\n    type: 'UPDATE_STREAK',\n    creature: {\n      id: creature.id,\n      newCount,\n      newTimestamp,\n      newDay\n    }\n  });\n  finish('creature', creature, 'stats');\n  return creature;\n};","map":{"version":3,"sources":["/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/modules/streak.js"],"names":["exports","getAge","birthTime","string","currentTime","Date","now","difference","dayDifference","minutes","days","years","Math","round","checkCreatureStreak","creature","streakTimestamp","streak_timestamp","streakDay","streak_day","thisDay","getDay","minDifference","updateCreatureStreak","userDispatch","finish","newCount","streak_count","newTimestamp","newDay","type","id","resetCreatureStreak","user"],"mappings":"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","sourcesContent":["exports.getAge = (birthTime, string = true) => {\n  const currentTime = Date.now();\n  const difference = currentTime - birthTime;\n\n  const dayDifference = (difference / 1000) / 86400;\n\n  const minutes = dayDifference * 1440;\n  const days = dayDifference % 365;\n  const years = (dayDifference - days) / 365;\n\n  return string ? `${years} years, and ${Math.round(days)} days old` : minutes;\n}\n\nexports.checkCreatureStreak = (creature) => {\n  // checks if streak is broken ('broken', 'constant', or 'increment')\n\n  const streakTimestamp = creature.streak_timestamp;\n  const streakDay = creature.streak_day;\n  const thisDay = (new Date()).getDay();\n\n  if (streakDay === 6) { // Streak continues if current week day is 0 and less than 24 hours passed\n\n    if (thisDay !== 0 && thisDay !== 6) { // Streak broken\n      return 'broken';\n    } else if (thisDay === 0) { // Next week day\n      // if more than 2 days passed; streak is over\n      // else, increment streak count\n\n      const minDifference = this.getAge(streakTimestamp, false);\n      return minDifference > 2880 ? 'broken' : 'increment';\n    } else { // Same day\n\n      return 'constant';\n    }\n\n  } else { // Streak continues if current week day is streak.timestamp + 1, and if less than 24 hours passed\n    \n    if (thisDay === streakDay + 1) {\n      // if more than 2 days passed; streak is over\n      // else, increment streak count\n\n      const minDifference = this.getAge(streakTimestamp, false);\n      return minDifference > 2880 ? 'broken' : 'increment';\n    } else if (streakDay === thisDay) { // Same day\n\n      return 'constant';\n    } else {\n      return 'broken';\n    }\n  }\n}\n\nexports.updateCreatureStreak = (creature, userDispatch, finish) => {\n  const newCount = creature.streak_count + 1;\n  const newTimestamp = Date.now();\n  const newDay = (new Date()).getDay();\n\n  userDispatch({ type: 'UPDATE_STREAK', creature: {\n    id: creature.id,\n    newCount,\n    newTimestamp,\n    newDay,\n  }});\n\n  finish('creature', creature, 'stats');\n\n  return creature;\n}\n\nexports.resetCreatureStreak = (creature, user, userDispatch, finish) => {\n  const newCount = 0;\n  const newTimestamp = Date.now() - 86400000;\n  const newDay = user.newDay;\n\n  userDispatch({ type: 'UPDATE_STREAK', creature: {\n    id: creature.id,\n    newCount,\n    newTimestamp,\n    newDay,\n  }});\n\n  finish('creature', creature, 'stats');\n  \n  return creature;\n};"]},"metadata":{},"sourceType":"module"}