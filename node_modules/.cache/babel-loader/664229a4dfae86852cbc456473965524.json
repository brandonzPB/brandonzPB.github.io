{"ast":null,"code":"var _jsxFileName = \"/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/contexts/UserContext.js\";\nimport React, { useState, useReducer, createContext, useEffect } from 'react';\nimport userService from '../services/userService';\nimport userReducer from '../reducers/userReducer';\nexport const UserContext = createContext();\n\nconst UserContextProvider = props => {\n  const [user, dispatch] = useReducer(userReducer, {}, () => {\n    const storedUser = localStorage.getItem('my-user');\n    return storedUser ? JSON.parse(storedUser) : {};\n  });\n  const [newUser, setNewUser] = useState({\n    username: '',\n    email: '',\n    password: ''\n  });\n  const [signup, setSignup] = useState(true);\n  useEffect(() => {\n    localStorage.setItem('my-user', JSON.stringify(user));\n  }, [user]);\n\n  const toggleSignup = () => {\n    return setSignup(!signup);\n  };\n\n  const addUser = async userObject => {\n    const users = await userService.getAll();\n    const newUserIndex = users.findIndex(acct => acct.email === newUser.email);\n\n    if (newUserIndex >= 0) {// user already exists\n    } else {\n      userService.createUser(userObject);\n    }\n  };\n\n  const login = async userObject => {\n    const {\n      username,\n      email,\n      password\n    } = userObject;\n    const users = await userService.getAll();\n    const thisUser = users.filter(acct => acct.username === user.username);\n    if (!thisUser) return false;\n    console.log(thisUser);\n    getLocalCreatures();\n    dispatch({\n      type: 'LOG_IN',\n      user: {\n        username,\n        email,\n        password,\n        creatures: thisUser.creatures\n      }\n    });\n  };\n\n  const getLocalCreatures = () => {\n    const creatureStorage = localStorage.getItem('my-creatures');\n    const storedCreatures = creatureStorage ? JSON.parse(creatureStorage) : [];\n    console.log(storedCreatures);\n    dispatch({\n      type: 'GET_LOCAL_CREATURES',\n      user: {\n        creatures: storedCreatures\n      }\n    });\n    return false;\n  };\n\n  const deleteUser = userObject => {};\n\n  return /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: {\n      user,\n      signup,\n      toggleSignup,\n      addUser,\n      login,\n      deleteUser\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default UserContextProvider;","map":{"version":3,"sources":["/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/contexts/UserContext.js"],"names":["React","useState","useReducer","createContext","useEffect","userService","userReducer","UserContext","UserContextProvider","props","user","dispatch","storedUser","localStorage","getItem","JSON","parse","newUser","setNewUser","username","email","password","signup","setSignup","setItem","stringify","toggleSignup","addUser","userObject","users","getAll","newUserIndex","findIndex","acct","createUser","login","thisUser","filter","console","log","getLocalCreatures","type","creatures","creatureStorage","storedCreatures","deleteUser","children"],"mappings":"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","sourcesContent":["import React, { useState, useReducer, createContext, useEffect } from 'react';\nimport userService from '../services/userService';\nimport userReducer from '../reducers/userReducer';\n\nexport const UserContext = createContext();\n\nconst UserContextProvider = (props) => {\n  const [user, dispatch] = useReducer(userReducer, {}, () => {\n    const storedUser = localStorage.getItem('my-user');\n    return storedUser ? JSON.parse(storedUser) : {};\n  });\n\n  const [newUser, setNewUser] = useState({\n    username: '',\n    email: '',\n    password: ''\n  });\n\n  const [signup, setSignup] = useState(true);\n\n  useEffect(() => {\n    localStorage.setItem('my-user', JSON.stringify(user));\n  }, [user]);\n\n  const toggleSignup = () => {\n    return setSignup(!signup);\n  }\n\n  const addUser = async (userObject) => {\n    const users = await userService.getAll();\n\n    const newUserIndex = users.findIndex(acct => acct.email === newUser.email);\n\n    if (newUserIndex >= 0) {\n      // user already exists\n    } else {\n      userService\n        .createUser(userObject);\n    }\n  }\n\n  const login = async (userObject) => {\n    const { username, email, password } = userObject;\n\n    const users = await userService.getAll();\n\n    const thisUser = users.filter(acct => acct.username === user.username);\n    \n    if (!thisUser) return false;\n\n    console.log(thisUser);\n\n    getLocalCreatures();\n\n    dispatch({ type: 'LOG_IN', user: {\n      username, email, password,\n      creatures: thisUser.creatures,\n    }});\n  }\n\n  const getLocalCreatures = () => {\n    const creatureStorage = localStorage.getItem('my-creatures');\n    \n    const storedCreatures = creatureStorage ? JSON.parse(creatureStorage) : [];\n\n    console.log(storedCreatures);\n\n    dispatch({ type: 'GET_LOCAL_CREATURES', user: {\n      creatures: storedCreatures\n    }});\n\n    return false;\n  }\n\n  const deleteUser = userObject => {}\n\n  return (\n    <UserContext.Provider value={{\n      user,\n      signup,\n      toggleSignup,\n      addUser,\n      login,\n      deleteUser,\n    }}>\n      {props.children}\n    </UserContext.Provider>\n  )\n}\n\nexport default UserContextProvider;\n"]},"metadata":{},"sourceType":"module"}