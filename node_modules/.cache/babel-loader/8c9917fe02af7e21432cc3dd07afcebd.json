{"ast":null,"code":"var _jsxFileName = \"/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/contexts/CreatureContext.js\";\nimport React, { useState, useReducer, useEffect, useContext, createContext } from 'react';\nimport creatureReducer from '../reducers/creatureReducer';\nimport * as objective from '../modules/objective';\nimport * as streakTime from '../modules/age';\nimport creatureService from '../services/creatureService';\nimport UserContextProvider, { UserContext } from './UserContext';\nexport const CreatureContext = createContext();\n\nconst CreatureContextProvider = props => {\n  const {\n    user,\n    postLocalCreatures\n  } = useContext(UserContext);\n  const [creatures, dispatch] = useReducer(creatureReducer, user.creatures || []);\n  useEffect(() => {\n    localStorage.setItem('my-user', JSON.stringify(user));\n  }, [creatures]);\n  /* const [creatures, dispatch] = useReducer(creatureReducer, [], () => {\n    const storedCreatures = localStorage.getItem('my-creatures');\n    return storedCreatures ? JSON.parse(storedCreatures) : [];\n  });\n   useEffect(() => {\n    localStorage.setItem('my-creatures', JSON.stringify(creatures));\n  }, [creatures]); */\n\n  const [currentId, setCurrentId] = useState('');\n  const [play, setPlay] = useState(false);\n  const [formDisplay, setFormDisplay] = useState(true);\n  const [expUpdate, setExpUpdate] = useState(false); // DELETE creature\n\n  const deleteCreature = async creatureId => {\n    const creature = user.creatures.filter(being => being.id === creatureId);\n    await creatureService.deleteCreature(user.db_id, creature._id, creature, user.accessToken).then(res => res).catch(err => console.error(err));\n    dispatch({\n      type: 'DELETE_CREATURE',\n      creature: {\n        creature\n      }\n    });\n    console.log('Successfully deleted creature: ' + creature);\n  };\n\n  const getExp = (creature, habit, time) => {\n    if (creature.is_noob) return getFirstExp(creature);\n    const streakCount = creature.streak_count;\n    const newExp = objective.calcExp(creature.multiplier, streakCount, habit.difficulty, time);\n    const newTotal = creature.exp + newExp;\n    const newSurplus = newTotal >= creature.exp_goal ? newTotal - creature.exp_goal : creature.exp_surplus + newExp;\n    dispatch({\n      type: 'ADD_EXP',\n      creature: {\n        id: creature.id,\n        newTotal,\n        newSurplus\n      }\n    });\n    return creature;\n  };\n\n  const getFirstExp = creature => {\n    const newTotal = 1;\n    const newSurplus = 0;\n    dispatch({\n      type: 'ADD_EXP',\n      creature: {\n        id: creature.id,\n        newTotal,\n        newSurplus\n      }\n    });\n    return creature;\n  };\n\n  const toggleExpUpdate = () => {\n    setExpUpdate(!expUpdate);\n  };\n\n  const toggleFormDisplay = () => {\n    setFormDisplay(!formDisplay);\n  };\n\n  const sendCreatureId = id => {\n    return setCurrentId(id);\n  };\n\n  const togglePlay = () => {\n    setPlay(!play);\n  };\n\n  const checkObjectiveText = (creatureId, text) => {\n    const creatureInfo = creatures.filter(being => being.id === creatureId);\n    const objectiveIndex = creatureInfo[0].objectives.findIndex(item => item.text.toLowerCase() === text.toLowerCase());\n    return objectiveIndex >= 0 ? true : false;\n  };\n\n  return /*#__PURE__*/React.createElement(CreatureContext.Provider, {\n    value: {\n      creatures,\n      deleteCreature,\n      currentId,\n      play,\n      togglePlay,\n      formDisplay,\n      toggleFormDisplay,\n      expUpdate,\n      toggleExpUpdate,\n      dispatch,\n      sendCreatureId,\n      getExp,\n      checkObjectiveText\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default CreatureContextProvider;","map":{"version":3,"sources":["/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/contexts/CreatureContext.js"],"names":["React","useState","useReducer","useEffect","useContext","createContext","creatureReducer","objective","streakTime","creatureService","UserContextProvider","UserContext","CreatureContext","CreatureContextProvider","props","user","postLocalCreatures","creatures","dispatch","localStorage","setItem","JSON","stringify","currentId","setCurrentId","play","setPlay","formDisplay","setFormDisplay","expUpdate","setExpUpdate","deleteCreature","creatureId","creature","filter","being","id","db_id","_id","accessToken","then","res","catch","err","console","error","type","log","getExp","habit","time","is_noob","getFirstExp","streakCount","streak_count","newExp","calcExp","multiplier","difficulty","newTotal","exp","newSurplus","exp_goal","exp_surplus","toggleExpUpdate","toggleFormDisplay","sendCreatureId","togglePlay","checkObjectiveText","text","creatureInfo","objectiveIndex","objectives","findIndex","item","toLowerCase","children"],"mappings":"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","sourcesContent":["import React, { useState, useReducer, useEffect, useContext, createContext } from 'react';\nimport creatureReducer from '../reducers/creatureReducer';\nimport * as objective from '../modules/objective'\nimport * as streakTime from '../modules/age';\nimport creatureService from '../services/creatureService';\nimport UserContextProvider, { UserContext } from './UserContext';\n\nexport const CreatureContext = createContext();\n\nconst CreatureContextProvider = (props) => {\n  const { user, postLocalCreatures } = useContext(UserContext);\n\n  const [creatures, dispatch] = useReducer(creatureReducer, user.creatures || []);\n\n  useEffect(() => {\n    localStorage.setItem('my-user', JSON.stringify(user));\n  }, [creatures]);\n\n  /* const [creatures, dispatch] = useReducer(creatureReducer, [], () => {\n    const storedCreatures = localStorage.getItem('my-creatures');\n    return storedCreatures ? JSON.parse(storedCreatures) : [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem('my-creatures', JSON.stringify(creatures));\n  }, [creatures]); */\n\n  const [currentId, setCurrentId] = useState('');\n  const [play, setPlay] = useState(false);\n  const [formDisplay, setFormDisplay] = useState(true);\n  const [expUpdate, setExpUpdate] = useState(false);\n\n  // DELETE creature\n  const deleteCreature = async (creatureId) => {\n    const creature = user.creatures.filter(being => being.id === creatureId);\n\n    await creatureService.deleteCreature(user.db_id, creature._id, creature, user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n    \n    dispatch({ type: 'DELETE_CREATURE', creature: { creature }});\n\n    console.log('Successfully deleted creature: ' + creature);\n  }\n\n  const getExp = (creature, habit, time) => { \n    if (creature.is_noob) return getFirstExp(creature);\n\n    const streakCount = creature.streak_count;\n\n    const newExp = objective.calcExp(creature.multiplier, streakCount, habit.difficulty, time);\n    const newTotal = creature.exp + newExp;\n\n    const newSurplus = (newTotal >= creature.exp_goal) ? \n      newTotal - creature.exp_goal :\n      creature.exp_surplus + newExp;\n\n    dispatch({ type: 'ADD_EXP', creature: {\n      id: creature.id,\n      newTotal,\n      newSurplus\n    }});\n\n    return creature;\n  }\n\n  const getFirstExp = creature => {\n    const newTotal = 1;\n    const newSurplus = 0;\n\n    dispatch({ type: 'ADD_EXP', creature: { id: creature.id, newTotal, newSurplus } });\n\n    return creature;\n  }\n\n  const toggleExpUpdate = () => {\n    setExpUpdate(!expUpdate);\n  }\n\n  const toggleFormDisplay = () => {\n    setFormDisplay(!formDisplay);\n  }\n\n  const sendCreatureId = id => {\n    return setCurrentId(id);\n  }\n\n  const togglePlay = () => {\n    setPlay(!play);\n  }\n\n  const checkObjectiveText = (creatureId, text) => {\n    const creatureInfo = creatures.filter(being => being.id === creatureId);\n\n    const objectiveIndex = creatureInfo[0].objectives.findIndex(item => item.text.toLowerCase() === text.toLowerCase());\n    return (objectiveIndex >= 0) ? true : false;\n  }\n\n  return (\n    <CreatureContext.Provider \n      value={{\n        creatures,\n        deleteCreature, \n        currentId,\n        play,\n        togglePlay,\n        formDisplay,\n        toggleFormDisplay,\n        expUpdate,\n        toggleExpUpdate,\n        dispatch,\n        sendCreatureId,\n        getExp,\n        checkObjectiveText,\n      }}>\n      {props.children}\n    </CreatureContext.Provider>\n  )\n}\n\nexport default CreatureContextProvider;\n"]},"metadata":{},"sourceType":"module"}