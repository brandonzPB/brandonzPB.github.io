{"ast":null,"code":"var _jsxFileName = \"/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/contexts/UserContext.js\";\nimport React, { useState, useReducer, createContext, useEffect } from 'react';\nimport userService from '../services/userService';\nimport creatureService from '../services/creatureService';\nimport userReducer from '../reducers/userReducer';\nexport const UserContext = createContext();\n\nconst UserContextProvider = props => {\n  const [user, userDispatch] = useReducer(userReducer, {}, () => {\n    const storedUser = localStorage.getItem('my-user');\n    return storedUser ? JSON.parse(storedUser) : {};\n  });\n  const [error, setError] = useState({\n    error: null\n  });\n  useEffect(() => {\n    localStorage.setItem('my-user', JSON.stringify(user));\n    console.log('user', user);\n    console.log(user.accessToken);\n  }, [user]);\n\n  const updateUser = () => {\n    userService.readUser(user.db_id, user.accessToken).then(res => {\n      console.log(res);\n      userDispatch({\n        type: 'LOG_IN',\n        user: {\n          username: res.user.username,\n          email: res.user.email,\n          db_id: user.db_id,\n          accessToken: user.accessToken,\n          creatures: res.user_creatures\n        }\n      });\n      return res;\n    }).catch(err => console.error(err));\n  }; // POST new user\n\n\n  const addUser = async userObject => {\n    userService.createUser(userObject).then(res => {\n      if (res === false) {\n        setError({ ...error,\n          error: true\n        });\n      } else {\n        setError({ ...error,\n          error: null\n        });\n      }\n    }).catch(err => console.error(err));\n  }; // GET localStorage creatures\n\n\n  const getLocalCreatures = () => {\n    const creatureStorage = localStorage.getItem('my-creatures');\n    return creatureStorage ? JSON.parse(creatureStorage) : [];\n  }; // POST localStorage creatures\n\n\n  const postLocalCreatures = async (userId, creatures, token) => {\n    await userService.storeLocalCreatures(userId, creatures, token).then(res => res).catch(err => console.error(err));\n    userDispatch({\n      type: 'POST_LOCAL_CREATURES',\n      creatures: {\n        creatures\n      }\n    });\n  }; // UPDATE STREAKS\n\n\n  const updateStreaks = () => {\n    console.log('Updating streaks...');\n    creatureService.updateStreaks(user.db_id, user.creatures, user.accessToken).then(res => res).catch(err => console.error(err));\n  }; // GET user info\n\n\n  const getUserInfo = async res => {\n    console.log('Successfully logged in', res.db_id, res.accessToken);\n    const storedCreatures = await getLocalCreatures();\n    console.log(storedCreatures);\n\n    if (storedCreatures.length >= 1) {\n      postLocalCreatures(res.db_ib, storedCreatures, res.accessToken);\n      console.log('Retrieved localStorage creatures');\n      localStorage.removeItem('my-creatures');\n      console.log('Cleared \\'my-creatures\\' from localStorage');\n    }\n\n    await userService.readUser(res.db_id, res.accessToken).then(response => {\n      const myCreatures = storedCreatures.length >= 1 ? storedCreatures : response.user_creatures;\n      userDispatch({\n        type: 'LOG_IN',\n        user: {\n          username: response.user.username,\n          email: response.user.email,\n          db_id: res.db_id,\n          accessToken: res.accessToken,\n          creatures: storedCreatures.length >= 1 ? storedCreatures : response.user_creatures\n        }\n      }); // update ages\n\n      console.log('Successfully retrieved user data');\n    }).catch(err => console.error(err));\n  }; // POST user login\n\n\n  const login = async userObject => {\n    const {\n      username,\n      password\n    } = userObject;\n    localStorage.removeItem('my-user');\n    await userService.login({\n      username,\n      password\n    }).then(res => {\n      return getUserInfo(res);\n    }).catch(err => {\n      console.error(err);\n    });\n  }; // DELETE user\n\n\n  const deleteUser = userObject => {}; // LOG OUT\n\n\n  const logout = () => {\n    userDispatch({\n      type: 'LOG_OUT'\n    });\n    localStorage.removeItem('my-user');\n  };\n\n  return /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: {\n      user,\n      userDispatch,\n      updateUser,\n      error,\n      setError,\n      addUser,\n      login,\n      postLocalCreatures,\n      updateStreaks,\n      deleteUser,\n      logout\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default UserContextProvider;","map":{"version":3,"sources":["/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/contexts/UserContext.js"],"names":["React","useState","useReducer","createContext","useEffect","userService","creatureService","userReducer","UserContext","UserContextProvider","props","user","userDispatch","storedUser","localStorage","getItem","JSON","parse","error","setError","setItem","stringify","console","log","accessToken","updateUser","readUser","db_id","then","res","type","username","email","creatures","user_creatures","catch","err","addUser","userObject","createUser","getLocalCreatures","creatureStorage","postLocalCreatures","userId","token","storeLocalCreatures","updateStreaks","getUserInfo","storedCreatures","length","db_ib","removeItem","response","myCreatures","login","password","deleteUser","logout","children"],"mappings":"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","sourcesContent":["import React, { useState, useReducer, createContext, useEffect } from 'react';\nimport userService from '../services/userService';\nimport creatureService from '../services/creatureService';\nimport userReducer from '../reducers/userReducer';\n\nexport const UserContext = createContext();\n\nconst UserContextProvider = (props) => {\n  const [user, userDispatch] = useReducer(userReducer, {}, () => {\n    const storedUser = localStorage.getItem('my-user');\n    return storedUser ? JSON.parse(storedUser) : {};\n  });\n\n  const [error, setError] = useState({ error: null });\n\n  useEffect(() => {\n    localStorage.setItem('my-user', JSON.stringify(user));\n\n    console.log('user', user);\n    console.log(user.accessToken);\n  }, [user]);\n\n  const updateUser = () => {\n    userService.readUser(user.db_id, user.accessToken)\n      .then(res => {\n        console.log(res);\n\n        userDispatch({ type: 'LOG_IN', user: {\n          username: res.user.username,\n          email: res.user.email,\n          db_id: user.db_id,\n          accessToken: user.accessToken,\n          creatures: res.user_creatures\n        }});\n\n        return res;\n      })\n      .catch(err => console.error(err));\n  }\n\n  // POST new user\n  const addUser = async (userObject) => {\n\n    userService.createUser(userObject)\n      .then(res => {\n        if (res === false) {\n          setError({\n            ...error,\n            error: true\n          });\n        } else {\n          setError({\n            ...error,\n            error: null\n          });\n        }\n      })\n      .catch(err => console.error(err));\n  }\n\n  // GET localStorage creatures\n  const getLocalCreatures = () => {\n    const creatureStorage = localStorage.getItem('my-creatures');\n    \n    return creatureStorage ? JSON.parse(creatureStorage) : [];\n  }\n\n  // POST localStorage creatures\n  const postLocalCreatures = async (userId, creatures, token) => {\n    await userService\n      .storeLocalCreatures(userId, creatures, token)\n      .then(res => res)\n      .catch(err => console.error(err));\n\n    userDispatch({ type: 'POST_LOCAL_CREATURES', creatures: { creatures }});\n  }\n\n  // UPDATE STREAKS\n  const updateStreaks = () => {\n    console.log('Updating streaks...');\n\n    creatureService.updateStreaks(user.db_id, user.creatures, user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n  }\n\n  // GET user info\n  const getUserInfo = async (res) => {\n    console.log('Successfully logged in', res.db_id, res.accessToken);\n\n    const storedCreatures = await getLocalCreatures();\n\n    console.log(storedCreatures);\n\n    if (storedCreatures.length >= 1) {\n      postLocalCreatures(res.db_ib, storedCreatures, res.accessToken);\n      console.log('Retrieved localStorage creatures');\n\n      localStorage.removeItem('my-creatures');\n      console.log('Cleared \\'my-creatures\\' from localStorage');\n    }\n\n    await userService.readUser(res.db_id, res.accessToken)\n      .then(response => {\n\n        const myCreatures = storedCreatures.length >= 1 ? storedCreatures : response.user_creatures;\n\n        userDispatch({ type: 'LOG_IN', user: {\n          username: response.user.username,\n          email: response.user.email,\n          db_id: res.db_id,\n          accessToken: res.accessToken,\n          creatures: storedCreatures.length >= 1 ? storedCreatures : response.user_creatures,\n        }});\n\n        // update ages\n\n        console.log('Successfully retrieved user data');\n      })\n      .catch(err => console.error(err));\n  }\n\n  // POST user login\n  const login = async (userObject) => {\n    const { username, password } = userObject;\n\n    localStorage.removeItem('my-user');\n\n    await userService.login({\n      username,\n      password\n    })\n      .then(res => { \n        return getUserInfo(res); \n      })\n      .catch(err => {\n        console.error(err);\n      });\n  }\n\n  // DELETE user\n  const deleteUser = userObject => {}\n\n  // LOG OUT\n  const logout = () => {\n    userDispatch({ type: 'LOG_OUT' });\n    localStorage.removeItem('my-user');\n  }\n\n  return (\n    <UserContext.Provider value={{\n      user,\n      userDispatch,\n      updateUser,\n      error,\n      setError,\n      addUser,\n      login,\n      postLocalCreatures,\n      updateStreaks,\n      deleteUser,\n      logout,\n    }}>\n      {props.children}\n    </UserContext.Provider>\n  )\n}\n\nexport default UserContextProvider;\n"]},"metadata":{},"sourceType":"module"}