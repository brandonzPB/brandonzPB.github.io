{"ast":null,"code":"const getAge = (birthTime, string = true) => {\n  const currentTime = Date.now();\n  const difference = currentTime - birthTime;\n  const dayDifference = difference / 1000 / 86400;\n  const minutes = dayDifference * 1440;\n  const days = dayDifference % 365;\n  const years = (dayDifference - days) / 365;\n  return string ? `${years} years, and ${Math.round(days)} days old` : minutes;\n};\n\nexports.checkCreatureStreak = (thisDay, creature) => {\n  // checks if streak is broken, constant, or needs to be incremented\n  const {\n    streak_timestamp,\n    streak_day\n  } = creature;\n\n  if (streak_day === 6) {\n    // Streak continues if current week day is 0 and less than 24 hours passed\n    if (thisDay !== 0 && thisDay !== 6) {\n      // Streak broken\n      return 'broken';\n    } else if (thisDay === 0) {\n      // Next week day\n      // if more than 2 days passed; streak is over\n      // else, increment streak count\n      const minDifference = getAge(streak_timestamp, false);\n      return minDifference > 2880 ? 'broken' : 'increment';\n    } else {\n      // Same day\n      return 'constant';\n    }\n  } else {\n    // Streak continues if current week day is streak.timestamp + 1, and if less than 24 hours passed\n    if (thisDay === streak_day + 1) {\n      // if more than 2 days passed; streak is over\n      // else, increment streak count\n      const minDifference = getAge(streak_timestamp, false);\n      return minDifference > 2880 ? 'broken' : 'increment';\n    } else if (streak_day === thisDay) {\n      // Same day\n      return 'constant';\n    } else {\n      return 'broken';\n    }\n  }\n};\n\nexports.updateCreatureStreak = (creature, userDispatch, finish) => {\n  const newCount = creature.streak_count + 1;\n  const newTimestamp = Date.now();\n  const newDay = new Date().getDay();\n  userDispatch({\n    type: 'UPDATE_STREAK',\n    creature: {\n      id: creature.id,\n      newCount,\n      newTimestamp,\n      newDay\n    }\n  });\n  finish('creature', creature, 'stats');\n  return creature;\n};\n\nexports.resetCreatureStreak = (creature, userDispatch, finish) => {\n  const newCount = 0;\n  const newTimestamp = Date.now();\n  const newDay = new Date().getDay();\n  userDispatch({\n    type: 'UPDATE_STREAK',\n    creature: {\n      id: creature.id,\n      newCount,\n      newTimestamp,\n      newDay\n    }\n  });\n  finish('creature', creature, 'stats');\n  return creature;\n};","map":{"version":3,"sources":["/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/modules/streak.js"],"names":["getAge","birthTime","string","currentTime","Date","now","difference","dayDifference","minutes","days","years","Math","round","exports","checkCreatureStreak","thisDay","creature","streak_timestamp","streak_day","minDifference","updateCreatureStreak","userDispatch","finish","newCount","streak_count","newTimestamp","newDay","getDay","type","id","resetCreatureStreak"],"mappings":"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","sourcesContent":["const getAge = (birthTime, string = true) => {\n  const currentTime = Date.now();\n  const difference = currentTime - birthTime;\n\n  const dayDifference = (difference / 1000) / 86400;\n\n  const minutes = dayDifference * 1440;\n  const days = dayDifference % 365;\n  const years = (dayDifference - days) / 365;\n\n  return string ? `${years} years, and ${Math.round(days)} days old` : minutes;\n}\n\nexports.checkCreatureStreak = (thisDay, creature) => {\n  // checks if streak is broken, constant, or needs to be incremented\n\n  const { streak_timestamp, streak_day } = creature;\n\n  if (streak_day === 6) { // Streak continues if current week day is 0 and less than 24 hours passed\n\n    if (thisDay !== 0 && thisDay !== 6) { // Streak broken\n      return 'broken';\n    } else if (thisDay === 0) { // Next week day\n      // if more than 2 days passed; streak is over\n      // else, increment streak count\n\n      const minDifference = getAge(streak_timestamp, false);\n      return minDifference > 2880 ? 'broken' : 'increment';\n    } else { // Same day\n\n      return 'constant';\n    }\n\n  } else { // Streak continues if current week day is streak.timestamp + 1, and if less than 24 hours passed\n    \n    if (thisDay === streak_day + 1) {\n      // if more than 2 days passed; streak is over\n      // else, increment streak count\n\n      const minDifference = getAge(streak_timestamp, false);\n      return minDifference > 2880 ? 'broken' : 'increment';\n    } else if (streak_day === thisDay) { // Same day\n\n      return 'constant';\n    } else {\n      return 'broken';\n    }\n  }\n}\n\nexports.updateCreatureStreak = (creature, userDispatch, finish) => {\n  const newCount = creature.streak_count + 1;\n  const newTimestamp = Date.now();\n  const newDay = (new Date()).getDay();\n\n  userDispatch({ type: 'UPDATE_STREAK', creature: {\n    id: creature.id,\n    newCount,\n    newTimestamp,\n    newDay,\n  }});\n\n  finish('creature', creature, 'stats');\n\n  return creature;\n}\n\nexports.resetCreatureStreak = (creature, userDispatch, finish) => {\n  const newCount = 0;\n  const newTimestamp = Date.now();\n  const newDay = (new Date()).getDay();\n\n  userDispatch({ type: 'UPDATE_STREAK', creature: {\n    id: creature.id,\n    newCount,\n    newTimestamp,\n    newDay,\n  }});\n\n  finish('creature', creature, 'stats');\n  \n  return creature;\n};"]},"metadata":{},"sourceType":"module"}