{"ast":null,"code":"var _jsxFileName = \"/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/contexts/CreatureContext.js\";\nimport React, { useState, useReducer, useEffect, useContext, createContext } from 'react';\nimport creatureReducer from '../reducers/creatureReducer';\nimport * as objective from '../modules/objective';\nimport * as streakTime from '../modules/age';\nimport creatureService from '../services/creatureService';\nimport UserContextProvider, { UserContext } from './UserContext';\nexport const CreatureContext = createContext();\n\nconst CreatureContextProvider = props => {\n  const {\n    user,\n    userDispatch\n  } = useContext(UserContext);\n  const [creatures, dispatch] = useReducer(creatureReducer, user.creatures || []);\n  useEffect(() => {\n    userDispatch({\n      type: 'UPDATE_CREATURES',\n      creatures: {\n        creatures: creatures\n      }\n    });\n    localStorage.setItem('my-user', JSON.stringify(user));\n  }, [creatures]);\n  /* const [creatures, dispatch] = useReducer(creatureReducer, [], () => {\n    const storedCreatures = localStorage.getItem('my-creatures');\n    return storedCreatures ? JSON.parse(storedCreatures) : [];\n  });\n   useEffect(() => {\n    localStorage.setItem('my-creatures', JSON.stringify(creatures));\n  }, [creatures]); */\n\n  const [currentId, setCurrentId] = useState('');\n  const [play, setPlay] = useState(false);\n  const [formDisplay, setFormDisplay] = useState(true);\n  const [expUpdate, setExpUpdate] = useState(false); // CREATE creature\n\n  const createCreature = creatureId => {\n    console.log('creatures', creatures);\n    const creature = JSON.stringify(creatures.filter(being => being.id === creatureId));\n    console.log('creature', creature);\n    creatureService.createCreature(user.db_id, creature, user.accessToken).then(res => res).catch(err => console.error(err));\n    console.log('Successfully added creature');\n  }; // UPDATE creature stats\n\n\n  const updateCreatureStats = async creatureId => {\n    const creature = creatures.filter(being => being.id === creatureId);\n    await creatureService.updateCreatureStats(user.db_id, creatureId, creature, user.accessToken).then(res => res).catch(err => console.error(err));\n    dispatch({\n      type: 'UPDATE_CREATURE',\n      creature: {\n        exp: creature.exp,\n        exp_goal: creature.exp_goal,\n        exp_surplus: creature.exp_surplus,\n        prev_exp_goal: creature.prev_exp_goal,\n        difficulty: creature.difficulty,\n        multiplier: creature.multiplier,\n        pokeball_number: creature.pokeball_number\n      }\n    });\n    console.log('Successfully added creature');\n  }; // UPDATE creature objectives\n\n\n  const updateCreatureObjectves = async creatureId => {\n    const creature = creatures.filter(being => being.id === creatureId);\n    await creatureService.updateCreatureObjectves(user.db_id, creatureId, creature, user.accessToken).then(res => res).catch(err => console.error(err));\n    dispatch({\n      type: 'UPDATE_CREATURE',\n      creature: {\n        objectives: creature.objectives\n      }\n    });\n    console.log('Successfully added creature');\n  }; // UPDATE creature info\n\n\n  const updateCreatureInfo = async creatureId => {\n    const creature = creatures.filter(being => being.id === creatureId);\n    await creatureService.updateCreatureObjectves(user.db_id, creatureId, creature, user.accessToken).then(res => res).catch(err => console.error(err));\n    dispatch({\n      type: 'UPDATE_CREATURE',\n      creature: {\n        creature_name: creature.creature_name,\n        evolutions: creature.evolutions\n      }\n    });\n    console.log('Successfully added creature');\n  }; // DELETE creature\n\n\n  const deleteCreature = async creatureId => {\n    const creature = user.creatures.filter(being => being.id === creatureId);\n    await creatureService.deleteCreature(user.db_id, creature._id, creature, user.accessToken).then(res => res).catch(err => console.error(err));\n    dispatch({\n      type: 'DELETE_CREATURE',\n      creature: {\n        creature\n      }\n    });\n    console.log('Successfully deleted creature: ' + creature);\n  };\n\n  const getExp = (creature, habit, time) => {\n    if (creature.is_noob) return getFirstExp(creature);\n    const streakCount = creature.streak_count;\n    const newExp = objective.calcExp(creature.multiplier, streakCount, habit.difficulty, time);\n    const newTotal = creature.exp + newExp;\n    const newSurplus = newTotal >= creature.exp_goal ? newTotal - creature.exp_goal : creature.exp_surplus + newExp;\n    dispatch({\n      type: 'ADD_EXP',\n      creature: {\n        id: creature.id,\n        newTotal,\n        newSurplus\n      }\n    });\n    return creature;\n  };\n\n  const getFirstExp = creature => {\n    const newTotal = 1;\n    const newSurplus = 0;\n    dispatch({\n      type: 'ADD_EXP',\n      creature: {\n        id: creature.id,\n        newTotal,\n        newSurplus\n      }\n    });\n    return creature;\n  };\n\n  const toggleExpUpdate = () => {\n    setExpUpdate(!expUpdate);\n  };\n\n  const toggleFormDisplay = () => {\n    setFormDisplay(!formDisplay);\n  };\n\n  const sendCreatureId = id => {\n    return setCurrentId(id);\n  };\n\n  const togglePlay = () => {\n    setPlay(!play);\n  };\n\n  const checkObjectiveText = (creatureId, text) => {\n    const creatureInfo = creatures.filter(being => being.id === creatureId);\n    const objectiveIndex = creatureInfo[0].objectives.findIndex(item => item.text.toLowerCase() === text.toLowerCase());\n    return objectiveIndex >= 0 ? true : false;\n  };\n\n  return /*#__PURE__*/React.createElement(CreatureContext.Provider, {\n    value: {\n      creatures,\n      createCreature,\n      updateCreatureStats,\n      updateCreatureObjectves,\n      updateCreatureInfo,\n      deleteCreature,\n      currentId,\n      play,\n      togglePlay,\n      formDisplay,\n      toggleFormDisplay,\n      expUpdate,\n      toggleExpUpdate,\n      dispatch,\n      sendCreatureId,\n      getExp,\n      checkObjectiveText\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default CreatureContextProvider;","map":{"version":3,"sources":["/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/contexts/CreatureContext.js"],"names":["React","useState","useReducer","useEffect","useContext","createContext","creatureReducer","objective","streakTime","creatureService","UserContextProvider","UserContext","CreatureContext","CreatureContextProvider","props","user","userDispatch","creatures","dispatch","type","localStorage","setItem","JSON","stringify","currentId","setCurrentId","play","setPlay","formDisplay","setFormDisplay","expUpdate","setExpUpdate","createCreature","creatureId","console","log","creature","filter","being","id","db_id","accessToken","then","res","catch","err","error","updateCreatureStats","exp","exp_goal","exp_surplus","prev_exp_goal","difficulty","multiplier","pokeball_number","updateCreatureObjectves","objectives","updateCreatureInfo","creature_name","evolutions","deleteCreature","_id","getExp","habit","time","is_noob","getFirstExp","streakCount","streak_count","newExp","calcExp","newTotal","newSurplus","toggleExpUpdate","toggleFormDisplay","sendCreatureId","togglePlay","checkObjectiveText","text","creatureInfo","objectiveIndex","findIndex","item","toLowerCase","children"],"mappings":"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","sourcesContent":["import React, { useState, useReducer, useEffect, useContext, createContext } from 'react';\nimport creatureReducer from '../reducers/creatureReducer';\nimport * as objective from '../modules/objective'\nimport * as streakTime from '../modules/age';\nimport creatureService from '../services/creatureService';\nimport UserContextProvider, { UserContext } from './UserContext';\n\nexport const CreatureContext = createContext();\n\nconst CreatureContextProvider = (props) => {\n  const { user, userDispatch } = useContext(UserContext);\n\n  const [creatures, dispatch] = useReducer(creatureReducer, user.creatures || []);\n\n  useEffect(() => {\n    userDispatch({ type: 'UPDATE_CREATURES', creatures: { creatures: creatures }});\n    localStorage.setItem('my-user', JSON.stringify(user));\n  }, [creatures]);\n\n  /* const [creatures, dispatch] = useReducer(creatureReducer, [], () => {\n    const storedCreatures = localStorage.getItem('my-creatures');\n    return storedCreatures ? JSON.parse(storedCreatures) : [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem('my-creatures', JSON.stringify(creatures));\n  }, [creatures]); */\n\n  const [currentId, setCurrentId] = useState('');\n  const [play, setPlay] = useState(false);\n  const [formDisplay, setFormDisplay] = useState(true);\n  const [expUpdate, setExpUpdate] = useState(false);\n\n  // CREATE creature\n  const createCreature = creatureId => {\n    console.log('creatures', creatures);\n\n    const creature = JSON.stringify(creatures.filter(being => being.id === creatureId));\n\n    console.log('creature', creature);\n\n    creatureService.createCreature(user.db_id, creature, user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n\n    console.log('Successfully added creature');\n  }\n\n  // UPDATE creature stats\n  const updateCreatureStats = async (creatureId) => {\n    const creature = creatures.filter(being => being.id === creatureId);\n\n    await creatureService.updateCreatureStats(user.db_id, creatureId, creature, user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n\n    dispatch({ type: 'UPDATE_CREATURE', creature: {\n      exp: creature.exp,\n      exp_goal: creature.exp_goal,\n      exp_surplus: creature.exp_surplus,\n      prev_exp_goal: creature.prev_exp_goal,\n      difficulty: creature.difficulty,\n      multiplier: creature.multiplier,\n      pokeball_number: creature.pokeball_number,\n    }});\n\n    console.log('Successfully added creature');\n  }\n\n  // UPDATE creature objectives\n  const updateCreatureObjectves = async (creatureId) => {\n    const creature = creatures.filter(being => being.id === creatureId);\n\n    await creatureService.updateCreatureObjectves(user.db_id, creatureId, creature, user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n\n    dispatch({ type: 'UPDATE_CREATURE', creature: {\n      objectives: creature.objectives,\n    }});\n\n    console.log('Successfully added creature');\n  }\n\n  // UPDATE creature info\n  const updateCreatureInfo = async (creatureId) => {\n    const creature = creatures.filter(being => being.id === creatureId);\n\n    await creatureService.updateCreatureObjectves(user.db_id, creatureId, creature, user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n\n    dispatch({ type: 'UPDATE_CREATURE', creature: {\n      creature_name: creature.creature_name,\n      evolutions: creature.evolutions,\n    }});\n\n    console.log('Successfully added creature');\n  }\n\n  // DELETE creature\n  const deleteCreature = async (creatureId) => {\n    const creature = user.creatures.filter(being => being.id === creatureId);\n\n    await creatureService.deleteCreature(user.db_id, creature._id, creature, user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n    \n    dispatch({ type: 'DELETE_CREATURE', creature: { creature }});\n\n    console.log('Successfully deleted creature: ' + creature);\n  }\n\n  const getExp = (creature, habit, time) => { \n    if (creature.is_noob) return getFirstExp(creature);\n\n    const streakCount = creature.streak_count;\n\n    const newExp = objective.calcExp(creature.multiplier, streakCount, habit.difficulty, time);\n    const newTotal = creature.exp + newExp;\n\n    const newSurplus = (newTotal >= creature.exp_goal) ? \n      newTotal - creature.exp_goal :\n      creature.exp_surplus + newExp;\n\n    dispatch({ type: 'ADD_EXP', creature: {\n      id: creature.id,\n      newTotal,\n      newSurplus\n    }});\n\n    return creature;\n  }\n\n  const getFirstExp = creature => {\n    const newTotal = 1;\n    const newSurplus = 0;\n\n    dispatch({ type: 'ADD_EXP', creature: { id: creature.id, newTotal, newSurplus } });\n\n    return creature;\n  }\n\n  const toggleExpUpdate = () => {\n    setExpUpdate(!expUpdate);\n  }\n\n  const toggleFormDisplay = () => {\n    setFormDisplay(!formDisplay);\n  }\n\n  const sendCreatureId = id => {\n    return setCurrentId(id);\n  }\n\n  const togglePlay = () => {\n    setPlay(!play);\n  }\n\n  const checkObjectiveText = (creatureId, text) => {\n    const creatureInfo = creatures.filter(being => being.id === creatureId);\n\n    const objectiveIndex = creatureInfo[0].objectives.findIndex(item => item.text.toLowerCase() === text.toLowerCase());\n    return (objectiveIndex >= 0) ? true : false;\n  }\n\n  return (\n    <CreatureContext.Provider \n      value={{\n        creatures,\n        createCreature,\n        updateCreatureStats,\n        updateCreatureObjectves,\n        updateCreatureInfo,\n        deleteCreature, \n        currentId,\n        play,\n        togglePlay,\n        formDisplay,\n        toggleFormDisplay,\n        expUpdate,\n        toggleExpUpdate,\n        dispatch,\n        sendCreatureId,\n        getExp,\n        checkObjectiveText,\n      }}>\n      {props.children}\n    </CreatureContext.Provider>\n  )\n}\n\nexport default CreatureContextProvider;\n"]},"metadata":{},"sourceType":"module"}