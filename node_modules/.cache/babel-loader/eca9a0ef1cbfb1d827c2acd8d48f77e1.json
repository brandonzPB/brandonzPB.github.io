{"ast":null,"code":"var _jsxFileName = \"/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/contexts/CreatureContext.js\";\nimport React, { useState, useReducer, useEffect, useContext, createContext } from 'react';\nimport creatureReducer from '../reducers/creatureReducer';\nimport * as objective from '../modules/objective';\nimport * as streakTime from '../modules/age';\nimport creatureService from '../services/creatureService';\nimport { UserContext } from './UserContext';\nexport const CreatureContext = createContext();\n\nconst CreatureContextProvider = props => {\n  const {\n    user,\n    userDispatch,\n    updateUser\n  } = useContext(UserContext);\n  const [creatures, dispatch] = useReducer(creatureReducer, user.creatures); //   const creatures = localStorage.getItem('my-user');\n  //   const storedCreatures = creatures ? JSON.parse(creatures) : [];\n  //   return storedCreatures.creatures;\n  // });\n\n  /* useEffect(() => {\n    console.log('creatures', creatures)\n     dispatch({ type: 'UPDATE_STATE', creatures: { creatures: user.creatures }});\n  }, [])\n   useEffect(() => {\n    userDispatch({ type: 'UPDATE_CREATURES', creatures: { creatures: user.creatures }});\n    localStorage.setItem('my-user', JSON.stringify(user));\n  }, [user.creatures]); */\n\n  /* const [creatures, dispatch] = useReducer(creatureReducer, [], () => {\n    const storedCreatures = localStorage.getItem('my-creatures');\n    return storedCreatures ? JSON.parse(storedCreatures) : [];\n  });\n   useEffect(() => {\n    localStorage.setItem('my-creatures', JSON.stringify(creatures));\n  }, [creatures]); */\n\n  const [currentId, setCurrentId] = useState('');\n  const [play, setPlay] = useState(false);\n  const [formDisplay, setFormDisplay] = useState(true);\n  const [expUpdate, setExpUpdate] = useState(false);\n  const [done, setDone] = useState({\n    type: '',\n    object: ''\n  });\n  useEffect(() => {\n    if (done.type === 'objective') {\n      updateObjectives();\n      return setDone({ ...done,\n        type: '',\n        object: null\n      });\n    } else if (done.type === 'creature') {\n      createCreature(done.object);\n      return setDone({ ...done,\n        type: '',\n        object: null\n      });\n    }\n    /*  else if (done.type === 'db') {\n     updateUser();\n      return setDone({\n       ...done,\n       type: '',\n       object: null\n     });\n    } */\n\n\n    return false;\n  }, [done]); // CREATE CREATURE\n\n  const finish = (type, object = null) => {\n    return type = 'creature' ? setDone({ ...done,\n      type,\n      object\n    }) : setDone({ ...done,\n      type\n    });\n  };\n\n  const createCreature = creatureObject => {\n    creatureService.createCreature(user.db_id, creatureObject, user.accessToken).then(res => res).catch(err => console.error(err));\n    console.log('Successfully added creature', creatureObject);\n    finish('db');\n  }; // UPDATE CREATURE STATS\n\n\n  const updateCreatureStats = async creatureId => {\n    const creature = user.creatures.filter(being => being.id === creatureId);\n    await creatureService.updateCreatureStats(user.db_id, creatureId, creature[0], user.accessToken).then(res => res).catch(err => console.error(err));\n    userDispatch({\n      type: 'UPDATE_CREATURE',\n      creature: {\n        exp: creature.exp,\n        exp_goal: creature.exp_goal,\n        exp_surplus: creature.exp_surplus,\n        prev_exp_goal: creature.prev_exp_goal,\n        difficulty: creature.difficulty,\n        multiplier: creature.multiplier,\n        pokeball_number: creature.pokeball_number\n      }\n    });\n    console.log('Successfully added creature');\n  }; /// OBJECTIVE METHODS ///\n\n\n  const checkObjectiveText = (creatureId, text) => {\n    const thisCreature = user.creatures.filter(being => being.id === creatureId);\n    const objectiveIndex = thisCreature[0].objectives.findIndex(item => item.text.toLowerCase() === text.toLowerCase());\n    return objectiveIndex >= 0 ? true : false;\n  }; // UPDATE OBJECTIVES\n\n\n  const updateObjectives = async () => {\n    const creature = user.creatures.filter(creature => creature.id === currentId);\n    const objectives = creature[0].objectives;\n    console.log('objectives', objectives);\n    await creatureService.updateObjectives(user.db_id, creature[0]._id, objectives, user.accessToken).then(res => console.log('res', res)).catch(err => console.error(err));\n    console.log('Successfully updated objectives');\n  }; // UPDATE CREATURE INFO\n\n\n  const updateCreatureInfo = async creatureId => {\n    const creature = user.creatures.filter(being => being.id === creatureId);\n    userDispatch({\n      type: 'UPDATE_CREATURE',\n      creature: {\n        creature_name: creature.creature_name,\n        evolutions: creature.evolutions\n      }\n    });\n    await creatureService.updateCreatureObjectives(user.db_id, creatureId, creature[0], user.accessToken).then(res => res).catch(err => console.error(err));\n    console.log('Successfully added creature');\n  }; // DELETE CREATURE\n\n\n  const deleteCreature = async creatureId => {\n    const creature = user.creatures.filter(being => being.id === creatureId);\n    userDispatch({\n      type: 'DELETE_CREATURE',\n      id: creatureId\n    });\n    await creatureService.deleteCreature(user.db_id, creature[0]._id, user.accessToken).then(res => res).catch(err => console.error(err));\n    console.log('Successfully deleted creature: ' + creature);\n  };\n\n  const getExp = (creature, habit, time) => {\n    if (creature.is_noob) return getFirstExp(creature);\n    const streakCount = creature.streak_count;\n    const newExp = objective.calcExp(creature.multiplier, streakCount, habit.difficulty, time);\n    const newTotal = creature.exp + newExp;\n    const newSurplus = newTotal >= creature.exp_goal ? newTotal - creature.exp_goal : creature.exp_surplus + newExp;\n    userDispatch({\n      type: 'ADD_EXP',\n      creature: {\n        id: creature.id,\n        newTotal,\n        newSurplus\n      }\n    });\n    return creature;\n  };\n\n  const getFirstExp = creature => {\n    const newTotal = 1;\n    const newSurplus = 0;\n    userDispatch({\n      type: 'ADD_EXP',\n      creature: {\n        id: creature.id,\n        newTotal,\n        newSurplus\n      }\n    });\n    return creature;\n  };\n\n  const toggleExpUpdate = () => {\n    setExpUpdate(!expUpdate);\n  };\n\n  const toggleFormDisplay = () => {\n    setFormDisplay(!formDisplay);\n  };\n\n  const showCreatureObjectives = async id => {\n    return setCurrentId(id);\n  };\n\n  const togglePlay = () => {\n    setPlay(!play);\n  };\n\n  return /*#__PURE__*/React.createElement(CreatureContext.Provider, {\n    value: {\n      creatures,\n      createCreature,\n      updateCreatureInfo,\n      updateCreatureStats,\n      updateObjectives,\n      deleteCreature,\n      currentId,\n      play,\n      togglePlay,\n      formDisplay,\n      toggleFormDisplay,\n      expUpdate,\n      toggleExpUpdate,\n      done,\n      setDone,\n      finish,\n      dispatch,\n      showCreatureObjectives,\n      getExp,\n      checkObjectiveText\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default CreatureContextProvider;","map":{"version":3,"sources":["/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/contexts/CreatureContext.js"],"names":["React","useState","useReducer","useEffect","useContext","createContext","creatureReducer","objective","streakTime","creatureService","UserContext","CreatureContext","CreatureContextProvider","props","user","userDispatch","updateUser","creatures","dispatch","currentId","setCurrentId","play","setPlay","formDisplay","setFormDisplay","expUpdate","setExpUpdate","done","setDone","type","object","updateObjectives","createCreature","finish","creatureObject","db_id","accessToken","then","res","catch","err","console","error","log","updateCreatureStats","creatureId","creature","filter","being","id","exp","exp_goal","exp_surplus","prev_exp_goal","difficulty","multiplier","pokeball_number","checkObjectiveText","text","thisCreature","objectiveIndex","objectives","findIndex","item","toLowerCase","_id","updateCreatureInfo","creature_name","evolutions","updateCreatureObjectives","deleteCreature","getExp","habit","time","is_noob","getFirstExp","streakCount","streak_count","newExp","calcExp","newTotal","newSurplus","toggleExpUpdate","toggleFormDisplay","showCreatureObjectives","togglePlay","children"],"mappings":"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","sourcesContent":["import React, { useState, useReducer, useEffect, useContext, createContext } from 'react';\nimport creatureReducer from '../reducers/creatureReducer';\nimport * as objective from '../modules/objective'\nimport * as streakTime from '../modules/age';\nimport creatureService from '../services/creatureService';\nimport { UserContext } from './UserContext';\n\nexport const CreatureContext = createContext();\n\nconst CreatureContextProvider = (props) => {\n  const { user, userDispatch, updateUser } = useContext(UserContext);\n\n  const [creatures, dispatch] = useReducer(creatureReducer, user.creatures);\n  //   const creatures = localStorage.getItem('my-user');\n  //   const storedCreatures = creatures ? JSON.parse(creatures) : [];\n  //   return storedCreatures.creatures;\n  // });\n\n  /* useEffect(() => {\n    console.log('creatures', creatures)\n\n    dispatch({ type: 'UPDATE_STATE', creatures: { creatures: user.creatures }});\n  }, [])\n\n  useEffect(() => {\n    userDispatch({ type: 'UPDATE_CREATURES', creatures: { creatures: user.creatures }});\n    localStorage.setItem('my-user', JSON.stringify(user));\n  }, [user.creatures]); */\n\n  /* const [creatures, dispatch] = useReducer(creatureReducer, [], () => {\n    const storedCreatures = localStorage.getItem('my-creatures');\n    return storedCreatures ? JSON.parse(storedCreatures) : [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem('my-creatures', JSON.stringify(creatures));\n  }, [creatures]); */\n\n  const [currentId, setCurrentId] = useState('');\n  const [play, setPlay] = useState(false);\n  const [formDisplay, setFormDisplay] = useState(true);\n  const [expUpdate, setExpUpdate] = useState(false);\n\n  const [done, setDone] = useState({\n    type: '',\n    object: ''\n  });\n\n  useEffect(() => {\n    if (done.type === 'objective') {\n      updateObjectives();\n\n      return setDone({\n        ...done,\n        type: '',\n        object: null\n      });\n    } else if (done.type === 'creature') {\n      createCreature(done.object);\n\n      return setDone({\n        ...done,\n        type: '',\n        object: null\n      });\n    }/*  else if (done.type === 'db') {\n      updateUser();\n\n      return setDone({\n        ...done,\n        type: '',\n        object: null\n      });\n    } */\n\n    return false;\n  }, [done]);\n\n  // CREATE CREATURE\n  const finish = (type, object = null) => {\n    return type = 'creature' ?\n      setDone({\n        ...done, \n        type,\n        object\n      }) :\n      setDone({\n        ...done,\n        type\n      });\n  }\n\n  const createCreature = creatureObject => {\n    creatureService.createCreature(user.db_id, creatureObject, user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n\n    console.log('Successfully added creature', creatureObject);\n\n    finish('db');\n  }\n\n  // UPDATE CREATURE STATS\n  const updateCreatureStats = async (creatureId) => {\n    const creature = user.creatures.filter(being => being.id === creatureId);\n\n    await creatureService.updateCreatureStats(user.db_id, creatureId, creature[0], user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n\n    userDispatch({ type: 'UPDATE_CREATURE', creature: {\n      exp: creature.exp,\n      exp_goal: creature.exp_goal,\n      exp_surplus: creature.exp_surplus,\n      prev_exp_goal: creature.prev_exp_goal,\n      difficulty: creature.difficulty,\n      multiplier: creature.multiplier,\n      pokeball_number: creature.pokeball_number,\n    }});\n\n    console.log('Successfully added creature');\n  }\n\n  /// OBJECTIVE METHODS ///\n\n  const checkObjectiveText = (creatureId, text) => {\n    const thisCreature = user.creatures.filter(being => being.id === creatureId);\n\n    const objectiveIndex = thisCreature[0].objectives.findIndex(item => item.text.toLowerCase() === text.toLowerCase());\n    return (objectiveIndex >= 0) ? true : false;\n  }\n\n  // UPDATE OBJECTIVES\n  const updateObjectives = async () => {\n    const creature = user.creatures.filter(creature => creature.id === currentId);\n\n    const objectives = creature[0].objectives;\n    console.log('objectives', objectives)\n\n    await creatureService.updateObjectives(user.db_id, creature[0]._id, objectives, user.accessToken)\n      .then(res => console.log('res', res))\n      .catch(err => console.error(err));\n\n    console.log('Successfully updated objectives');\n  }\n\n  // UPDATE CREATURE INFO\n  const updateCreatureInfo = async (creatureId) => {\n    const creature = user.creatures.filter(being => being.id === creatureId);\n\n    userDispatch({ type: 'UPDATE_CREATURE', creature: {\n      creature_name: creature.creature_name,\n      evolutions: creature.evolutions,\n    }});\n\n    await creatureService.updateCreatureObjectives(user.db_id, creatureId, creature[0], user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n\n    console.log('Successfully added creature');\n  }\n\n  // DELETE CREATURE\n  const deleteCreature = async (creatureId) => {\n    const creature = user.creatures.filter(being => being.id === creatureId);\n\n    userDispatch({ type: 'DELETE_CREATURE', id: creatureId });\n\n    await creatureService.deleteCreature(user.db_id, creature[0]._id, user.accessToken)\n      .then(res => res)\n      .catch(err => console.error(err));\n\n    console.log('Successfully deleted creature: ' + creature);\n  }\n\n  const getExp = (creature, habit, time) => { \n    if (creature.is_noob) return getFirstExp(creature);\n\n    const streakCount = creature.streak_count;\n\n    const newExp = objective.calcExp(creature.multiplier, streakCount, habit.difficulty, time);\n    const newTotal = creature.exp + newExp;\n\n    const newSurplus = (newTotal >= creature.exp_goal) ? \n      newTotal - creature.exp_goal :\n      creature.exp_surplus + newExp;\n\n    userDispatch({ type: 'ADD_EXP', creature: {\n      id: creature.id,\n      newTotal,\n      newSurplus\n    }});\n\n    return creature;\n  }\n\n  const getFirstExp = creature => {\n    const newTotal = 1;\n    const newSurplus = 0;\n\n    userDispatch({ type: 'ADD_EXP', creature: { id: creature.id, newTotal, newSurplus } });\n\n    return creature;\n  }\n\n  const toggleExpUpdate = () => {\n    setExpUpdate(!expUpdate);\n  }\n\n  const toggleFormDisplay = () => {\n    setFormDisplay(!formDisplay);\n  }\n\n  const showCreatureObjectives = async (id) => {\n    return setCurrentId(id);\n  }\n\n  const togglePlay = () => {\n    setPlay(!play);\n  }\n\n  return (\n    <CreatureContext.Provider \n      value={{\n        creatures,\n        createCreature,\n        updateCreatureInfo,\n        updateCreatureStats,\n        updateObjectives,\n        deleteCreature, \n        currentId,\n        play,\n        togglePlay,\n        formDisplay,\n        toggleFormDisplay,\n        expUpdate,\n        toggleExpUpdate,\n        done,\n        setDone,\n        finish,\n        dispatch,\n        showCreatureObjectives,\n        getExp,\n        checkObjectiveText,\n      }}>\n      {props.children}\n    </CreatureContext.Provider>\n  )\n}\n\nexport default CreatureContextProvider;\n"]},"metadata":{},"sourceType":"module"}