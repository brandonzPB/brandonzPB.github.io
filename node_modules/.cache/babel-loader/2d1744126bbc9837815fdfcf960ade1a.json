{"ast":null,"code":"var _jsxFileName = \"/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/components/user/ResetPassword.js\";\nimport React, { useState, useContext } from 'react';\nimport { Link, Route, Redirect } from 'react-router-dom';\nimport { UserContext } from '../../contexts/UserContext';\nimport userService from '../../services/userService';\nimport './user.css';\n\nconst ResetPassword = () => {\n  const {\n    reset,\n    setReset\n  } = useContext(UserContext);\n  const [form, setForm] = useState({\n    password: '',\n    confirmPassword: ''\n  });\n  const [error, setError] = useState({\n    upset: false\n  });\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setForm({ ...form,\n      [name]: value\n    });\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setError({ ...error,\n      upset: false\n    });\n\n    if (form.password.trim() && form.confirmPassword.trim()) {\n      if (form.password === form.confirmPassword) {\n        const userObject = {\n          email: reset.email,\n          password: form.password\n        };\n        const passwordReset = await userService.putPasswordReset(userObject, reset.resetToken);\n\n        if (passwordReset === 'Complete') {\n          setReset({ ...reset,\n            passwordReset: true\n          });\n        }\n      } else {\n        return setError({ ...error,\n          upset: true\n        });\n      }\n    } else {\n      return setError({ ...error,\n        upset: true\n      });\n    }\n  };\n\n  const viewPassword = event => {\n    event.preventDefault();\n    return setShowPassword(!showPassword);\n  };\n\n  const cancelRequest = () => {\n    setReset({ ...reset,\n      resetToken: '',\n      email: '',\n      code: ''\n    });\n  };\n\n  if (!reset.resetToken || reset.passwordReset) {\n    return /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/user/reset/password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"reset-password-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: cancelRequest,\n    className: \"cancel-reset-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, \"Cancel Reset\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"password-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, \"New Password: \"), /*#__PURE__*/React.createElement(\"input\", {\n    type: showPassword ? 'text' : 'password',\n    name: \"password\",\n    value: form.password,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"show-password\",\n    onClick: viewPassword,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }, \"\\uD83D\\uDC41\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"confirm-password-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, \"Confirm New Password: \"), /*#__PURE__*/React.createElement(\"input\", {\n    type: showPassword ? 'text' : 'password',\n    name: \"confirmPassword\",\n    value: form.confirmPassword,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"submit-password-reset\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"submit-reset-btn\",\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, \"Reset Password\"))));\n};\n\nexport default ResetPassword;","map":{"version":3,"sources":["/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/components/user/ResetPassword.js"],"names":["React","useState","useContext","Link","Route","Redirect","UserContext","userService","ResetPassword","reset","setReset","form","setForm","password","confirmPassword","error","setError","upset","showPassword","setShowPassword","handleChange","event","name","value","target","handleSubmit","preventDefault","trim","userObject","email","passwordReset","putPasswordReset","resetToken","viewPassword","cancelRequest","code"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport { Link, Route, Redirect } from 'react-router-dom';\nimport { UserContext } from '../../contexts/UserContext';\nimport userService from '../../services/userService';\nimport './user.css';\n\nconst ResetPassword = () => {\n  const { reset, setReset } = useContext(UserContext);\n\n  const [form, setForm] = useState({\n    password: '',\n    confirmPassword: ''\n  });\n\n  const [error, setError] = useState({ upset: false });\n\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    setForm({\n      ...form,\n      [name]: value\n    });\n  }\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    setError({\n      ...error,\n      upset: false\n    });\n\n    if (form.password.trim() && form.confirmPassword.trim()) {\n      if (form.password === form.confirmPassword) {\n        const userObject = {\n          email: reset.email,\n          password: form.password\n        };\n\n        const passwordReset = await userService.putPasswordReset(userObject, reset.resetToken);\n\n        if (passwordReset === 'Complete') {\n          setReset({\n            ...reset,\n            passwordReset: true\n          });\n        } \n      } else {\n        return setError({\n          ...error,\n          upset: true\n        });\n      }\n    } else {\n      return setError({\n        ...error,\n        upset: true\n      });\n    }\n  }\n  \n  const viewPassword = event => {\n    event.preventDefault();\n\n    return setShowPassword(!showPassword);\n  }\n\n  const cancelRequest = () => {\n    setReset({\n      ...reset,\n      resetToken: '',\n      email: '',\n      code: '',\n    });\n  }\n\n  if (!reset.resetToken || reset.passwordReset) {\n    return (\n      <Route exact path=\"/user/reset/password\">\n        <Redirect to=\"/\" />\n      </Route>\n    )\n  }\n\n  return (\n    <div className=\"reset-password-container\">\n      <button onClick={cancelRequest} className=\"cancel-reset-btn\">Cancel Reset</button>\n\n      <form onSubmit={handleSubmit}>\n        <div className=\"password-input\">\n          <label>New Password: </label>\n          <input \n            type={showPassword ? 'text' : 'password'}\n            name=\"password\"\n            value={form.password}\n            onChange={handleChange}\n          />\n          <button className=\"show-password\" onClick={viewPassword}>&#128065;</button>\n        </div>\n\n        <div className=\"confirm-password-input\">\n          <label>Confirm New Password: </label>\n          <input \n            type={showPassword ? 'text' : 'password'}\n            name=\"confirmPassword\"\n            value={form.confirmPassword}\n            onChange={handleChange}\n          />\n        </div>\n\n        <div className=\"submit-password-reset\">\n          <button className=\"submit-reset-btn\" onClick={handleSubmit}>Reset Password</button>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nexport default ResetPassword;\n"]},"metadata":{},"sourceType":"module"}