{"ast":null,"code":"import axios from 'axios';\nconst baseUrl = '/dashboard/user'; // GET all creatures\n\nconst getAll = (userId, token) => {\n  const req = axios.get(`${baseUrl}/${userId}/creatures`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  console.log(req);\n  return req.then(res => res.data).catch(err => console.error(err));\n}; // CREATE creature\n\n\nconst createCreature = (userId, creatureObject, token) => {\n  const req = axios.post(`${baseUrl}/${userId}/creature/create`, creatureObject, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => res.data);\n}; // READ creature\n\n\nconst readCreature = (userId, creatureId, token) => {\n  const req = axios.get(`${baseUrl}/${userId}/creature/${creatureId}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => res.data);\n}; // UPDATE creature stats\n\n\nconst updateCreatureStats = (userId, creatureId, creatureObject, token) => {\n  const req = axios.put(`${baseUrl}/${userId}/creature/${creatureId}`, creatureObject, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => res.data);\n}; // UPDATE creature objectives\n\n\nconst updateCreatureObjectves = (userId, creatureId, creatureObject, token) => {\n  const req = axios.put(`${baseUrl}/${userId}/creature/${creatureId}/objectives`, creatureObject, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => res.data);\n}; // UPDATE creature info\n\n\nconst updateCreatureInfo = (userId, creatureId, creatureObject, token) => {\n  const req = axios.put(`${baseUrl}/${userId}/creature/${creatureId}/info`, creatureObject, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => res.data);\n}; // DELETE creature\n\n\nconst deleteCreature = (userId, creatureId, creatureObject, token) => {\n  const req = axios.delete(`${baseUrl}/${userId}/creature/${creatureId}`, creatureObject, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => res.data);\n};\n\nexport default {\n  getAll,\n  createCreature,\n  readCreature,\n  updateCreatureStats,\n  updateCreatureObjectves,\n  updateCreatureInfo,\n  deleteCreature\n};","map":{"version":3,"sources":["/home/brandonzpb/Documents/projects/custom/creatures-of-habit/creatures-frontend/src/services/creatureService.js"],"names":["axios","baseUrl","getAll","userId","token","req","get","headers","console","log","then","res","data","catch","err","error","createCreature","creatureObject","post","readCreature","creatureId","updateCreatureStats","put","updateCreatureObjectves","updateCreatureInfo","deleteCreature","delete"],"mappings":"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","sourcesContent":["import axios from 'axios';\nconst baseUrl = '/dashboard/user';\n\n// GET all creatures\nconst getAll = (userId, token) => {\n  const req = axios.get(`${baseUrl}/${userId}/creatures`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n\n  console.log(req);\n  \n  return req.then(res => res.data)\n    .catch(err => console.error(err));\n}\n\n// CREATE creature\nconst createCreature = (userId, creatureObject, token) => {\n  const req = axios.post(`${baseUrl}/${userId}/creature/create`, creatureObject, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => res.data);\n};\n\n// READ creature\nconst readCreature = (userId, creatureId, token) => {\n  const req = axios.get(`${baseUrl}/${userId}/creature/${creatureId}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => res.data);\n};\n\n// UPDATE creature stats\nconst updateCreatureStats = (userId, creatureId, creatureObject, token) => {\n  const req = axios.put(`${baseUrl}/${userId}/creature/${creatureId}`, creatureObject, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => res.data);\n};\n\n// UPDATE creature objectives\nconst updateCreatureObjectves = (userId, creatureId, creatureObject, token) => {\n  const req = axios.put(`${baseUrl}/${userId}/creature/${creatureId}/objectives`, creatureObject, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => res.data);\n};\n\n// UPDATE creature info\nconst updateCreatureInfo = (userId, creatureId, creatureObject, token) => {\n  const req = axios.put(`${baseUrl}/${userId}/creature/${creatureId}/info`, creatureObject, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => res.data);\n};\n\n// DELETE creature\nconst deleteCreature = (userId, creatureId, creatureObject, token) => {\n  const req = axios.delete(`${baseUrl}/${userId}/creature/${creatureId}`, creatureObject, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  return req.then(res => res.data);\n};\n\nexport default {\n  getAll,\n  createCreature,\n  readCreature,\n  updateCreatureStats,\n  updateCreatureObjectves,\n  updateCreatureInfo,\n  deleteCreature,\n};\n"]},"metadata":{},"sourceType":"module"}